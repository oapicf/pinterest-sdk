/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsRetailItemErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsRetailItemErrorResponse{}

// CatalogsRetailItemErrorResponse Object describing a retail item error
type CatalogsRetailItemErrorResponse struct {
	CatalogType CatalogsType `json:"catalog_type"`
	// The catalog item id in the merchant namespace
	ItemId *string `json:"item_id,omitempty"`
	// Array with the errors for the item id requested
	Errors []ItemValidationEvent `json:"errors,omitempty"`
}

type _CatalogsRetailItemErrorResponse CatalogsRetailItemErrorResponse

// NewCatalogsRetailItemErrorResponse instantiates a new CatalogsRetailItemErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsRetailItemErrorResponse(catalogType CatalogsType) *CatalogsRetailItemErrorResponse {
	this := CatalogsRetailItemErrorResponse{}
	this.CatalogType = catalogType
	return &this
}

// NewCatalogsRetailItemErrorResponseWithDefaults instantiates a new CatalogsRetailItemErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsRetailItemErrorResponseWithDefaults() *CatalogsRetailItemErrorResponse {
	this := CatalogsRetailItemErrorResponse{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsRetailItemErrorResponse) GetCatalogType() CatalogsType {
	if o == nil {
		var ret CatalogsType
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemErrorResponse) GetCatalogTypeOk() (*CatalogsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsRetailItemErrorResponse) SetCatalogType(v CatalogsType) {
	o.CatalogType = v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *CatalogsRetailItemErrorResponse) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemErrorResponse) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *CatalogsRetailItemErrorResponse) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *CatalogsRetailItemErrorResponse) SetItemId(v string) {
	o.ItemId = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CatalogsRetailItemErrorResponse) GetErrors() []ItemValidationEvent {
	if o == nil || IsNil(o.Errors) {
		var ret []ItemValidationEvent
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemErrorResponse) GetErrorsOk() ([]ItemValidationEvent, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CatalogsRetailItemErrorResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ItemValidationEvent and assigns it to the Errors field.
func (o *CatalogsRetailItemErrorResponse) SetErrors(v []ItemValidationEvent) {
	o.Errors = v
}

func (o CatalogsRetailItemErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsRetailItemErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	if !IsNil(o.ItemId) {
		toSerialize["item_id"] = o.ItemId
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *CatalogsRetailItemErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsRetailItemErrorResponse := _CatalogsRetailItemErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsRetailItemErrorResponse)

	if err != nil {
		return err
	}

	*o = CatalogsRetailItemErrorResponse(varCatalogsRetailItemErrorResponse)

	return err
}

type NullableCatalogsRetailItemErrorResponse struct {
	value *CatalogsRetailItemErrorResponse
	isSet bool
}

func (v NullableCatalogsRetailItemErrorResponse) Get() *CatalogsRetailItemErrorResponse {
	return v.value
}

func (v *NullableCatalogsRetailItemErrorResponse) Set(val *CatalogsRetailItemErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsRetailItemErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsRetailItemErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsRetailItemErrorResponse(val *CatalogsRetailItemErrorResponse) *NullableCatalogsRetailItemErrorResponse {
	return &NullableCatalogsRetailItemErrorResponse{value: val, isSet: true}
}

func (v NullableCatalogsRetailItemErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsRetailItemErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


