/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EntityStatus Entity status
type EntityStatus string

// List of EntityStatus
const (
	ACTIVE EntityStatus = "ACTIVE"
	PAUSED EntityStatus = "PAUSED"
	ARCHIVED EntityStatus = "ARCHIVED"
	DRAFT EntityStatus = "DRAFT"
	DELETED_DRAFT EntityStatus = "DELETED_DRAFT"
)

// All allowed values of EntityStatus enum
var AllowedEntityStatusEnumValues = []EntityStatus{
	"ACTIVE",
	"PAUSED",
	"ARCHIVED",
	"DRAFT",
	"DELETED_DRAFT",
}

func (v *EntityStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityStatus(value)
	for _, existing := range AllowedEntityStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityStatus", value)
}

// NewEntityStatusFromValue returns a pointer to a valid EntityStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityStatusFromValue(v string) (*EntityStatus, error) {
	ev := EntityStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityStatus: valid values are %v", v, AllowedEntityStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityStatus) IsValid() bool {
	for _, existing := range AllowedEntityStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityStatus value
func (v EntityStatus) Ptr() *EntityStatus {
	return &v
}

type NullableEntityStatus struct {
	value *EntityStatus
	isSet bool
}

func (v NullableEntityStatus) Get() *EntityStatus {
	return v.value
}

func (v *NullableEntityStatus) Set(val *EntityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityStatus(val *EntityStatus) *NullableEntityStatus {
	return &NullableEntityStatus{value: val, isSet: true}
}

func (v NullableEntityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

