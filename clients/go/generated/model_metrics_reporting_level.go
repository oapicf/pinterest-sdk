/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MetricsReportingLevel Level of the reporting request
type MetricsReportingLevel string

// List of MetricsReportingLevel
const (
	ADVERTISER MetricsReportingLevel = "ADVERTISER"
	ADVERTISER_TARGETING MetricsReportingLevel = "ADVERTISER_TARGETING"
	CAMPAIGN MetricsReportingLevel = "CAMPAIGN"
	CAMPAIGN_TARGETING MetricsReportingLevel = "CAMPAIGN_TARGETING"
	AD_GROUP MetricsReportingLevel = "AD_GROUP"
	AD_GROUP_TARGETING MetricsReportingLevel = "AD_GROUP_TARGETING"
	PIN_PROMOTION MetricsReportingLevel = "PIN_PROMOTION"
	PIN_PROMOTION_TARGETING MetricsReportingLevel = "PIN_PROMOTION_TARGETING"
	KEYWORD MetricsReportingLevel = "KEYWORD"
	PRODUCT_GROUP MetricsReportingLevel = "PRODUCT_GROUP"
	PRODUCT_GROUP_TARGETING MetricsReportingLevel = "PRODUCT_GROUP_TARGETING"
	PRODUCT_ITEM MetricsReportingLevel = "PRODUCT_ITEM"
	PRODUCT_ITEM_TARGETING MetricsReportingLevel = "PRODUCT_ITEM_TARGETING"
)

// All allowed values of MetricsReportingLevel enum
var AllowedMetricsReportingLevelEnumValues = []MetricsReportingLevel{
	"ADVERTISER",
	"ADVERTISER_TARGETING",
	"CAMPAIGN",
	"CAMPAIGN_TARGETING",
	"AD_GROUP",
	"AD_GROUP_TARGETING",
	"PIN_PROMOTION",
	"PIN_PROMOTION_TARGETING",
	"KEYWORD",
	"PRODUCT_GROUP",
	"PRODUCT_GROUP_TARGETING",
	"PRODUCT_ITEM",
	"PRODUCT_ITEM_TARGETING",
}

func (v *MetricsReportingLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsReportingLevel(value)
	for _, existing := range AllowedMetricsReportingLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsReportingLevel", value)
}

// NewMetricsReportingLevelFromValue returns a pointer to a valid MetricsReportingLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsReportingLevelFromValue(v string) (*MetricsReportingLevel, error) {
	ev := MetricsReportingLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsReportingLevel: valid values are %v", v, AllowedMetricsReportingLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsReportingLevel) IsValid() bool {
	for _, existing := range AllowedMetricsReportingLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricsReportingLevel value
func (v MetricsReportingLevel) Ptr() *MetricsReportingLevel {
	return &v
}

type NullableMetricsReportingLevel struct {
	value *MetricsReportingLevel
	isSet bool
}

func (v NullableMetricsReportingLevel) Get() *MetricsReportingLevel {
	return v.value
}

func (v *NullableMetricsReportingLevel) Set(val *MetricsReportingLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsReportingLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsReportingLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsReportingLevel(val *MetricsReportingLevel) *NullableMetricsReportingLevel {
	return &NullableMetricsReportingLevel{value: val, isSet: true}
}

func (v NullableMetricsReportingLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsReportingLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

