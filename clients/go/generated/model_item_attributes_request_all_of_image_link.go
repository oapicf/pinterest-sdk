/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ItemAttributesRequestAllOfImageLink - <p><= 2000 characters</p> <p>The links to the main product images. Images should be at least 75x75 pixels to avoid errors. Use the additional_image_link field to add more images of your product. The URL of your image_link must be accessible by the Pinterest user-agent, and send the accurate images. Please make sure there are no template or placeholder images at the link. Must start with http:// or https://.</p>
type ItemAttributesRequestAllOfImageLink struct {
	ArrayOfString *[]string
	String *string
}

// []stringAsItemAttributesRequestAllOfImageLink is a convenience function that returns []string wrapped in ItemAttributesRequestAllOfImageLink
func ArrayOfStringAsItemAttributesRequestAllOfImageLink(v *[]string) ItemAttributesRequestAllOfImageLink {
	return ItemAttributesRequestAllOfImageLink{
		ArrayOfString: v,
	}
}

// stringAsItemAttributesRequestAllOfImageLink is a convenience function that returns string wrapped in ItemAttributesRequestAllOfImageLink
func StringAsItemAttributesRequestAllOfImageLink(v *string) ItemAttributesRequestAllOfImageLink {
	return ItemAttributesRequestAllOfImageLink{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ItemAttributesRequestAllOfImageLink) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ItemAttributesRequestAllOfImageLink)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ItemAttributesRequestAllOfImageLink)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ItemAttributesRequestAllOfImageLink) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ItemAttributesRequestAllOfImageLink) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableItemAttributesRequestAllOfImageLink struct {
	value *ItemAttributesRequestAllOfImageLink
	isSet bool
}

func (v NullableItemAttributesRequestAllOfImageLink) Get() *ItemAttributesRequestAllOfImageLink {
	return v.value
}

func (v *NullableItemAttributesRequestAllOfImageLink) Set(val *ItemAttributesRequestAllOfImageLink) {
	v.value = val
	v.isSet = true
}

func (v NullableItemAttributesRequestAllOfImageLink) IsSet() bool {
	return v.isSet
}

func (v *NullableItemAttributesRequestAllOfImageLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemAttributesRequestAllOfImageLink(val *ItemAttributesRequestAllOfImageLink) *NullableItemAttributesRequestAllOfImageLink {
	return &NullableItemAttributesRequestAllOfImageLink{value: val, isSet: true}
}

func (v NullableItemAttributesRequestAllOfImageLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemAttributesRequestAllOfImageLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


