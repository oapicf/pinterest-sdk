/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BusinessRoleForMembers The access level a member has to the business. Values are case-sensitive. <br> - EMPLOYEE: Can only view and access assets you assign to them. They cannot see details about other employees, partners, or other assets. <br> - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access.
type BusinessRoleForMembers string

// List of BusinessRoleForMembers
const (
	EMPLOYEE BusinessRoleForMembers = "EMPLOYEE"
	BIZ_ADMIN BusinessRoleForMembers = "BIZ_ADMIN"
)

// All allowed values of BusinessRoleForMembers enum
var AllowedBusinessRoleForMembersEnumValues = []BusinessRoleForMembers{
	"EMPLOYEE",
	"BIZ_ADMIN",
}

func (v *BusinessRoleForMembers) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BusinessRoleForMembers(value)
	for _, existing := range AllowedBusinessRoleForMembersEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BusinessRoleForMembers", value)
}

// NewBusinessRoleForMembersFromValue returns a pointer to a valid BusinessRoleForMembers
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBusinessRoleForMembersFromValue(v string) (*BusinessRoleForMembers, error) {
	ev := BusinessRoleForMembers(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BusinessRoleForMembers: valid values are %v", v, AllowedBusinessRoleForMembersEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BusinessRoleForMembers) IsValid() bool {
	for _, existing := range AllowedBusinessRoleForMembersEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BusinessRoleForMembers value
func (v BusinessRoleForMembers) Ptr() *BusinessRoleForMembers {
	return &v
}

type NullableBusinessRoleForMembers struct {
	value *BusinessRoleForMembers
	isSet bool
}

func (v NullableBusinessRoleForMembers) Get() *BusinessRoleForMembers {
	return v.value
}

func (v *NullableBusinessRoleForMembers) Set(val *BusinessRoleForMembers) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessRoleForMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessRoleForMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessRoleForMembers(val *BusinessRoleForMembers) *NullableBusinessRoleForMembers {
	return &NullableBusinessRoleForMembers{value: val, isSet: true}
}

func (v NullableBusinessRoleForMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessRoleForMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

