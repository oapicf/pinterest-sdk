/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProductAvailabilityType Default availability for products in a feed.
type ProductAvailabilityType string

// List of ProductAvailabilityType
const (
	IN_STOCK ProductAvailabilityType = "IN_STOCK"
	OUT_OF_STOCK ProductAvailabilityType = "OUT_OF_STOCK"
	PREORDER ProductAvailabilityType = "PREORDER"
)

// All allowed values of ProductAvailabilityType enum
var AllowedProductAvailabilityTypeEnumValues = []ProductAvailabilityType{
	"IN_STOCK",
	"OUT_OF_STOCK",
	"PREORDER",
}

func (v *ProductAvailabilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductAvailabilityType(value)
	for _, existing := range AllowedProductAvailabilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductAvailabilityType", value)
}

// NewProductAvailabilityTypeFromValue returns a pointer to a valid ProductAvailabilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductAvailabilityTypeFromValue(v string) (*ProductAvailabilityType, error) {
	ev := ProductAvailabilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductAvailabilityType: valid values are %v", v, AllowedProductAvailabilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductAvailabilityType) IsValid() bool {
	for _, existing := range AllowedProductAvailabilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductAvailabilityType value
func (v ProductAvailabilityType) Ptr() *ProductAvailabilityType {
	return &v
}

type NullableProductAvailabilityType struct {
	value *ProductAvailabilityType
	isSet bool
}

func (v NullableProductAvailabilityType) Get() *ProductAvailabilityType {
	return v.value
}

func (v *NullableProductAvailabilityType) Set(val *ProductAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAvailabilityType(val *ProductAvailabilityType) *NullableProductAvailabilityType {
	return &NullableProductAvailabilityType{value: val, isSet: true}
}

func (v NullableProductAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

