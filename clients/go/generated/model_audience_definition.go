/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AudienceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceDefinition{}

// AudienceDefinition Queryable audience representation.
type AudienceDefinition struct {
	// Generation date
	Date NullableString `json:"date,omitempty"`
	// Generated audience type to request.
	Type *string `json:"type,omitempty"`
	// Generated audience scope to request.
	Scope *string `json:"scope,omitempty"`
}

// NewAudienceDefinition instantiates a new AudienceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceDefinition() *AudienceDefinition {
	this := AudienceDefinition{}
	return &this
}

// NewAudienceDefinitionWithDefaults instantiates a new AudienceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceDefinitionWithDefaults() *AudienceDefinition {
	this := AudienceDefinition{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AudienceDefinition) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AudienceDefinition) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *AudienceDefinition) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *AudienceDefinition) SetDate(v string) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *AudienceDefinition) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *AudienceDefinition) UnsetDate() {
	o.Date.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AudienceDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AudienceDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AudienceDefinition) SetType(v string) {
	o.Type = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *AudienceDefinition) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceDefinition) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *AudienceDefinition) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *AudienceDefinition) SetScope(v string) {
	o.Scope = &v
}

func (o AudienceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableAudienceDefinition struct {
	value *AudienceDefinition
	isSet bool
}

func (v NullableAudienceDefinition) Get() *AudienceDefinition {
	return v.value
}

func (v *NullableAudienceDefinition) Set(val *AudienceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceDefinition(val *AudienceDefinition) *NullableAudienceDefinition {
	return &NullableAudienceDefinition{value: val, isSet: true}
}

func (v NullableAudienceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


