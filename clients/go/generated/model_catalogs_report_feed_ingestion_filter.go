/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsReportFeedIngestionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsReportFeedIngestionFilter{}

// CatalogsReportFeedIngestionFilter struct for CatalogsReportFeedIngestionFilter
type CatalogsReportFeedIngestionFilter struct {
	ReportType string `json:"report_type"`
	// ID of the feed entity.
	FeedId string `json:"feed_id" validate:"regexp=^\\\\d+$"`
	// Unique identifier of a feed processing result. It can be acquired from the \"id\" field of the \"items\" array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.
	ProcessingResultId *string `json:"processing_result_id,omitempty" validate:"regexp=^\\\\d+$"`
}

type _CatalogsReportFeedIngestionFilter CatalogsReportFeedIngestionFilter

// NewCatalogsReportFeedIngestionFilter instantiates a new CatalogsReportFeedIngestionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsReportFeedIngestionFilter(reportType string, feedId string) *CatalogsReportFeedIngestionFilter {
	this := CatalogsReportFeedIngestionFilter{}
	this.ReportType = reportType
	this.FeedId = feedId
	return &this
}

// NewCatalogsReportFeedIngestionFilterWithDefaults instantiates a new CatalogsReportFeedIngestionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsReportFeedIngestionFilterWithDefaults() *CatalogsReportFeedIngestionFilter {
	this := CatalogsReportFeedIngestionFilter{}
	return &this
}

// GetReportType returns the ReportType field value
func (o *CatalogsReportFeedIngestionFilter) GetReportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *CatalogsReportFeedIngestionFilter) GetReportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *CatalogsReportFeedIngestionFilter) SetReportType(v string) {
	o.ReportType = v
}

// GetFeedId returns the FeedId field value
func (o *CatalogsReportFeedIngestionFilter) GetFeedId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value
// and a boolean to check if the value has been set.
func (o *CatalogsReportFeedIngestionFilter) GetFeedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeedId, true
}

// SetFeedId sets field value
func (o *CatalogsReportFeedIngestionFilter) SetFeedId(v string) {
	o.FeedId = v
}

// GetProcessingResultId returns the ProcessingResultId field value if set, zero value otherwise.
func (o *CatalogsReportFeedIngestionFilter) GetProcessingResultId() string {
	if o == nil || IsNil(o.ProcessingResultId) {
		var ret string
		return ret
	}
	return *o.ProcessingResultId
}

// GetProcessingResultIdOk returns a tuple with the ProcessingResultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsReportFeedIngestionFilter) GetProcessingResultIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingResultId) {
		return nil, false
	}
	return o.ProcessingResultId, true
}

// HasProcessingResultId returns a boolean if a field has been set.
func (o *CatalogsReportFeedIngestionFilter) HasProcessingResultId() bool {
	if o != nil && !IsNil(o.ProcessingResultId) {
		return true
	}

	return false
}

// SetProcessingResultId gets a reference to the given string and assigns it to the ProcessingResultId field.
func (o *CatalogsReportFeedIngestionFilter) SetProcessingResultId(v string) {
	o.ProcessingResultId = &v
}

func (o CatalogsReportFeedIngestionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsReportFeedIngestionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["report_type"] = o.ReportType
	toSerialize["feed_id"] = o.FeedId
	if !IsNil(o.ProcessingResultId) {
		toSerialize["processing_result_id"] = o.ProcessingResultId
	}
	return toSerialize, nil
}

func (o *CatalogsReportFeedIngestionFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"report_type",
		"feed_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsReportFeedIngestionFilter := _CatalogsReportFeedIngestionFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsReportFeedIngestionFilter)

	if err != nil {
		return err
	}

	*o = CatalogsReportFeedIngestionFilter(varCatalogsReportFeedIngestionFilter)

	return err
}

type NullableCatalogsReportFeedIngestionFilter struct {
	value *CatalogsReportFeedIngestionFilter
	isSet bool
}

func (v NullableCatalogsReportFeedIngestionFilter) Get() *CatalogsReportFeedIngestionFilter {
	return v.value
}

func (v *NullableCatalogsReportFeedIngestionFilter) Set(val *CatalogsReportFeedIngestionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsReportFeedIngestionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsReportFeedIngestionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsReportFeedIngestionFilter(val *CatalogsReportFeedIngestionFilter) *NullableCatalogsReportFeedIngestionFilter {
	return &NullableCatalogsReportFeedIngestionFilter{value: val, isSet: true}
}

func (v NullableCatalogsReportFeedIngestionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsReportFeedIngestionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


