/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PacingDeliveryType Ad group pacing delivery type. With ACCELERATED, an ad group budget is spent as fast as possible. With STANDARD, an ad group budget is spent smoothly over a day. When using CBO, only the STANDARD pacing delivery type is allowed.
type PacingDeliveryType string

// List of PacingDeliveryType
const (
	STANDARD PacingDeliveryType = "STANDARD"
	ACCELERATED PacingDeliveryType = "ACCELERATED"
)

// All allowed values of PacingDeliveryType enum
var AllowedPacingDeliveryTypeEnumValues = []PacingDeliveryType{
	"STANDARD",
	"ACCELERATED",
}

func (v *PacingDeliveryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PacingDeliveryType(value)
	for _, existing := range AllowedPacingDeliveryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PacingDeliveryType", value)
}

// NewPacingDeliveryTypeFromValue returns a pointer to a valid PacingDeliveryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPacingDeliveryTypeFromValue(v string) (*PacingDeliveryType, error) {
	ev := PacingDeliveryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PacingDeliveryType: valid values are %v", v, AllowedPacingDeliveryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PacingDeliveryType) IsValid() bool {
	for _, existing := range AllowedPacingDeliveryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PacingDeliveryType value
func (v PacingDeliveryType) Ptr() *PacingDeliveryType {
	return &v
}

type NullablePacingDeliveryType struct {
	value *PacingDeliveryType
	isSet bool
}

func (v NullablePacingDeliveryType) Get() *PacingDeliveryType {
	return v.value
}

func (v *NullablePacingDeliveryType) Set(val *PacingDeliveryType) {
	v.value = val
	v.isSet = true
}

func (v NullablePacingDeliveryType) IsSet() bool {
	return v.isSet
}

func (v *NullablePacingDeliveryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePacingDeliveryType(val *PacingDeliveryType) *NullablePacingDeliveryType {
	return &NullablePacingDeliveryType{value: val, isSet: true}
}

func (v NullablePacingDeliveryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePacingDeliveryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

