/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsListProductsByFeedBasedFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsListProductsByFeedBasedFilter{}

// CatalogsListProductsByFeedBasedFilter Request object to list products for a given feed_id and product group filter.
type CatalogsListProductsByFeedBasedFilter struct {
	// Catalog Feed id pertaining to the catalog product group filter.
	FeedId string `json:"feed_id" validate:"regexp=^\\\\d+$"`
	Filters CatalogsProductGroupFilters `json:"filters"`
}

type _CatalogsListProductsByFeedBasedFilter CatalogsListProductsByFeedBasedFilter

// NewCatalogsListProductsByFeedBasedFilter instantiates a new CatalogsListProductsByFeedBasedFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsListProductsByFeedBasedFilter(feedId string, filters CatalogsProductGroupFilters) *CatalogsListProductsByFeedBasedFilter {
	this := CatalogsListProductsByFeedBasedFilter{}
	this.FeedId = feedId
	this.Filters = filters
	return &this
}

// NewCatalogsListProductsByFeedBasedFilterWithDefaults instantiates a new CatalogsListProductsByFeedBasedFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsListProductsByFeedBasedFilterWithDefaults() *CatalogsListProductsByFeedBasedFilter {
	this := CatalogsListProductsByFeedBasedFilter{}
	return &this
}

// GetFeedId returns the FeedId field value
func (o *CatalogsListProductsByFeedBasedFilter) GetFeedId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeedId
}

// GetFeedIdOk returns a tuple with the FeedId field value
// and a boolean to check if the value has been set.
func (o *CatalogsListProductsByFeedBasedFilter) GetFeedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeedId, true
}

// SetFeedId sets field value
func (o *CatalogsListProductsByFeedBasedFilter) SetFeedId(v string) {
	o.FeedId = v
}

// GetFilters returns the Filters field value
func (o *CatalogsListProductsByFeedBasedFilter) GetFilters() CatalogsProductGroupFilters {
	if o == nil {
		var ret CatalogsProductGroupFilters
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *CatalogsListProductsByFeedBasedFilter) GetFiltersOk() (*CatalogsProductGroupFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filters, true
}

// SetFilters sets field value
func (o *CatalogsListProductsByFeedBasedFilter) SetFilters(v CatalogsProductGroupFilters) {
	o.Filters = v
}

func (o CatalogsListProductsByFeedBasedFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsListProductsByFeedBasedFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feed_id"] = o.FeedId
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

func (o *CatalogsListProductsByFeedBasedFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feed_id",
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsListProductsByFeedBasedFilter := _CatalogsListProductsByFeedBasedFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsListProductsByFeedBasedFilter)

	if err != nil {
		return err
	}

	*o = CatalogsListProductsByFeedBasedFilter(varCatalogsListProductsByFeedBasedFilter)

	return err
}

type NullableCatalogsListProductsByFeedBasedFilter struct {
	value *CatalogsListProductsByFeedBasedFilter
	isSet bool
}

func (v NullableCatalogsListProductsByFeedBasedFilter) Get() *CatalogsListProductsByFeedBasedFilter {
	return v.value
}

func (v *NullableCatalogsListProductsByFeedBasedFilter) Set(val *CatalogsListProductsByFeedBasedFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsListProductsByFeedBasedFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsListProductsByFeedBasedFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsListProductsByFeedBasedFilter(val *CatalogsListProductsByFeedBasedFilter) *NullableCatalogsListProductsByFeedBasedFilter {
	return &NullableCatalogsListProductsByFeedBasedFilter{value: val, isSet: true}
}

func (v NullableCatalogsListProductsByFeedBasedFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsListProductsByFeedBasedFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


