/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BatchOperation The operation performed by the batch. The DELETE_DISCONTINUED operation only updates availablity to \"Out of Stock\".
type BatchOperation string

// List of BatchOperation
const (
	UPDATE BatchOperation = "UPDATE"
	UPSERT BatchOperation = "UPSERT"
	CREATE BatchOperation = "CREATE"
	DELETE_DISCONTINUED BatchOperation = "DELETE_DISCONTINUED"
	DELETE BatchOperation = "DELETE"
)

// All allowed values of BatchOperation enum
var AllowedBatchOperationEnumValues = []BatchOperation{
	"UPDATE",
	"UPSERT",
	"CREATE",
	"DELETE_DISCONTINUED",
	"DELETE",
}

func (v *BatchOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BatchOperation(value)
	for _, existing := range AllowedBatchOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BatchOperation", value)
}

// NewBatchOperationFromValue returns a pointer to a valid BatchOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBatchOperationFromValue(v string) (*BatchOperation, error) {
	ev := BatchOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BatchOperation: valid values are %v", v, AllowedBatchOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BatchOperation) IsValid() bool {
	for _, existing := range AllowedBatchOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BatchOperation value
func (v BatchOperation) Ptr() *BatchOperation {
	return &v
}

type NullableBatchOperation struct {
	value *BatchOperation
	isSet bool
}

func (v NullableBatchOperation) Get() *BatchOperation {
	return v.value
}

func (v *NullableBatchOperation) Set(val *BatchOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchOperation(val *BatchOperation) *NullableBatchOperation {
	return &NullableBatchOperation{value: val, isSet: true}
}

func (v NullableBatchOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

