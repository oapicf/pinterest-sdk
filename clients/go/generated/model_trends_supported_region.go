/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TrendsSupportedRegion the model 'TrendsSupportedRegion'
type TrendsSupportedRegion string

// List of TrendsSupportedRegion
const (
	US TrendsSupportedRegion = "US"
	CA TrendsSupportedRegion = "CA"
	DE TrendsSupportedRegion = "DE"
	FR TrendsSupportedRegion = "FR"
	ES TrendsSupportedRegion = "ES"
	IT TrendsSupportedRegion = "IT"
	DEATCH TrendsSupportedRegion = "DE+AT+CH"
	GBIE TrendsSupportedRegion = "GB+IE"
	ITESPTGRMT TrendsSupportedRegion = "IT+ES+PT+GR+MT"
	PLROHUSKCZ TrendsSupportedRegion = "PL+RO+HU+SK+CZ"
	SEDKFINO TrendsSupportedRegion = "SE+DK+FI+NO"
	NLBELU TrendsSupportedRegion = "NL+BE+LU"
	AR TrendsSupportedRegion = "AR"
	BR TrendsSupportedRegion = "BR"
	CO TrendsSupportedRegion = "CO"
	MX TrendsSupportedRegion = "MX"
	MXARCOCL TrendsSupportedRegion = "MX+AR+CO+CL"
	AUNZ TrendsSupportedRegion = "AU+NZ"
)

// All allowed values of TrendsSupportedRegion enum
var AllowedTrendsSupportedRegionEnumValues = []TrendsSupportedRegion{
	"US",
	"CA",
	"DE",
	"FR",
	"ES",
	"IT",
	"DE+AT+CH",
	"GB+IE",
	"IT+ES+PT+GR+MT",
	"PL+RO+HU+SK+CZ",
	"SE+DK+FI+NO",
	"NL+BE+LU",
	"AR",
	"BR",
	"CO",
	"MX",
	"MX+AR+CO+CL",
	"AU+NZ",
}

func (v *TrendsSupportedRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrendsSupportedRegion(value)
	for _, existing := range AllowedTrendsSupportedRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrendsSupportedRegion", value)
}

// NewTrendsSupportedRegionFromValue returns a pointer to a valid TrendsSupportedRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrendsSupportedRegionFromValue(v string) (*TrendsSupportedRegion, error) {
	ev := TrendsSupportedRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrendsSupportedRegion: valid values are %v", v, AllowedTrendsSupportedRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrendsSupportedRegion) IsValid() bool {
	for _, existing := range AllowedTrendsSupportedRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TrendsSupportedRegion value
func (v TrendsSupportedRegion) Ptr() *TrendsSupportedRegion {
	return &v
}

type NullableTrendsSupportedRegion struct {
	value *TrendsSupportedRegion
	isSet bool
}

func (v NullableTrendsSupportedRegion) Get() *TrendsSupportedRegion {
	return v.value
}

func (v *NullableTrendsSupportedRegion) Set(val *TrendsSupportedRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendsSupportedRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendsSupportedRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendsSupportedRegion(val *TrendsSupportedRegion) *NullableTrendsSupportedRegion {
	return &NullableTrendsSupportedRegion{value: val, isSet: true}
}

func (v NullableTrendsSupportedRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendsSupportedRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

