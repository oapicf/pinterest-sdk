/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CatalogsRetailItemResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsRetailItemResponse{}

// CatalogsRetailItemResponse Object describing a retail item record
type CatalogsRetailItemResponse struct {
	CatalogType CatalogsType `json:"catalog_type"`
	// The catalog retail item id in the merchant namespace
	ItemId *string `json:"item_id,omitempty"`
	// The pins mapped to the item
	Pins []Pin `json:"pins,omitempty"`
	Attributes *ItemAttributes `json:"attributes,omitempty"`
}

type _CatalogsRetailItemResponse CatalogsRetailItemResponse

// NewCatalogsRetailItemResponse instantiates a new CatalogsRetailItemResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsRetailItemResponse(catalogType CatalogsType) *CatalogsRetailItemResponse {
	this := CatalogsRetailItemResponse{}
	this.CatalogType = catalogType
	return &this
}

// NewCatalogsRetailItemResponseWithDefaults instantiates a new CatalogsRetailItemResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsRetailItemResponseWithDefaults() *CatalogsRetailItemResponse {
	this := CatalogsRetailItemResponse{}
	return &this
}

// GetCatalogType returns the CatalogType field value
func (o *CatalogsRetailItemResponse) GetCatalogType() CatalogsType {
	if o == nil {
		var ret CatalogsType
		return ret
	}

	return o.CatalogType
}

// GetCatalogTypeOk returns a tuple with the CatalogType field value
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemResponse) GetCatalogTypeOk() (*CatalogsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogType, true
}

// SetCatalogType sets field value
func (o *CatalogsRetailItemResponse) SetCatalogType(v CatalogsType) {
	o.CatalogType = v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *CatalogsRetailItemResponse) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemResponse) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *CatalogsRetailItemResponse) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *CatalogsRetailItemResponse) SetItemId(v string) {
	o.ItemId = &v
}

// GetPins returns the Pins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CatalogsRetailItemResponse) GetPins() []Pin {
	if o == nil {
		var ret []Pin
		return ret
	}
	return o.Pins
}

// GetPinsOk returns a tuple with the Pins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CatalogsRetailItemResponse) GetPinsOk() ([]Pin, bool) {
	if o == nil || IsNil(o.Pins) {
		return nil, false
	}
	return o.Pins, true
}

// HasPins returns a boolean if a field has been set.
func (o *CatalogsRetailItemResponse) HasPins() bool {
	if o != nil && !IsNil(o.Pins) {
		return true
	}

	return false
}

// SetPins gets a reference to the given []Pin and assigns it to the Pins field.
func (o *CatalogsRetailItemResponse) SetPins(v []Pin) {
	o.Pins = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CatalogsRetailItemResponse) GetAttributes() ItemAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret ItemAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsRetailItemResponse) GetAttributesOk() (*ItemAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CatalogsRetailItemResponse) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given ItemAttributes and assigns it to the Attributes field.
func (o *CatalogsRetailItemResponse) SetAttributes(v ItemAttributes) {
	o.Attributes = &v
}

func (o CatalogsRetailItemResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsRetailItemResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_type"] = o.CatalogType
	if !IsNil(o.ItemId) {
		toSerialize["item_id"] = o.ItemId
	}
	if o.Pins != nil {
		toSerialize["pins"] = o.Pins
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

func (o *CatalogsRetailItemResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCatalogsRetailItemResponse := _CatalogsRetailItemResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCatalogsRetailItemResponse)

	if err != nil {
		return err
	}

	*o = CatalogsRetailItemResponse(varCatalogsRetailItemResponse)

	return err
}

type NullableCatalogsRetailItemResponse struct {
	value *CatalogsRetailItemResponse
	isSet bool
}

func (v NullableCatalogsRetailItemResponse) Get() *CatalogsRetailItemResponse {
	return v.value
}

func (v *NullableCatalogsRetailItemResponse) Set(val *CatalogsRetailItemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsRetailItemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsRetailItemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsRetailItemResponse(val *CatalogsRetailItemResponse) *NullableCatalogsRetailItemResponse {
	return &NullableCatalogsRetailItemResponse{value: val, isSet: true}
}

func (v NullableCatalogsRetailItemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsRetailItemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


