/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Keyword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keyword{}

// Keyword struct for Keyword
type Keyword struct {
	// </p><strong>Note:</strong> bid field has been deprecated. Input will not be set and field will return null. Keyword custom bid in microcurrency - null if inherited from parent ad group.
	Bid NullableInt32 `json:"bid,omitempty"`
	MatchType NullableMatchTypeResponse `json:"match_type"`
	// Keyword value (120 chars max).
	Value string `json:"value"`
	Archived *bool `json:"archived,omitempty"`
	// Keyword ID .
	Id *string `json:"id,omitempty" validate:"regexp=^\\\\d+$"`
	// Keyword parent entity ID (advertiser, campaign, ad group).
	ParentId *string `json:"parent_id,omitempty" validate:"regexp=^\\\\d+$"`
	// Parent entity type
	ParentType *string `json:"parent_type,omitempty"`
	// Always keyword
	Type *string `json:"type,omitempty"`
}

type _Keyword Keyword

// NewKeyword instantiates a new Keyword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyword(matchType NullableMatchTypeResponse, value string) *Keyword {
	this := Keyword{}
	this.MatchType = matchType
	this.Value = value
	return &this
}

// NewKeywordWithDefaults instantiates a new Keyword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordWithDefaults() *Keyword {
	this := Keyword{}
	return &this
}

// GetBid returns the Bid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Keyword) GetBid() int32 {
	if o == nil || IsNil(o.Bid.Get()) {
		var ret int32
		return ret
	}
	return *o.Bid.Get()
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Keyword) GetBidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bid.Get(), o.Bid.IsSet()
}

// HasBid returns a boolean if a field has been set.
func (o *Keyword) HasBid() bool {
	if o != nil && o.Bid.IsSet() {
		return true
	}

	return false
}

// SetBid gets a reference to the given NullableInt32 and assigns it to the Bid field.
func (o *Keyword) SetBid(v int32) {
	o.Bid.Set(&v)
}
// SetBidNil sets the value for Bid to be an explicit nil
func (o *Keyword) SetBidNil() {
	o.Bid.Set(nil)
}

// UnsetBid ensures that no value is present for Bid, not even an explicit nil
func (o *Keyword) UnsetBid() {
	o.Bid.Unset()
}

// GetMatchType returns the MatchType field value
// If the value is explicit nil, the zero value for MatchTypeResponse will be returned
func (o *Keyword) GetMatchType() MatchTypeResponse {
	if o == nil || o.MatchType.Get() == nil {
		var ret MatchTypeResponse
		return ret
	}

	return *o.MatchType.Get()
}

// GetMatchTypeOk returns a tuple with the MatchType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Keyword) GetMatchTypeOk() (*MatchTypeResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.MatchType.Get(), o.MatchType.IsSet()
}

// SetMatchType sets field value
func (o *Keyword) SetMatchType(v MatchTypeResponse) {
	o.MatchType.Set(&v)
}

// GetValue returns the Value field value
func (o *Keyword) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Keyword) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Keyword) SetValue(v string) {
	o.Value = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *Keyword) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *Keyword) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *Keyword) SetArchived(v bool) {
	o.Archived = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Keyword) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Keyword) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Keyword) SetId(v string) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Keyword) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Keyword) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Keyword) SetParentId(v string) {
	o.ParentId = &v
}

// GetParentType returns the ParentType field value if set, zero value otherwise.
func (o *Keyword) GetParentType() string {
	if o == nil || IsNil(o.ParentType) {
		var ret string
		return ret
	}
	return *o.ParentType
}

// GetParentTypeOk returns a tuple with the ParentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetParentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ParentType) {
		return nil, false
	}
	return o.ParentType, true
}

// HasParentType returns a boolean if a field has been set.
func (o *Keyword) HasParentType() bool {
	if o != nil && !IsNil(o.ParentType) {
		return true
	}

	return false
}

// SetParentType gets a reference to the given string and assigns it to the ParentType field.
func (o *Keyword) SetParentType(v string) {
	o.ParentType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Keyword) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Keyword) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Keyword) SetType(v string) {
	o.Type = &v
}

func (o Keyword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keyword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bid.IsSet() {
		toSerialize["bid"] = o.Bid.Get()
	}
	toSerialize["match_type"] = o.MatchType.Get()
	toSerialize["value"] = o.Value
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.ParentType) {
		toSerialize["parent_type"] = o.ParentType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *Keyword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"match_type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyword := _Keyword{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyword)

	if err != nil {
		return err
	}

	*o = Keyword(varKeyword)

	return err
}

type NullableKeyword struct {
	value *Keyword
	isSet bool
}

func (v NullableKeyword) Get() *Keyword {
	return v.value
}

func (v *NullableKeyword) Set(val *Keyword) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyword) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyword(val *Keyword) *NullableKeyword {
	return &NullableKeyword{value: val, isSet: true}
}

func (v NullableKeyword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


