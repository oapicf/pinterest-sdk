/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeletePartnerAssetsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePartnerAssetsResult{}

// DeletePartnerAssetsResult The terminated asset access.
type DeletePartnerAssetsResult struct {
	// Unique identifier of a business asset.
	AssetId *string `json:"asset_id,omitempty" validate:"regexp=^\\\\d+$"`
	// Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP.
	AssetType *string `json:"asset_type,omitempty"`
	// Permission levels member or partner has on an asset.
	Permissions []string `json:"permissions,omitempty"`
	// If is_shared_partner=FALSE, you terminated a partner's asset access to your business asset.<br> If is_shared_partner=TRUE, you terminated your asset access to your partner's business asset.
	IsSharedPartner *bool `json:"is_shared_partner,omitempty"`
	// Unique identifier of a business partner.
	PartnerId *string `json:"partner_id,omitempty" validate:"regexp=^\\\\d+$"`
}

// NewDeletePartnerAssetsResult instantiates a new DeletePartnerAssetsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePartnerAssetsResult() *DeletePartnerAssetsResult {
	this := DeletePartnerAssetsResult{}
	return &this
}

// NewDeletePartnerAssetsResultWithDefaults instantiates a new DeletePartnerAssetsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePartnerAssetsResultWithDefaults() *DeletePartnerAssetsResult {
	this := DeletePartnerAssetsResult{}
	return &this
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *DeletePartnerAssetsResult) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePartnerAssetsResult) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *DeletePartnerAssetsResult) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *DeletePartnerAssetsResult) SetAssetId(v string) {
	o.AssetId = &v
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *DeletePartnerAssetsResult) GetAssetType() string {
	if o == nil || IsNil(o.AssetType) {
		var ret string
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePartnerAssetsResult) GetAssetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AssetType) {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *DeletePartnerAssetsResult) HasAssetType() bool {
	if o != nil && !IsNil(o.AssetType) {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given string and assigns it to the AssetType field.
func (o *DeletePartnerAssetsResult) SetAssetType(v string) {
	o.AssetType = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *DeletePartnerAssetsResult) GetPermissions() []string {
	if o == nil || IsNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePartnerAssetsResult) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *DeletePartnerAssetsResult) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *DeletePartnerAssetsResult) SetPermissions(v []string) {
	o.Permissions = v
}

// GetIsSharedPartner returns the IsSharedPartner field value if set, zero value otherwise.
func (o *DeletePartnerAssetsResult) GetIsSharedPartner() bool {
	if o == nil || IsNil(o.IsSharedPartner) {
		var ret bool
		return ret
	}
	return *o.IsSharedPartner
}

// GetIsSharedPartnerOk returns a tuple with the IsSharedPartner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePartnerAssetsResult) GetIsSharedPartnerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSharedPartner) {
		return nil, false
	}
	return o.IsSharedPartner, true
}

// HasIsSharedPartner returns a boolean if a field has been set.
func (o *DeletePartnerAssetsResult) HasIsSharedPartner() bool {
	if o != nil && !IsNil(o.IsSharedPartner) {
		return true
	}

	return false
}

// SetIsSharedPartner gets a reference to the given bool and assigns it to the IsSharedPartner field.
func (o *DeletePartnerAssetsResult) SetIsSharedPartner(v bool) {
	o.IsSharedPartner = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *DeletePartnerAssetsResult) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePartnerAssetsResult) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *DeletePartnerAssetsResult) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *DeletePartnerAssetsResult) SetPartnerId(v string) {
	o.PartnerId = &v
}

func (o DeletePartnerAssetsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePartnerAssetsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	if !IsNil(o.AssetType) {
		toSerialize["asset_type"] = o.AssetType
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.IsSharedPartner) {
		toSerialize["is_shared_partner"] = o.IsSharedPartner
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partner_id"] = o.PartnerId
	}
	return toSerialize, nil
}

type NullableDeletePartnerAssetsResult struct {
	value *DeletePartnerAssetsResult
	isSet bool
}

func (v NullableDeletePartnerAssetsResult) Get() *DeletePartnerAssetsResult {
	return v.value
}

func (v *NullableDeletePartnerAssetsResult) Set(val *DeletePartnerAssetsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePartnerAssetsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePartnerAssetsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePartnerAssetsResult(val *DeletePartnerAssetsResult) *NullableDeletePartnerAssetsResult {
	return &NullableDeletePartnerAssetsResult{value: val, isSet: true}
}

func (v NullableDeletePartnerAssetsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePartnerAssetsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


