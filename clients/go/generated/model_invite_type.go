/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InviteType The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets.
type InviteType string

// List of InviteType
const (
	MEMBER_INVITE InviteType = "MEMBER_INVITE"
	PARTNER_INVITE InviteType = "PARTNER_INVITE"
	PARTNER_REQUEST InviteType = "PARTNER_REQUEST"
)

// All allowed values of InviteType enum
var AllowedInviteTypeEnumValues = []InviteType{
	"MEMBER_INVITE",
	"PARTNER_INVITE",
	"PARTNER_REQUEST",
}

func (v *InviteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InviteType(value)
	for _, existing := range AllowedInviteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InviteType", value)
}

// NewInviteTypeFromValue returns a pointer to a valid InviteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInviteTypeFromValue(v string) (*InviteType, error) {
	ev := InviteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InviteType: valid values are %v", v, AllowedInviteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InviteType) IsValid() bool {
	for _, existing := range AllowedInviteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InviteType value
func (v InviteType) Ptr() *InviteType {
	return &v
}

type NullableInviteType struct {
	value *InviteType
	isSet bool
}

func (v NullableInviteType) Get() *InviteType {
	return v.value
}

func (v *NullableInviteType) Set(val *InviteType) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteType) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteType(val *InviteType) *NullableInviteType {
	return &NullableInviteType{value: val, isSet: true}
}

func (v NullableInviteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

