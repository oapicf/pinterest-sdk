/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateAssetGroupBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetGroupBody{}

// CreateAssetGroupBody struct for CreateAssetGroupBody
type CreateAssetGroupBody struct {
	// Asset Group name
	AssetGroupName string `json:"asset_group_name"`
	// Asset group description
	AssetGroupDescription string `json:"asset_group_description"`
	// Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
	AssetGroupTypes []AssetGroupType `json:"asset_group_types"`
}

type _CreateAssetGroupBody CreateAssetGroupBody

// NewCreateAssetGroupBody instantiates a new CreateAssetGroupBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetGroupBody(assetGroupName string, assetGroupDescription string, assetGroupTypes []AssetGroupType) *CreateAssetGroupBody {
	this := CreateAssetGroupBody{}
	this.AssetGroupName = assetGroupName
	this.AssetGroupDescription = assetGroupDescription
	this.AssetGroupTypes = assetGroupTypes
	return &this
}

// NewCreateAssetGroupBodyWithDefaults instantiates a new CreateAssetGroupBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetGroupBodyWithDefaults() *CreateAssetGroupBody {
	this := CreateAssetGroupBody{}
	return &this
}

// GetAssetGroupName returns the AssetGroupName field value
func (o *CreateAssetGroupBody) GetAssetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetGroupName
}

// GetAssetGroupNameOk returns a tuple with the AssetGroupName field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGroupBody) GetAssetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetGroupName, true
}

// SetAssetGroupName sets field value
func (o *CreateAssetGroupBody) SetAssetGroupName(v string) {
	o.AssetGroupName = v
}

// GetAssetGroupDescription returns the AssetGroupDescription field value
func (o *CreateAssetGroupBody) GetAssetGroupDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetGroupDescription
}

// GetAssetGroupDescriptionOk returns a tuple with the AssetGroupDescription field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGroupBody) GetAssetGroupDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetGroupDescription, true
}

// SetAssetGroupDescription sets field value
func (o *CreateAssetGroupBody) SetAssetGroupDescription(v string) {
	o.AssetGroupDescription = v
}

// GetAssetGroupTypes returns the AssetGroupTypes field value
func (o *CreateAssetGroupBody) GetAssetGroupTypes() []AssetGroupType {
	if o == nil {
		var ret []AssetGroupType
		return ret
	}

	return o.AssetGroupTypes
}

// GetAssetGroupTypesOk returns a tuple with the AssetGroupTypes field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGroupBody) GetAssetGroupTypesOk() ([]AssetGroupType, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetGroupTypes, true
}

// SetAssetGroupTypes sets field value
func (o *CreateAssetGroupBody) SetAssetGroupTypes(v []AssetGroupType) {
	o.AssetGroupTypes = v
}

func (o CreateAssetGroupBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetGroupBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_group_name"] = o.AssetGroupName
	toSerialize["asset_group_description"] = o.AssetGroupDescription
	toSerialize["asset_group_types"] = o.AssetGroupTypes
	return toSerialize, nil
}

func (o *CreateAssetGroupBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_group_name",
		"asset_group_description",
		"asset_group_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetGroupBody := _CreateAssetGroupBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAssetGroupBody)

	if err != nil {
		return err
	}

	*o = CreateAssetGroupBody(varCreateAssetGroupBody)

	return err
}

type NullableCreateAssetGroupBody struct {
	value *CreateAssetGroupBody
	isSet bool
}

func (v NullableCreateAssetGroupBody) Get() *CreateAssetGroupBody {
	return v.value
}

func (v *NullableCreateAssetGroupBody) Set(val *CreateAssetGroupBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetGroupBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetGroupBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetGroupBody(val *CreateAssetGroupBody) *NullableCreateAssetGroupBody {
	return &NullableCreateAssetGroupBody{value: val, isSet: true}
}

func (v NullableCreateAssetGroupBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetGroupBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


