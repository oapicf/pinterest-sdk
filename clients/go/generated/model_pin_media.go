/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PinMedia type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinMedia{}

// PinMedia Pin media objects.
type PinMedia struct {
	MediaType *string `json:"media_type,omitempty"`
}

// NewPinMedia instantiates a new PinMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinMedia() *PinMedia {
	this := PinMedia{}
	return &this
}

// NewPinMediaWithDefaults instantiates a new PinMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinMediaWithDefaults() *PinMedia {
	this := PinMedia{}
	return &this
}

// GetMediaType returns the MediaType field value if set, zero value otherwise.
func (o *PinMedia) GetMediaType() string {
	if o == nil || IsNil(o.MediaType) {
		var ret string
		return ret
	}
	return *o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinMedia) GetMediaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MediaType) {
		return nil, false
	}
	return o.MediaType, true
}

// HasMediaType returns a boolean if a field has been set.
func (o *PinMedia) HasMediaType() bool {
	if o != nil && !IsNil(o.MediaType) {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given string and assigns it to the MediaType field.
func (o *PinMedia) SetMediaType(v string) {
	o.MediaType = &v
}

func (o PinMedia) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinMedia) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MediaType) {
		toSerialize["media_type"] = o.MediaType
	}
	return toSerialize, nil
}

type NullablePinMedia struct {
	value *PinMedia
	isSet bool
}

func (v NullablePinMedia) Get() *PinMedia {
	return v.value
}

func (v *NullablePinMedia) Set(val *PinMedia) {
	v.value = val
	v.isSet = true
}

func (v NullablePinMedia) IsSet() bool {
	return v.isSet
}

func (v *NullablePinMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinMedia(val *PinMedia) *NullablePinMedia {
	return &NullablePinMedia{value: val, isSet: true}
}

func (v NullablePinMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


