/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CatalogsHotelBatchItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsHotelBatchItem{}

// CatalogsHotelBatchItem Hotel batch item
type CatalogsHotelBatchItem struct {
	CatalogsCreateHotelItem *CatalogsCreateHotelItem
	CatalogsDeleteHotelItem *CatalogsDeleteHotelItem
	CatalogsUpdateHotelItem *CatalogsUpdateHotelItem
	CatalogsUpsertHotelItem *CatalogsUpsertHotelItem
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CatalogsHotelBatchItem) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CREATE'
	if jsonDict["operation"] == "CREATE" {
		// try to unmarshal JSON data into CatalogsCreateHotelItem
		err = json.Unmarshal(data, &dst.CatalogsCreateHotelItem);
		if err == nil {
			jsonCatalogsCreateHotelItem, _ := json.Marshal(dst.CatalogsCreateHotelItem)
			if string(jsonCatalogsCreateHotelItem) == "{}" { // empty struct
				dst.CatalogsCreateHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsCreateHotelItem, return on the first match
			}
		} else {
			dst.CatalogsCreateHotelItem = nil
		}
	}

	// check if the discriminator value is 'DELETE'
	if jsonDict["operation"] == "DELETE" {
		// try to unmarshal JSON data into CatalogsDeleteHotelItem
		err = json.Unmarshal(data, &dst.CatalogsDeleteHotelItem);
		if err == nil {
			jsonCatalogsDeleteHotelItem, _ := json.Marshal(dst.CatalogsDeleteHotelItem)
			if string(jsonCatalogsDeleteHotelItem) == "{}" { // empty struct
				dst.CatalogsDeleteHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsDeleteHotelItem, return on the first match
			}
		} else {
			dst.CatalogsDeleteHotelItem = nil
		}
	}

	// check if the discriminator value is 'UPDATE'
	if jsonDict["operation"] == "UPDATE" {
		// try to unmarshal JSON data into CatalogsUpdateHotelItem
		err = json.Unmarshal(data, &dst.CatalogsUpdateHotelItem);
		if err == nil {
			jsonCatalogsUpdateHotelItem, _ := json.Marshal(dst.CatalogsUpdateHotelItem)
			if string(jsonCatalogsUpdateHotelItem) == "{}" { // empty struct
				dst.CatalogsUpdateHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpdateHotelItem, return on the first match
			}
		} else {
			dst.CatalogsUpdateHotelItem = nil
		}
	}

	// check if the discriminator value is 'UPSERT'
	if jsonDict["operation"] == "UPSERT" {
		// try to unmarshal JSON data into CatalogsUpsertHotelItem
		err = json.Unmarshal(data, &dst.CatalogsUpsertHotelItem);
		if err == nil {
			jsonCatalogsUpsertHotelItem, _ := json.Marshal(dst.CatalogsUpsertHotelItem)
			if string(jsonCatalogsUpsertHotelItem) == "{}" { // empty struct
				dst.CatalogsUpsertHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpsertHotelItem, return on the first match
			}
		} else {
			dst.CatalogsUpsertHotelItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsCreateHotelItem'
	if jsonDict["operation"] == "CatalogsCreateHotelItem" {
		// try to unmarshal JSON data into CatalogsCreateHotelItem
		err = json.Unmarshal(data, &dst.CatalogsCreateHotelItem);
		if err == nil {
			jsonCatalogsCreateHotelItem, _ := json.Marshal(dst.CatalogsCreateHotelItem)
			if string(jsonCatalogsCreateHotelItem) == "{}" { // empty struct
				dst.CatalogsCreateHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsCreateHotelItem, return on the first match
			}
		} else {
			dst.CatalogsCreateHotelItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsDeleteHotelItem'
	if jsonDict["operation"] == "CatalogsDeleteHotelItem" {
		// try to unmarshal JSON data into CatalogsDeleteHotelItem
		err = json.Unmarshal(data, &dst.CatalogsDeleteHotelItem);
		if err == nil {
			jsonCatalogsDeleteHotelItem, _ := json.Marshal(dst.CatalogsDeleteHotelItem)
			if string(jsonCatalogsDeleteHotelItem) == "{}" { // empty struct
				dst.CatalogsDeleteHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsDeleteHotelItem, return on the first match
			}
		} else {
			dst.CatalogsDeleteHotelItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsUpdateHotelItem'
	if jsonDict["operation"] == "CatalogsUpdateHotelItem" {
		// try to unmarshal JSON data into CatalogsUpdateHotelItem
		err = json.Unmarshal(data, &dst.CatalogsUpdateHotelItem);
		if err == nil {
			jsonCatalogsUpdateHotelItem, _ := json.Marshal(dst.CatalogsUpdateHotelItem)
			if string(jsonCatalogsUpdateHotelItem) == "{}" { // empty struct
				dst.CatalogsUpdateHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpdateHotelItem, return on the first match
			}
		} else {
			dst.CatalogsUpdateHotelItem = nil
		}
	}

	// check if the discriminator value is 'CatalogsUpsertHotelItem'
	if jsonDict["operation"] == "CatalogsUpsertHotelItem" {
		// try to unmarshal JSON data into CatalogsUpsertHotelItem
		err = json.Unmarshal(data, &dst.CatalogsUpsertHotelItem);
		if err == nil {
			jsonCatalogsUpsertHotelItem, _ := json.Marshal(dst.CatalogsUpsertHotelItem)
			if string(jsonCatalogsUpsertHotelItem) == "{}" { // empty struct
				dst.CatalogsUpsertHotelItem = nil
			} else {
				return nil // data stored in dst.CatalogsUpsertHotelItem, return on the first match
			}
		} else {
			dst.CatalogsUpsertHotelItem = nil
		}
	}

	// try to unmarshal JSON data into CatalogsCreateHotelItem
	err = json.Unmarshal(data, &dst.CatalogsCreateHotelItem);
	if err == nil {
		jsonCatalogsCreateHotelItem, _ := json.Marshal(dst.CatalogsCreateHotelItem)
		if string(jsonCatalogsCreateHotelItem) == "{}" { // empty struct
			dst.CatalogsCreateHotelItem = nil
		} else {
			return nil // data stored in dst.CatalogsCreateHotelItem, return on the first match
		}
	} else {
		dst.CatalogsCreateHotelItem = nil
	}

	// try to unmarshal JSON data into CatalogsDeleteHotelItem
	err = json.Unmarshal(data, &dst.CatalogsDeleteHotelItem);
	if err == nil {
		jsonCatalogsDeleteHotelItem, _ := json.Marshal(dst.CatalogsDeleteHotelItem)
		if string(jsonCatalogsDeleteHotelItem) == "{}" { // empty struct
			dst.CatalogsDeleteHotelItem = nil
		} else {
			return nil // data stored in dst.CatalogsDeleteHotelItem, return on the first match
		}
	} else {
		dst.CatalogsDeleteHotelItem = nil
	}

	// try to unmarshal JSON data into CatalogsUpdateHotelItem
	err = json.Unmarshal(data, &dst.CatalogsUpdateHotelItem);
	if err == nil {
		jsonCatalogsUpdateHotelItem, _ := json.Marshal(dst.CatalogsUpdateHotelItem)
		if string(jsonCatalogsUpdateHotelItem) == "{}" { // empty struct
			dst.CatalogsUpdateHotelItem = nil
		} else {
			return nil // data stored in dst.CatalogsUpdateHotelItem, return on the first match
		}
	} else {
		dst.CatalogsUpdateHotelItem = nil
	}

	// try to unmarshal JSON data into CatalogsUpsertHotelItem
	err = json.Unmarshal(data, &dst.CatalogsUpsertHotelItem);
	if err == nil {
		jsonCatalogsUpsertHotelItem, _ := json.Marshal(dst.CatalogsUpsertHotelItem)
		if string(jsonCatalogsUpsertHotelItem) == "{}" { // empty struct
			dst.CatalogsUpsertHotelItem = nil
		} else {
			return nil // data stored in dst.CatalogsUpsertHotelItem, return on the first match
		}
	} else {
		dst.CatalogsUpsertHotelItem = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CatalogsHotelBatchItem)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CatalogsHotelBatchItem) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreateHotelItem != nil {
		return json.Marshal(&src.CatalogsCreateHotelItem)
	}

	if src.CatalogsDeleteHotelItem != nil {
		return json.Marshal(&src.CatalogsDeleteHotelItem)
	}

	if src.CatalogsUpdateHotelItem != nil {
		return json.Marshal(&src.CatalogsUpdateHotelItem)
	}

	if src.CatalogsUpsertHotelItem != nil {
		return json.Marshal(&src.CatalogsUpsertHotelItem)
	}

	return nil, nil // no data in anyOf schemas
}

func (src CatalogsHotelBatchItem) ToMap() (map[string]interface{}, error) {
	if src.CatalogsCreateHotelItem != nil {
		return src.CatalogsCreateHotelItem.ToMap()
	}

	if src.CatalogsDeleteHotelItem != nil {
		return src.CatalogsDeleteHotelItem.ToMap()
	}

	if src.CatalogsUpdateHotelItem != nil {
		return src.CatalogsUpdateHotelItem.ToMap()
	}

	if src.CatalogsUpsertHotelItem != nil {
		return src.CatalogsUpsertHotelItem.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableCatalogsHotelBatchItem struct {
	value *CatalogsHotelBatchItem
	isSet bool
}

func (v NullableCatalogsHotelBatchItem) Get() *CatalogsHotelBatchItem {
	return v.value
}

func (v *NullableCatalogsHotelBatchItem) Set(val *CatalogsHotelBatchItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsHotelBatchItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsHotelBatchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsHotelBatchItem(val *CatalogsHotelBatchItem) *NullableCatalogsHotelBatchItem {
	return &NullableCatalogsHotelBatchItem{value: val, isSet: true}
}

func (v NullableCatalogsHotelBatchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsHotelBatchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


