/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BusinessRoleCheckMode Specifies if the partner is internal or external.
type BusinessRoleCheckMode string

// List of BusinessRoleCheckMode
const (
	INTERNAL BusinessRoleCheckMode = "INTERNAL"
	EXTERNAL BusinessRoleCheckMode = "EXTERNAL"
)

// All allowed values of BusinessRoleCheckMode enum
var AllowedBusinessRoleCheckModeEnumValues = []BusinessRoleCheckMode{
	"INTERNAL",
	"EXTERNAL",
}

func (v *BusinessRoleCheckMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BusinessRoleCheckMode(value)
	for _, existing := range AllowedBusinessRoleCheckModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BusinessRoleCheckMode", value)
}

// NewBusinessRoleCheckModeFromValue returns a pointer to a valid BusinessRoleCheckMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBusinessRoleCheckModeFromValue(v string) (*BusinessRoleCheckMode, error) {
	ev := BusinessRoleCheckMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BusinessRoleCheckMode: valid values are %v", v, AllowedBusinessRoleCheckModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BusinessRoleCheckMode) IsValid() bool {
	for _, existing := range AllowedBusinessRoleCheckModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BusinessRoleCheckMode value
func (v BusinessRoleCheckMode) Ptr() *BusinessRoleCheckMode {
	return &v
}

type NullableBusinessRoleCheckMode struct {
	value *BusinessRoleCheckMode
	isSet bool
}

func (v NullableBusinessRoleCheckMode) Get() *BusinessRoleCheckMode {
	return v.value
}

func (v *NullableBusinessRoleCheckMode) Set(val *BusinessRoleCheckMode) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessRoleCheckMode) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessRoleCheckMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessRoleCheckMode(val *BusinessRoleCheckMode) *NullableBusinessRoleCheckMode {
	return &NullableBusinessRoleCheckMode{value: val, isSet: true}
}

func (v NullableBusinessRoleCheckMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessRoleCheckMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

