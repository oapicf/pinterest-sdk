/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ItemProcessingStatus The status of the item processing record
type ItemProcessingStatus string

// List of ItemProcessingStatus
const (
	SUCCESS ItemProcessingStatus = "SUCCESS"
	FAILURE ItemProcessingStatus = "FAILURE"
	PROCESSING ItemProcessingStatus = "PROCESSING"
)

// All allowed values of ItemProcessingStatus enum
var AllowedItemProcessingStatusEnumValues = []ItemProcessingStatus{
	"SUCCESS",
	"FAILURE",
	"PROCESSING",
}

func (v *ItemProcessingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ItemProcessingStatus(value)
	for _, existing := range AllowedItemProcessingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ItemProcessingStatus", value)
}

// NewItemProcessingStatusFromValue returns a pointer to a valid ItemProcessingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewItemProcessingStatusFromValue(v string) (*ItemProcessingStatus, error) {
	ev := ItemProcessingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ItemProcessingStatus: valid values are %v", v, AllowedItemProcessingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ItemProcessingStatus) IsValid() bool {
	for _, existing := range AllowedItemProcessingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemProcessingStatus value
func (v ItemProcessingStatus) Ptr() *ItemProcessingStatus {
	return &v
}

type NullableItemProcessingStatus struct {
	value *ItemProcessingStatus
	isSet bool
}

func (v NullableItemProcessingStatus) Get() *ItemProcessingStatus {
	return v.value
}

func (v *NullableItemProcessingStatus) Set(val *ItemProcessingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableItemProcessingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableItemProcessingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemProcessingStatus(val *ItemProcessingStatus) *NullableItemProcessingStatus {
	return &NullableItemProcessingStatus{value: val, isSet: true}
}

func (v NullableItemProcessingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemProcessingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

