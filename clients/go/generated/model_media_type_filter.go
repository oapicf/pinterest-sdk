/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaTypeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaTypeFilter{}

// MediaTypeFilter struct for MediaTypeFilter
type MediaTypeFilter struct {
	MEDIA_TYPE CatalogsProductGroupMultipleMediaTypesCriteria `json:"MEDIA_TYPE"`
}

type _MediaTypeFilter MediaTypeFilter

// NewMediaTypeFilter instantiates a new MediaTypeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaTypeFilter(mEDIATYPE CatalogsProductGroupMultipleMediaTypesCriteria) *MediaTypeFilter {
	this := MediaTypeFilter{}
	this.MEDIA_TYPE = mEDIATYPE
	return &this
}

// NewMediaTypeFilterWithDefaults instantiates a new MediaTypeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaTypeFilterWithDefaults() *MediaTypeFilter {
	this := MediaTypeFilter{}
	return &this
}

// GetMEDIA_TYPE returns the MEDIA_TYPE field value
func (o *MediaTypeFilter) GetMEDIA_TYPE() CatalogsProductGroupMultipleMediaTypesCriteria {
	if o == nil {
		var ret CatalogsProductGroupMultipleMediaTypesCriteria
		return ret
	}

	return o.MEDIA_TYPE
}

// GetMEDIA_TYPEOk returns a tuple with the MEDIA_TYPE field value
// and a boolean to check if the value has been set.
func (o *MediaTypeFilter) GetMEDIA_TYPEOk() (CatalogsProductGroupMultipleMediaTypesCriteria, bool) {
	if o == nil {
		return CatalogsProductGroupMultipleMediaTypesCriteria{}, false
	}
	return o.MEDIA_TYPE, true
}

// SetMEDIA_TYPE sets field value
func (o *MediaTypeFilter) SetMEDIA_TYPE(v CatalogsProductGroupMultipleMediaTypesCriteria) {
	o.MEDIA_TYPE = v
}

func (o MediaTypeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaTypeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["MEDIA_TYPE"] = o.MEDIA_TYPE
	return toSerialize, nil
}

func (o *MediaTypeFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"MEDIA_TYPE",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaTypeFilter := _MediaTypeFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaTypeFilter)

	if err != nil {
		return err
	}

	*o = MediaTypeFilter(varMediaTypeFilter)

	return err
}

type NullableMediaTypeFilter struct {
	value *MediaTypeFilter
	isSet bool
}

func (v NullableMediaTypeFilter) Get() *MediaTypeFilter {
	return v.value
}

func (v *NullableMediaTypeFilter) Set(val *MediaTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaTypeFilter(val *MediaTypeFilter) *NullableMediaTypeFilter {
	return &NullableMediaTypeFilter{value: val, isSet: true}
}

func (v NullableMediaTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


