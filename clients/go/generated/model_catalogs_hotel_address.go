/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CatalogsHotelAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsHotelAddress{}

// CatalogsHotelAddress struct for CatalogsHotelAddress
type CatalogsHotelAddress struct {
	// Primary street address of hotel.
	Addr1 *string `json:"addr1,omitempty"`
	// City where the hotel is located.
	City *string `json:"city,omitempty"`
	// State, county, province, where the hotel is located.
	Region *string `json:"region,omitempty"`
	// Country where the hotel is located.
	Country *string `json:"country,omitempty"`
	// Required for countries with a postal code system. Postal or zip code of the hotel.
	PostalCode *string `json:"postal_code,omitempty"`
}

// NewCatalogsHotelAddress instantiates a new CatalogsHotelAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogsHotelAddress() *CatalogsHotelAddress {
	this := CatalogsHotelAddress{}
	return &this
}

// NewCatalogsHotelAddressWithDefaults instantiates a new CatalogsHotelAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsHotelAddressWithDefaults() *CatalogsHotelAddress {
	this := CatalogsHotelAddress{}
	return &this
}

// GetAddr1 returns the Addr1 field value if set, zero value otherwise.
func (o *CatalogsHotelAddress) GetAddr1() string {
	if o == nil || IsNil(o.Addr1) {
		var ret string
		return ret
	}
	return *o.Addr1
}

// GetAddr1Ok returns a tuple with the Addr1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsHotelAddress) GetAddr1Ok() (*string, bool) {
	if o == nil || IsNil(o.Addr1) {
		return nil, false
	}
	return o.Addr1, true
}

// HasAddr1 returns a boolean if a field has been set.
func (o *CatalogsHotelAddress) HasAddr1() bool {
	if o != nil && !IsNil(o.Addr1) {
		return true
	}

	return false
}

// SetAddr1 gets a reference to the given string and assigns it to the Addr1 field.
func (o *CatalogsHotelAddress) SetAddr1(v string) {
	o.Addr1 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CatalogsHotelAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsHotelAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CatalogsHotelAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CatalogsHotelAddress) SetCity(v string) {
	o.City = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CatalogsHotelAddress) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsHotelAddress) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CatalogsHotelAddress) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CatalogsHotelAddress) SetRegion(v string) {
	o.Region = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CatalogsHotelAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsHotelAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CatalogsHotelAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CatalogsHotelAddress) SetCountry(v string) {
	o.Country = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *CatalogsHotelAddress) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogsHotelAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *CatalogsHotelAddress) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *CatalogsHotelAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

func (o CatalogsHotelAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsHotelAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addr1) {
		toSerialize["addr1"] = o.Addr1
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	return toSerialize, nil
}

type NullableCatalogsHotelAddress struct {
	value *CatalogsHotelAddress
	isSet bool
}

func (v NullableCatalogsHotelAddress) Get() *CatalogsHotelAddress {
	return v.value
}

func (v *NullableCatalogsHotelAddress) Set(val *CatalogsHotelAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsHotelAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsHotelAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsHotelAddress(val *CatalogsHotelAddress) *NullableCatalogsHotelAddress {
	return &NullableCatalogsHotelAddress{value: val, isSet: true}
}

func (v NullableCatalogsHotelAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsHotelAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


