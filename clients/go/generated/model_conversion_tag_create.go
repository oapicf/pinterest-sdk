/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConversionTagCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversionTagCreate{}

// ConversionTagCreate struct for ConversionTagCreate
type ConversionTagCreate struct {
	// Conversion tag name.
	Name string `json:"name"`
	// Whether Automatic Enhanced Match email is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemEnabled NullableBool `json:"aem_enabled,omitempty"`
	// Metadata ingestion frequency.
	MdFrequency NullableFloat32 `json:"md_frequency,omitempty"`
	// Whether Automatic Enhanced Match name is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemFnlnEnabled NullableBool `json:"aem_fnln_enabled,omitempty"`
	// Whether Automatic Enhanced Match phone is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemPhEnabled NullableBool `json:"aem_ph_enabled,omitempty"`
	// Whether Automatic Enhanced Match gender is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemGeEnabled NullableBool `json:"aem_ge_enabled,omitempty"`
	// Whether Automatic Enhanced Match birthdate is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemDbEnabled NullableBool `json:"aem_db_enabled,omitempty"`
	// Whether Automatic Enhanced Match location is enabled. See <a href=\"https://help.pinterest.com/en/business/article/enhanced-match\" target=\"_blank\">Enhanced match</a> for more information.
	AemLocEnabled NullableBool `json:"aem_loc_enabled,omitempty"`
}

type _ConversionTagCreate ConversionTagCreate

// NewConversionTagCreate instantiates a new ConversionTagCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversionTagCreate(name string) *ConversionTagCreate {
	this := ConversionTagCreate{}
	var aemEnabled bool = false
	this.AemEnabled = *NewNullableBool(&aemEnabled)
	var mdFrequency float32 = 1
	this.MdFrequency = *NewNullableFloat32(&mdFrequency)
	var aemFnlnEnabled bool = false
	this.AemFnlnEnabled = *NewNullableBool(&aemFnlnEnabled)
	var aemPhEnabled bool = false
	this.AemPhEnabled = *NewNullableBool(&aemPhEnabled)
	var aemGeEnabled bool = false
	this.AemGeEnabled = *NewNullableBool(&aemGeEnabled)
	var aemDbEnabled bool = false
	this.AemDbEnabled = *NewNullableBool(&aemDbEnabled)
	var aemLocEnabled bool = false
	this.AemLocEnabled = *NewNullableBool(&aemLocEnabled)
	return &this
}

// NewConversionTagCreateWithDefaults instantiates a new ConversionTagCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversionTagCreateWithDefaults() *ConversionTagCreate {
	this := ConversionTagCreate{}
	var aemEnabled bool = false
	this.AemEnabled = *NewNullableBool(&aemEnabled)
	var mdFrequency float32 = 1
	this.MdFrequency = *NewNullableFloat32(&mdFrequency)
	var aemFnlnEnabled bool = false
	this.AemFnlnEnabled = *NewNullableBool(&aemFnlnEnabled)
	var aemPhEnabled bool = false
	this.AemPhEnabled = *NewNullableBool(&aemPhEnabled)
	var aemGeEnabled bool = false
	this.AemGeEnabled = *NewNullableBool(&aemGeEnabled)
	var aemDbEnabled bool = false
	this.AemDbEnabled = *NewNullableBool(&aemDbEnabled)
	var aemLocEnabled bool = false
	this.AemLocEnabled = *NewNullableBool(&aemLocEnabled)
	return &this
}

// GetName returns the Name field value
func (o *ConversionTagCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConversionTagCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConversionTagCreate) SetName(v string) {
	o.Name = v
}

// GetAemEnabled returns the AemEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemEnabled() bool {
	if o == nil || IsNil(o.AemEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemEnabled.Get()
}

// GetAemEnabledOk returns a tuple with the AemEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemEnabled.Get(), o.AemEnabled.IsSet()
}

// HasAemEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemEnabled() bool {
	if o != nil && o.AemEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemEnabled gets a reference to the given NullableBool and assigns it to the AemEnabled field.
func (o *ConversionTagCreate) SetAemEnabled(v bool) {
	o.AemEnabled.Set(&v)
}
// SetAemEnabledNil sets the value for AemEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemEnabledNil() {
	o.AemEnabled.Set(nil)
}

// UnsetAemEnabled ensures that no value is present for AemEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemEnabled() {
	o.AemEnabled.Unset()
}

// GetMdFrequency returns the MdFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetMdFrequency() float32 {
	if o == nil || IsNil(o.MdFrequency.Get()) {
		var ret float32
		return ret
	}
	return *o.MdFrequency.Get()
}

// GetMdFrequencyOk returns a tuple with the MdFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetMdFrequencyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MdFrequency.Get(), o.MdFrequency.IsSet()
}

// HasMdFrequency returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasMdFrequency() bool {
	if o != nil && o.MdFrequency.IsSet() {
		return true
	}

	return false
}

// SetMdFrequency gets a reference to the given NullableFloat32 and assigns it to the MdFrequency field.
func (o *ConversionTagCreate) SetMdFrequency(v float32) {
	o.MdFrequency.Set(&v)
}
// SetMdFrequencyNil sets the value for MdFrequency to be an explicit nil
func (o *ConversionTagCreate) SetMdFrequencyNil() {
	o.MdFrequency.Set(nil)
}

// UnsetMdFrequency ensures that no value is present for MdFrequency, not even an explicit nil
func (o *ConversionTagCreate) UnsetMdFrequency() {
	o.MdFrequency.Unset()
}

// GetAemFnlnEnabled returns the AemFnlnEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemFnlnEnabled() bool {
	if o == nil || IsNil(o.AemFnlnEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemFnlnEnabled.Get()
}

// GetAemFnlnEnabledOk returns a tuple with the AemFnlnEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemFnlnEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemFnlnEnabled.Get(), o.AemFnlnEnabled.IsSet()
}

// HasAemFnlnEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemFnlnEnabled() bool {
	if o != nil && o.AemFnlnEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemFnlnEnabled gets a reference to the given NullableBool and assigns it to the AemFnlnEnabled field.
func (o *ConversionTagCreate) SetAemFnlnEnabled(v bool) {
	o.AemFnlnEnabled.Set(&v)
}
// SetAemFnlnEnabledNil sets the value for AemFnlnEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemFnlnEnabledNil() {
	o.AemFnlnEnabled.Set(nil)
}

// UnsetAemFnlnEnabled ensures that no value is present for AemFnlnEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemFnlnEnabled() {
	o.AemFnlnEnabled.Unset()
}

// GetAemPhEnabled returns the AemPhEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemPhEnabled() bool {
	if o == nil || IsNil(o.AemPhEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemPhEnabled.Get()
}

// GetAemPhEnabledOk returns a tuple with the AemPhEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemPhEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemPhEnabled.Get(), o.AemPhEnabled.IsSet()
}

// HasAemPhEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemPhEnabled() bool {
	if o != nil && o.AemPhEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemPhEnabled gets a reference to the given NullableBool and assigns it to the AemPhEnabled field.
func (o *ConversionTagCreate) SetAemPhEnabled(v bool) {
	o.AemPhEnabled.Set(&v)
}
// SetAemPhEnabledNil sets the value for AemPhEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemPhEnabledNil() {
	o.AemPhEnabled.Set(nil)
}

// UnsetAemPhEnabled ensures that no value is present for AemPhEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemPhEnabled() {
	o.AemPhEnabled.Unset()
}

// GetAemGeEnabled returns the AemGeEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemGeEnabled() bool {
	if o == nil || IsNil(o.AemGeEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemGeEnabled.Get()
}

// GetAemGeEnabledOk returns a tuple with the AemGeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemGeEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemGeEnabled.Get(), o.AemGeEnabled.IsSet()
}

// HasAemGeEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemGeEnabled() bool {
	if o != nil && o.AemGeEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemGeEnabled gets a reference to the given NullableBool and assigns it to the AemGeEnabled field.
func (o *ConversionTagCreate) SetAemGeEnabled(v bool) {
	o.AemGeEnabled.Set(&v)
}
// SetAemGeEnabledNil sets the value for AemGeEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemGeEnabledNil() {
	o.AemGeEnabled.Set(nil)
}

// UnsetAemGeEnabled ensures that no value is present for AemGeEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemGeEnabled() {
	o.AemGeEnabled.Unset()
}

// GetAemDbEnabled returns the AemDbEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemDbEnabled() bool {
	if o == nil || IsNil(o.AemDbEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemDbEnabled.Get()
}

// GetAemDbEnabledOk returns a tuple with the AemDbEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemDbEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemDbEnabled.Get(), o.AemDbEnabled.IsSet()
}

// HasAemDbEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemDbEnabled() bool {
	if o != nil && o.AemDbEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemDbEnabled gets a reference to the given NullableBool and assigns it to the AemDbEnabled field.
func (o *ConversionTagCreate) SetAemDbEnabled(v bool) {
	o.AemDbEnabled.Set(&v)
}
// SetAemDbEnabledNil sets the value for AemDbEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemDbEnabledNil() {
	o.AemDbEnabled.Set(nil)
}

// UnsetAemDbEnabled ensures that no value is present for AemDbEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemDbEnabled() {
	o.AemDbEnabled.Unset()
}

// GetAemLocEnabled returns the AemLocEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversionTagCreate) GetAemLocEnabled() bool {
	if o == nil || IsNil(o.AemLocEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AemLocEnabled.Get()
}

// GetAemLocEnabledOk returns a tuple with the AemLocEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversionTagCreate) GetAemLocEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AemLocEnabled.Get(), o.AemLocEnabled.IsSet()
}

// HasAemLocEnabled returns a boolean if a field has been set.
func (o *ConversionTagCreate) HasAemLocEnabled() bool {
	if o != nil && o.AemLocEnabled.IsSet() {
		return true
	}

	return false
}

// SetAemLocEnabled gets a reference to the given NullableBool and assigns it to the AemLocEnabled field.
func (o *ConversionTagCreate) SetAemLocEnabled(v bool) {
	o.AemLocEnabled.Set(&v)
}
// SetAemLocEnabledNil sets the value for AemLocEnabled to be an explicit nil
func (o *ConversionTagCreate) SetAemLocEnabledNil() {
	o.AemLocEnabled.Set(nil)
}

// UnsetAemLocEnabled ensures that no value is present for AemLocEnabled, not even an explicit nil
func (o *ConversionTagCreate) UnsetAemLocEnabled() {
	o.AemLocEnabled.Unset()
}

func (o ConversionTagCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversionTagCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.AemEnabled.IsSet() {
		toSerialize["aem_enabled"] = o.AemEnabled.Get()
	}
	if o.MdFrequency.IsSet() {
		toSerialize["md_frequency"] = o.MdFrequency.Get()
	}
	if o.AemFnlnEnabled.IsSet() {
		toSerialize["aem_fnln_enabled"] = o.AemFnlnEnabled.Get()
	}
	if o.AemPhEnabled.IsSet() {
		toSerialize["aem_ph_enabled"] = o.AemPhEnabled.Get()
	}
	if o.AemGeEnabled.IsSet() {
		toSerialize["aem_ge_enabled"] = o.AemGeEnabled.Get()
	}
	if o.AemDbEnabled.IsSet() {
		toSerialize["aem_db_enabled"] = o.AemDbEnabled.Get()
	}
	if o.AemLocEnabled.IsSet() {
		toSerialize["aem_loc_enabled"] = o.AemLocEnabled.Get()
	}
	return toSerialize, nil
}

func (o *ConversionTagCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversionTagCreate := _ConversionTagCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversionTagCreate)

	if err != nil {
		return err
	}

	*o = ConversionTagCreate(varConversionTagCreate)

	return err
}

type NullableConversionTagCreate struct {
	value *ConversionTagCreate
	isSet bool
}

func (v NullableConversionTagCreate) Get() *ConversionTagCreate {
	return v.value
}

func (v *NullableConversionTagCreate) Set(val *ConversionTagCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableConversionTagCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableConversionTagCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversionTagCreate(val *ConversionTagCreate) *NullableConversionTagCreate {
	return &NullableConversionTagCreate{value: val, isSet: true}
}

func (v NullableConversionTagCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversionTagCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


