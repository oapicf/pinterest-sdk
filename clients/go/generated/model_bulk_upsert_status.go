/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BulkUpsertStatus the model 'BulkUpsertStatus'
type BulkUpsertStatus string

// List of BulkUpsertStatus
const (
	RUNNING BulkUpsertStatus = "RUNNING"
	SUCCEEDED BulkUpsertStatus = "SUCCEEDED"
	FAILED BulkUpsertStatus = "FAILED"
)

// All allowed values of BulkUpsertStatus enum
var AllowedBulkUpsertStatusEnumValues = []BulkUpsertStatus{
	"RUNNING",
	"SUCCEEDED",
	"FAILED",
}

func (v *BulkUpsertStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkUpsertStatus(value)
	for _, existing := range AllowedBulkUpsertStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkUpsertStatus", value)
}

// NewBulkUpsertStatusFromValue returns a pointer to a valid BulkUpsertStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkUpsertStatusFromValue(v string) (*BulkUpsertStatus, error) {
	ev := BulkUpsertStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkUpsertStatus: valid values are %v", v, AllowedBulkUpsertStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkUpsertStatus) IsValid() bool {
	for _, existing := range AllowedBulkUpsertStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkUpsertStatus value
func (v BulkUpsertStatus) Ptr() *BulkUpsertStatus {
	return &v
}

type NullableBulkUpsertStatus struct {
	value *BulkUpsertStatus
	isSet bool
}

func (v NullableBulkUpsertStatus) Get() *BulkUpsertStatus {
	return v.value
}

func (v *NullableBulkUpsertStatus) Set(val *BulkUpsertStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkUpsertStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkUpsertStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkUpsertStatus(val *BulkUpsertStatus) *NullableBulkUpsertStatus {
	return &NullableBulkUpsertStatus{value: val, isSet: true}
}

func (v NullableBulkUpsertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkUpsertStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

