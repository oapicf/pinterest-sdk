/*
Pinterest REST API

Pinterest's REST API

API version: 5.14.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CatalogsVerticalProductGroup - struct for CatalogsVerticalProductGroup
type CatalogsVerticalProductGroup struct {
	CatalogsCreativeAssetsProductGroup *CatalogsCreativeAssetsProductGroup
	CatalogsHotelProductGroup *CatalogsHotelProductGroup
	CatalogsRetailProductGroup *CatalogsRetailProductGroup
}

// CatalogsCreativeAssetsProductGroupAsCatalogsVerticalProductGroup is a convenience function that returns CatalogsCreativeAssetsProductGroup wrapped in CatalogsVerticalProductGroup
func CatalogsCreativeAssetsProductGroupAsCatalogsVerticalProductGroup(v *CatalogsCreativeAssetsProductGroup) CatalogsVerticalProductGroup {
	return CatalogsVerticalProductGroup{
		CatalogsCreativeAssetsProductGroup: v,
	}
}

// CatalogsHotelProductGroupAsCatalogsVerticalProductGroup is a convenience function that returns CatalogsHotelProductGroup wrapped in CatalogsVerticalProductGroup
func CatalogsHotelProductGroupAsCatalogsVerticalProductGroup(v *CatalogsHotelProductGroup) CatalogsVerticalProductGroup {
	return CatalogsVerticalProductGroup{
		CatalogsHotelProductGroup: v,
	}
}

// CatalogsRetailProductGroupAsCatalogsVerticalProductGroup is a convenience function that returns CatalogsRetailProductGroup wrapped in CatalogsVerticalProductGroup
func CatalogsRetailProductGroupAsCatalogsVerticalProductGroup(v *CatalogsRetailProductGroup) CatalogsVerticalProductGroup {
	return CatalogsVerticalProductGroup{
		CatalogsRetailProductGroup: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CatalogsVerticalProductGroup) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CatalogsCreativeAssetsProductGroup
	err = newStrictDecoder(data).Decode(&dst.CatalogsCreativeAssetsProductGroup)
	if err == nil {
		jsonCatalogsCreativeAssetsProductGroup, _ := json.Marshal(dst.CatalogsCreativeAssetsProductGroup)
		if string(jsonCatalogsCreativeAssetsProductGroup) == "{}" { // empty struct
			dst.CatalogsCreativeAssetsProductGroup = nil
		} else {
			if err = validator.Validate(dst.CatalogsCreativeAssetsProductGroup); err != nil {
				dst.CatalogsCreativeAssetsProductGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsCreativeAssetsProductGroup = nil
	}

	// try to unmarshal data into CatalogsHotelProductGroup
	err = newStrictDecoder(data).Decode(&dst.CatalogsHotelProductGroup)
	if err == nil {
		jsonCatalogsHotelProductGroup, _ := json.Marshal(dst.CatalogsHotelProductGroup)
		if string(jsonCatalogsHotelProductGroup) == "{}" { // empty struct
			dst.CatalogsHotelProductGroup = nil
		} else {
			if err = validator.Validate(dst.CatalogsHotelProductGroup); err != nil {
				dst.CatalogsHotelProductGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsHotelProductGroup = nil
	}

	// try to unmarshal data into CatalogsRetailProductGroup
	err = newStrictDecoder(data).Decode(&dst.CatalogsRetailProductGroup)
	if err == nil {
		jsonCatalogsRetailProductGroup, _ := json.Marshal(dst.CatalogsRetailProductGroup)
		if string(jsonCatalogsRetailProductGroup) == "{}" { // empty struct
			dst.CatalogsRetailProductGroup = nil
		} else {
			if err = validator.Validate(dst.CatalogsRetailProductGroup); err != nil {
				dst.CatalogsRetailProductGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.CatalogsRetailProductGroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CatalogsCreativeAssetsProductGroup = nil
		dst.CatalogsHotelProductGroup = nil
		dst.CatalogsRetailProductGroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CatalogsVerticalProductGroup)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CatalogsVerticalProductGroup)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CatalogsVerticalProductGroup) MarshalJSON() ([]byte, error) {
	if src.CatalogsCreativeAssetsProductGroup != nil {
		return json.Marshal(&src.CatalogsCreativeAssetsProductGroup)
	}

	if src.CatalogsHotelProductGroup != nil {
		return json.Marshal(&src.CatalogsHotelProductGroup)
	}

	if src.CatalogsRetailProductGroup != nil {
		return json.Marshal(&src.CatalogsRetailProductGroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CatalogsVerticalProductGroup) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CatalogsCreativeAssetsProductGroup != nil {
		return obj.CatalogsCreativeAssetsProductGroup
	}

	if obj.CatalogsHotelProductGroup != nil {
		return obj.CatalogsHotelProductGroup
	}

	if obj.CatalogsRetailProductGroup != nil {
		return obj.CatalogsRetailProductGroup
	}

	// all schemas are nil
	return nil
}

type NullableCatalogsVerticalProductGroup struct {
	value *CatalogsVerticalProductGroup
	isSet bool
}

func (v NullableCatalogsVerticalProductGroup) Get() *CatalogsVerticalProductGroup {
	return v.value
}

func (v *NullableCatalogsVerticalProductGroup) Set(val *CatalogsVerticalProductGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsVerticalProductGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsVerticalProductGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsVerticalProductGroup(val *CatalogsVerticalProductGroup) *NullableCatalogsVerticalProductGroup {
	return &NullableCatalogsVerticalProductGroup{value: val, isSet: true}
}

func (v NullableCatalogsVerticalProductGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsVerticalProductGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


