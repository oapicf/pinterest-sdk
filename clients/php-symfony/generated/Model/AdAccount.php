<?php
/**
 * AdAccount
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdAccount model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AdAccount 
{
        /**
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var AdAccountOwner|null
     * @SerializedName("owner")
     * @Type("OpenAPI\Server\Model\AdAccountOwner")
    */
    #[Assert\Type("OpenAPI\Server\Model\AdAccountOwner")]
    protected ?AdAccountOwner $owner = null;

    /**
     * @var Country|null
     * @SerializedName("country")
    * @Accessor(getter="getSerializedCountry", setter="setDeserializedCountry")
    * @Type("string")
    */
    protected ?Country $country = null;

    /**
     * @var Currency|null
     * @SerializedName("currency")
    * @Accessor(getter="getSerializedCurrency", setter="setDeserializedCurrency")
    * @Type("string")
    */
    protected ?Currency $currency = null;

    /**
     * @var BusinessAccessRole[]|null
     * @SerializedName("permissions")
     * @Accessor(getter="getSerializedPermissions", setter="setDeserializedPermissions")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\BusinessAccessRole"),
    ])]
    protected ?array $permissions = null;

    /**
     * Creation time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("created_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $createdTime = null;

    /**
     * Last update time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("updated_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $updatedTime = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->owner = array_key_exists('owner', $data) ? $data['owner'] : $this->owner;
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->currency = array_key_exists('currency', $data) ? $data['currency'] : $this->currency;
            $this->permissions = array_key_exists('permissions', $data) ? $data['permissions'] : $this->permissions;
            $this->createdTime = array_key_exists('createdTime', $data) ? $data['createdTime'] : $this->createdTime;
            $this->updatedTime = array_key_exists('updatedTime', $data) ? $data['updatedTime'] : $this->updatedTime;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id
    *
    * @return $this
    */
    public function setId(?string $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets owner.
     *
     * @return AdAccountOwner|null
     */
    public function getOwner(): ?AdAccountOwner
    {
        return $this->owner;
    }

    /**
    * Sets owner.
    *
    * @param AdAccountOwner|null $owner
    *
    * @return $this
    */
    public function setOwner(?AdAccountOwner $owner = null): self
    {
        $this->owner = $owner;

        return $this;
    }




    /**
     * Gets country.
     *
     * @return Country|null
     */
    public function getCountry(): ?Country
    {
        return $this->country;
    }

    /**
    * Sets country.
    *
    * @param Country|null $country
    *
    * @return $this
    */
    public function setCountry(?Country $country = null): self
    {
        $this->country = $country;

        return $this;
    }

    /**
    * Gets country for serialization.
    *
    * @return string|null
    */
    public function getSerializedCountry(): string|null
    {
        return !is_null($this->country?->value) ? (string) $this->country->value : null;
    }

    /**
    * Sets country.
    *
    * @param string|Country|null $country
    *
    * @return $this
    */
    public function setDeserializedCountry(string|Country|null $country = null): self
    {
        if (is_string($country)) {
            $country = Country::tryFrom($country);
        }

        $this->country = $country;

        return $this;
    }



    /**
     * Gets currency.
     *
     * @return Currency|null
     */
    public function getCurrency(): ?Currency
    {
        return $this->currency;
    }

    /**
    * Sets currency.
    *
    * @param Currency|null $currency
    *
    * @return $this
    */
    public function setCurrency(?Currency $currency = null): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
    * Gets currency for serialization.
    *
    * @return string|null
    */
    public function getSerializedCurrency(): string|null
    {
        return !is_null($this->currency?->value) ? (string) $this->currency->value : null;
    }

    /**
    * Sets currency.
    *
    * @param string|Currency|null $currency
    *
    * @return $this
    */
    public function setDeserializedCurrency(string|Currency|null $currency = null): self
    {
        if (is_string($currency)) {
            $currency = Currency::tryFrom($currency);
        }

        $this->currency = $currency;

        return $this;
    }



    /**
     * Gets permissions.
     *
     * @return BusinessAccessRole[]|null
     */
    public function getPermissions(): ?array
    {
        return $this->permissions;
    }

    /**
    * Sets permissions.
    *
    * @param BusinessAccessRole[]|null $permissions
    *
    * @return $this
    */
    public function setPermissions(?array $permissions = null): self
    {
        $this->permissions = $permissions;

        return $this;
    }


    /**
    * Gets permissions for serialization.
    *
    * @return array
    */
    public function getSerializedPermissions(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->permissions ?? []
        );
    }

    /**
    * Sets permissions.
    *
    * @param ?array $permissions
    *
    * @return $this
    */
    public function setDeserializedPermissions(?array $permissions = []): self
    {
        $this->permissions = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = BusinessAccessRole::tryFrom($value);
                }

                return $value;
            },
            $permissions ?? []
        );

        return $this;
    }


    /**
     * Gets createdTime.
     *
     * @return int|null
     */
    public function getCreatedTime(): ?int
    {
        return $this->createdTime;
    }

    /**
    * Sets createdTime.
    *
    * @param int|null $createdTime  Creation time. Unix timestamp in seconds.
    *
    * @return $this
    */
    public function setCreatedTime(?int $createdTime = null): self
    {
        $this->createdTime = $createdTime;

        return $this;
    }




    /**
     * Gets updatedTime.
     *
     * @return int|null
     */
    public function getUpdatedTime(): ?int
    {
        return $this->updatedTime;
    }

    /**
    * Sets updatedTime.
    *
    * @param int|null $updatedTime  Last update time. Unix timestamp in seconds.
    *
    * @return $this
    */
    public function setUpdatedTime(?int $updatedTime = null): self
    {
        $this->updatedTime = $updatedTime;

        return $this;
    }



}


