<?php
/**
 * AudienceRule
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AudienceRule model.
 *
 * JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AudienceRule 
{
        /**
     * Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;.
     *
     * @var string|null
     * @SerializedName("country")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $country = null;

    /**
     * Customer list ID. For CUSTOMER_LIST &#x60;audience_type&#x60;.
     *
     * @var string|null
     * @SerializedName("customer_list_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $customerListId = null;

    /**
     * The audience account&#39;s verified domain. **Required** for ENGAGEMENT &#x60;audience_type&#x60;.
     *
     * @var string[]|null
     * @SerializedName("engagement_domain")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $engagementDomain = null;

    /**
     * Engagement type enum. Optional for ENGAGEMENT &#x60;audience_type&#x60;. Supported values are &#x60;click&#x60;, &#x60;save&#x60;, &#x60;closeup&#x60;, &#x60;comment&#x60; and &#x60;like&#x60;. All engagements are included if this field is not set.
     *
     * @var string|null
     * @SerializedName("engagement_type")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $engagementType = null;

    /**
     * A Pinterest tag event. Optional for VISITOR &#x60;audience_type&#x60;. Possible values are &#x60;pagevisit&#x60;, &#x60;signup&#x60;, &#x60;checkout&#x60;, &#x60;viewcategory&#x60;, &#x60;search&#x60;, &#x60;addtocart&#x60;, &#x60;watchvideo&#x60;, &#x60;lead&#x60;, and &#x60;custom&#x60;. This field also accepts a partner-defined Pinterest tag event.
     *
     * @var string|null
     * @SerializedName("event")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $event = null;

    /**
     * @var PinterestTagEventData|null
     * @SerializedName("event_data")
     * @Type("OpenAPI\Server\Model\PinterestTagEventData")
    */
    #[Assert\Type("OpenAPI\Server\Model\PinterestTagEventData")]
    protected ?PinterestTagEventData $eventData = null;

    /**
     * Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
     *
     * @var int|null
     * @SerializedName("percentage")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $percentage = null;

    /**
     * IDs of engaged organic pins. Optional for ENGAGEMENT &#x60;audience_type&#x60;. For example, \&quot;pin_id:\&quot;: [\&quot;34567\&quot;]
     *
     * @var string[]|null
     * @SerializedName("pin_id")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $pinId = null;

    /**
     * Optional for VISITOR &#x60;audience_type&#x60;. If &#x60;true&#x60;, the specified rule on existing engagement data is applied to pre-populate the audience. If &#x60;false&#x60;, the audience is empty at creation time. The default is &#x60;true&#x60;.
     *
     * @var bool|null
     * @SerializedName("prefill")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $prefill = null;

    /**
     * Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR &#x60;audience_type&#x60;. Accepted range is 1-540. Defaults to 180 if not specified.
     *
     * @var int|null
     * @SerializedName("retention_days")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $retentionDays = null;

    /**
     * Audience ID(s). For ACTALIKE &#x60;audience_type&#x60;.
     *
     * @var string[]|null
     * @SerializedName("seed_id")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $seedId = null;

    /**
     * Optional for ENGAGEMENT or VISITOR &#x60;audience_type&#x60;. For ENGAGEMENT, it is the engaged pin&#39;s URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ &#x3D;, !&#x3D;, contains, not_contains].&lt;br&gt;Example 1:  \&quot;url\&quot;: \&quot;http://www.myonlinestore123.com/view_item/shoe\&quot;&lt;br&gt;Example 2: \&quot;url\&quot;: {\&quot;contains\&quot;: \&quot;/view_item/shoe\&quot;}
     *
     * @var string[]|null
     * @SerializedName("url")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $url = null;

    /**
     * The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR &#x60;audience_type&#x60;.
     *
     * @var string|null
     * @SerializedName("visitor_source_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $visitorSourceId = null;

    /**
     * Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: web, mobile, offline
     *
     * @var array|null
     * @SerializedName("event_source")
     * @Type("array")
    */
    #[Assert\Type("array")]
    protected ?array $eventSource = null;

    /**
     * Optional for VISITOR. You can use it as a {&#39;&#x3D;&#39;: [value]}. Supported values are: tag, mmp, file_upload, conversions_api
     *
     * @var array|null
     * @SerializedName("ingestion_source")
     * @Type("array")
    */
    #[Assert\Type("array")]
    protected ?array $ingestionSource = null;

    /**
     * Optional for ENGAGEMENT. Engager type value should be 1-2.
     *
     * @var int|null
     * @SerializedName("engager_type")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $engagerType = null;

    /**
     * Campaign ID for engagement audience filter.
     *
     * @var string[]|null
     * @SerializedName("campaign_id")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $campaignId = null;

    /**
     * Ad ID for engagement audience filter.
     *
     * @var string[]|null
     * @SerializedName("ad_id")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $adId = null;

    /**
     * Objective for engagement audience filter.
     *
     * @var ObjectiveType[]|null
     * @SerializedName("objective_type")
     * @Accessor(getter="getSerializedObjectiveType", setter="setDeserializedObjectiveType")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ObjectiveType"),
    ])]
    protected ?array $objectiveType = null;

    /**
     * Ad account ID.
     *
     * @var string|null
     * @SerializedName("ad_account_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $adAccountId = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->customerListId = array_key_exists('customerListId', $data) ? $data['customerListId'] : $this->customerListId;
            $this->engagementDomain = array_key_exists('engagementDomain', $data) ? $data['engagementDomain'] : $this->engagementDomain;
            $this->engagementType = array_key_exists('engagementType', $data) ? $data['engagementType'] : $this->engagementType;
            $this->event = array_key_exists('event', $data) ? $data['event'] : $this->event;
            $this->eventData = array_key_exists('eventData', $data) ? $data['eventData'] : $this->eventData;
            $this->percentage = array_key_exists('percentage', $data) ? $data['percentage'] : $this->percentage;
            $this->pinId = array_key_exists('pinId', $data) ? $data['pinId'] : $this->pinId;
            $this->prefill = array_key_exists('prefill', $data) ? $data['prefill'] : $this->prefill;
            $this->retentionDays = array_key_exists('retentionDays', $data) ? $data['retentionDays'] : $this->retentionDays;
            $this->seedId = array_key_exists('seedId', $data) ? $data['seedId'] : $this->seedId;
            $this->url = array_key_exists('url', $data) ? $data['url'] : $this->url;
            $this->visitorSourceId = array_key_exists('visitorSourceId', $data) ? $data['visitorSourceId'] : $this->visitorSourceId;
            $this->eventSource = array_key_exists('eventSource', $data) ? $data['eventSource'] : $this->eventSource;
            $this->ingestionSource = array_key_exists('ingestionSource', $data) ? $data['ingestionSource'] : $this->ingestionSource;
            $this->engagerType = array_key_exists('engagerType', $data) ? $data['engagerType'] : $this->engagerType;
            $this->campaignId = array_key_exists('campaignId', $data) ? $data['campaignId'] : $this->campaignId;
            $this->adId = array_key_exists('adId', $data) ? $data['adId'] : $this->adId;
            $this->objectiveType = array_key_exists('objectiveType', $data) ? $data['objectiveType'] : $this->objectiveType;
            $this->adAccountId = array_key_exists('adAccountId', $data) ? $data['adAccountId'] : $this->adAccountId;
        }
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
    * Sets country.
    *
    * @param string|null $country  Valid countries include: \"US\", \"CA\", and \"GB\".
    *
    * @return $this
    */
    public function setCountry(?string $country = null): self
    {
        $this->country = $country;

        return $this;
    }




    /**
     * Gets customerListId.
     *
     * @return string|null
     */
    public function getCustomerListId(): ?string
    {
        return $this->customerListId;
    }

    /**
    * Sets customerListId.
    *
    * @param string|null $customerListId  Customer list ID. For CUSTOMER_LIST `audience_type`.
    *
    * @return $this
    */
    public function setCustomerListId(?string $customerListId = null): self
    {
        $this->customerListId = $customerListId;

        return $this;
    }




    /**
     * Gets engagementDomain.
     *
     * @return string[]|null
     */
    public function getEngagementDomain(): ?array
    {
        return $this->engagementDomain;
    }

    /**
    * Sets engagementDomain.
    *
    * @param string[]|null $engagementDomain  The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
    *
    * @return $this
    */
    public function setEngagementDomain(?array $engagementDomain = null): self
    {
        $this->engagementDomain = $engagementDomain;

        return $this;
    }




    /**
     * Gets engagementType.
     *
     * @return string|null
     */
    public function getEngagementType(): ?string
    {
        return $this->engagementType;
    }

    /**
    * Sets engagementType.
    *
    * @param string|null $engagementType  Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set.
    *
    * @return $this
    */
    public function setEngagementType(?string $engagementType = null): self
    {
        $this->engagementType = $engagementType;

        return $this;
    }




    /**
     * Gets event.
     *
     * @return string|null
     */
    public function getEvent(): ?string
    {
        return $this->event;
    }

    /**
    * Sets event.
    *
    * @param string|null $event  A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
    *
    * @return $this
    */
    public function setEvent(?string $event = null): self
    {
        $this->event = $event;

        return $this;
    }




    /**
     * Gets eventData.
     *
     * @return PinterestTagEventData|null
     */
    public function getEventData(): ?PinterestTagEventData
    {
        return $this->eventData;
    }

    /**
    * Sets eventData.
    *
    * @param PinterestTagEventData|null $eventData
    *
    * @return $this
    */
    public function setEventData(?PinterestTagEventData $eventData = null): self
    {
        $this->eventData = $eventData;

        return $this;
    }




    /**
     * Gets percentage.
     *
     * @return int|null
     */
    public function getPercentage(): ?int
    {
        return $this->percentage;
    }

    /**
    * Sets percentage.
    *
    * @param int|null $percentage  Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
    *
    * @return $this
    */
    public function setPercentage(?int $percentage = null): self
    {
        $this->percentage = $percentage;

        return $this;
    }




    /**
     * Gets pinId.
     *
     * @return string[]|null
     */
    public function getPinId(): ?array
    {
        return $this->pinId;
    }

    /**
    * Sets pinId.
    *
    * @param string[]|null $pinId  IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, \"pin_id:\": [\"34567\"]
    *
    * @return $this
    */
    public function setPinId(?array $pinId = null): self
    {
        $this->pinId = $pinId;

        return $this;
    }




    /**
     * Gets prefill.
     *
     * @return bool|null
     */
    public function isPrefill(): ?bool
    {
        return $this->prefill;
    }

    /**
    * Sets prefill.
    *
    * @param bool|null $prefill  Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
    *
    * @return $this
    */
    public function setPrefill(?bool $prefill = null): self
    {
        $this->prefill = $prefill;

        return $this;
    }




    /**
     * Gets retentionDays.
     *
     * @return int|null
     */
    public function getRetentionDays(): ?int
    {
        return $this->retentionDays;
    }

    /**
    * Sets retentionDays.
    *
    * @param int|null $retentionDays  Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
    *
    * @return $this
    */
    public function setRetentionDays(?int $retentionDays = null): self
    {
        $this->retentionDays = $retentionDays;

        return $this;
    }




    /**
     * Gets seedId.
     *
     * @return string[]|null
     */
    public function getSeedId(): ?array
    {
        return $this->seedId;
    }

    /**
    * Sets seedId.
    *
    * @param string[]|null $seedId  Audience ID(s). For ACTALIKE `audience_type`.
    *
    * @return $this
    */
    public function setSeedId(?array $seedId = null): self
    {
        $this->seedId = $seedId;

        return $this;
    }




    /**
     * Gets url.
     *
     * @return string[]|null
     */
    public function getUrl(): ?array
    {
        return $this->url;
    }

    /**
    * Sets url.
    *
    * @param string[]|null $url  Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  \"url\": \"http://www.myonlinestore123.com/view_item/shoe\"<br>Example 2: \"url\": {\"contains\": \"/view_item/shoe\"}
    *
    * @return $this
    */
    public function setUrl(?array $url = null): self
    {
        $this->url = $url;

        return $this;
    }




    /**
     * Gets visitorSourceId.
     *
     * @return string|null
     */
    public function getVisitorSourceId(): ?string
    {
        return $this->visitorSourceId;
    }

    /**
    * Sets visitorSourceId.
    *
    * @param string|null $visitorSourceId  The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
    *
    * @return $this
    */
    public function setVisitorSourceId(?string $visitorSourceId = null): self
    {
        $this->visitorSourceId = $visitorSourceId;

        return $this;
    }




    /**
     * Gets eventSource.
     *
     * @return array|null
     */
    public function getEventSource(): ?array
    {
        return $this->eventSource;
    }

    /**
    * Sets eventSource.
    *
    * @param array|null $eventSource  Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
    *
    * @return $this
    */
    public function setEventSource(?array $eventSource = null): self
    {
        $this->eventSource = $eventSource;

        return $this;
    }




    /**
     * Gets ingestionSource.
     *
     * @return array|null
     */
    public function getIngestionSource(): ?array
    {
        return $this->ingestionSource;
    }

    /**
    * Sets ingestionSource.
    *
    * @param array|null $ingestionSource  Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
    *
    * @return $this
    */
    public function setIngestionSource(?array $ingestionSource = null): self
    {
        $this->ingestionSource = $ingestionSource;

        return $this;
    }




    /**
     * Gets engagerType.
     *
     * @return int|null
     */
    public function getEngagerType(): ?int
    {
        return $this->engagerType;
    }

    /**
    * Sets engagerType.
    *
    * @param int|null $engagerType  Optional for ENGAGEMENT. Engager type value should be 1-2.
    *
    * @return $this
    */
    public function setEngagerType(?int $engagerType = null): self
    {
        $this->engagerType = $engagerType;

        return $this;
    }




    /**
     * Gets campaignId.
     *
     * @return string[]|null
     */
    public function getCampaignId(): ?array
    {
        return $this->campaignId;
    }

    /**
    * Sets campaignId.
    *
    * @param string[]|null $campaignId  Campaign ID for engagement audience filter.
    *
    * @return $this
    */
    public function setCampaignId(?array $campaignId = null): self
    {
        $this->campaignId = $campaignId;

        return $this;
    }




    /**
     * Gets adId.
     *
     * @return string[]|null
     */
    public function getAdId(): ?array
    {
        return $this->adId;
    }

    /**
    * Sets adId.
    *
    * @param string[]|null $adId  Ad ID for engagement audience filter.
    *
    * @return $this
    */
    public function setAdId(?array $adId = null): self
    {
        $this->adId = $adId;

        return $this;
    }




    /**
     * Gets objectiveType.
     *
     * @return ObjectiveType[]|null
     */
    public function getObjectiveType(): ?array
    {
        return $this->objectiveType;
    }

    /**
    * Sets objectiveType.
    *
    * @param ObjectiveType[]|null $objectiveType  Objective for engagement audience filter.
    *
    * @return $this
    */
    public function setObjectiveType(?array $objectiveType = null): self
    {
        $this->objectiveType = $objectiveType;

        return $this;
    }


    /**
    * Gets objectiveType for serialization.
    *
    * @return array
    */
    public function getSerializedObjectiveType(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->objectiveType ?? []
        );
    }

    /**
    * Sets objectiveType.
    *
    * @param ?array $objectiveType
    *
    * @return $this
    */
    public function setDeserializedObjectiveType(?array $objectiveType = []): self
    {
        $this->objectiveType = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ObjectiveType::tryFrom($value);
                }

                return $value;
            },
            $objectiveType ?? []
        );

        return $this;
    }


    /**
     * Gets adAccountId.
     *
     * @return string|null
     */
    public function getAdAccountId(): ?string
    {
        return $this->adAccountId;
    }

    /**
    * Sets adAccountId.
    *
    * @param string|null $adAccountId  Ad account ID.
    *
    * @return $this
    */
    public function setAdAccountId(?string $adAccountId = null): self
    {
        $this->adAccountId = $adAccountId;

        return $this;
    }



}


