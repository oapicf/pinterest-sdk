<?php
/**
 * UpdateAssetGroupBodyAssetGroupsToUpdateInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the UpdateAssetGroupBodyAssetGroupsToUpdateInner model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class UpdateAssetGroupBodyAssetGroupsToUpdateInner 
{
        /**
     * Unique identifier of the asset group to update.
     *
     * @var string|null
     * @SerializedName("asset_group_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $assetGroupId = null;

    /**
     * Asset Group name
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * Asset group description
     *
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $description = null;

    /**
     * Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
     *
     * @var AssetGroupType[]|null
     * @SerializedName("asset_group_types")
     * @Accessor(getter="getSerializedAssetGroupTypes", setter="setDeserializedAssetGroupTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AssetGroupType"),
    ])]
    protected ?array $assetGroupTypes = null;

    /**
     * A list of asset ids to add to the asset group.
     *
     * @var string[]|null
     * @SerializedName("assets_to_add")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $assetsToAdd = null;

    /**
     * A list of asset ids to remove from the asset group.
     *
     * @var string[]|null
     * @SerializedName("assets_to_remove")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $assetsToRemove = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->assetGroupId = array_key_exists('assetGroupId', $data) ? $data['assetGroupId'] : $this->assetGroupId;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->assetGroupTypes = array_key_exists('assetGroupTypes', $data) ? $data['assetGroupTypes'] : $this->assetGroupTypes;
            $this->assetsToAdd = array_key_exists('assetsToAdd', $data) ? $data['assetsToAdd'] : $this->assetsToAdd;
            $this->assetsToRemove = array_key_exists('assetsToRemove', $data) ? $data['assetsToRemove'] : $this->assetsToRemove;
        }
    }

    /**
     * Gets assetGroupId.
     *
     * @return string|null
     */
    public function getAssetGroupId(): ?string
    {
        return $this->assetGroupId;
    }

    /**
    * Sets assetGroupId.
    *
    * @param string|null $assetGroupId  Unique identifier of the asset group to update.
    *
    * @return $this
    */
    public function setAssetGroupId(?string $assetGroupId): self
    {
        $this->assetGroupId = $assetGroupId;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Asset Group name
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description  Asset group description
    *
    * @return $this
    */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets assetGroupTypes.
     *
     * @return AssetGroupType[]|null
     */
    public function getAssetGroupTypes(): ?array
    {
        return $this->assetGroupTypes;
    }

    /**
    * Sets assetGroupTypes.
    *
    * @param AssetGroupType[]|null $assetGroupTypes  Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
    *
    * @return $this
    */
    public function setAssetGroupTypes(?array $assetGroupTypes = null): self
    {
        $this->assetGroupTypes = $assetGroupTypes;

        return $this;
    }


    /**
    * Gets assetGroupTypes for serialization.
    *
    * @return array
    */
    public function getSerializedAssetGroupTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->assetGroupTypes ?? []
        );
    }

    /**
    * Sets assetGroupTypes.
    *
    * @param ?array $assetGroupTypes
    *
    * @return $this
    */
    public function setDeserializedAssetGroupTypes(?array $assetGroupTypes = []): self
    {
        $this->assetGroupTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = AssetGroupType::tryFrom($value);
                }

                return $value;
            },
            $assetGroupTypes ?? []
        );

        return $this;
    }


    /**
     * Gets assetsToAdd.
     *
     * @return string[]|null
     */
    public function getAssetsToAdd(): ?array
    {
        return $this->assetsToAdd;
    }

    /**
    * Sets assetsToAdd.
    *
    * @param string[]|null $assetsToAdd  A list of asset ids to add to the asset group.
    *
    * @return $this
    */
    public function setAssetsToAdd(?array $assetsToAdd = null): self
    {
        $this->assetsToAdd = $assetsToAdd;

        return $this;
    }




    /**
     * Gets assetsToRemove.
     *
     * @return string[]|null
     */
    public function getAssetsToRemove(): ?array
    {
        return $this->assetsToRemove;
    }

    /**
    * Sets assetsToRemove.
    *
    * @param string[]|null $assetsToRemove  A list of asset ids to remove from the asset group.
    *
    * @return $this
    */
    public function setAssetsToRemove(?array $assetsToRemove = null): self
    {
        $this->assetsToRemove = $assetsToRemove;

        return $this;
    }



}


