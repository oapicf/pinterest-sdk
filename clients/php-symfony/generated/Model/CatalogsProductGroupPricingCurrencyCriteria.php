<?php
/**
 * CatalogsProductGroupPricingCurrencyCriteria
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsProductGroupPricingCurrencyCriteria model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsProductGroupPricingCurrencyCriteria 
{
        /**
     * @var string|null
     * @SerializedName("operator")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["GREATER_THAN", "GREATER_THAN_OR_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUALS"])]
    #[Assert\Type("string")]
    protected ?string $operator = null;

    /**
     * @var float|null
     * @SerializedName("value")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThanOrEqual(0)]
    protected ?float $value = null;

    /**
     * @var NonNullableCatalogsCurrency|null
     * @SerializedName("currency")
    * @Accessor(getter="getSerializedCurrency", setter="setDeserializedCurrency")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?NonNullableCatalogsCurrency $currency = null;

    /**
     * @var bool|null
     * @SerializedName("negated")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $negated = false;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->operator = array_key_exists('operator', $data) ? $data['operator'] : $this->operator;
            $this->value = array_key_exists('value', $data) ? $data['value'] : $this->value;
            $this->currency = array_key_exists('currency', $data) ? $data['currency'] : $this->currency;
            $this->negated = array_key_exists('negated', $data) ? $data['negated'] : $this->negated;
        }
    }

    /**
     * Gets operator.
     *
     * @return string|null
     */
    public function getOperator(): ?string
    {
        return $this->operator;
    }

    /**
    * Sets operator.
    *
    * @param string|null $operator
    *
    * @return $this
    */
    public function setOperator(?string $operator): self
    {
        $this->operator = $operator;

        return $this;
    }




    /**
     * Gets value.
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->value;
    }

    /**
    * Sets value.
    *
    * @param float|null $value
    *
    * @return $this
    */
    public function setValue(?float $value): self
    {
        $this->value = $value;

        return $this;
    }




    /**
     * Gets currency.
     *
     * @return NonNullableCatalogsCurrency|null
     */
    public function getCurrency(): ?NonNullableCatalogsCurrency
    {
        return $this->currency;
    }

    /**
    * Sets currency.
    *
    * @param NonNullableCatalogsCurrency|null $currency
    *
    * @return $this
    */
    public function setCurrency(?NonNullableCatalogsCurrency $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
    * Gets currency for serialization.
    *
    * @return string|null
    */
    public function getSerializedCurrency(): string|null
    {
        return !is_null($this->currency?->value) ? (string) $this->currency->value : null;
    }

    /**
    * Sets currency.
    *
    * @param string|NonNullableCatalogsCurrency|null $currency
    *
    * @return $this
    */
    public function setDeserializedCurrency(string|NonNullableCatalogsCurrency|null $currency): self
    {
        if (is_string($currency)) {
            $currency = NonNullableCatalogsCurrency::tryFrom($currency);
        }

        $this->currency = $currency;

        return $this;
    }



    /**
     * Gets negated.
     *
     * @return bool|null
     */
    public function isNegated(): ?bool
    {
        return $this->negated;
    }

    /**
    * Sets negated.
    *
    * @param bool|null $negated
    *
    * @return $this
    */
    public function setNegated(?bool $negated = null): self
    {
        $this->negated = $negated;

        return $this;
    }



}


