<?php
/**
 * SharedAudienceResponseCommon
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the SharedAudienceResponseCommon model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class SharedAudienceResponseCommon 
{
        /**
     * Audience ID that was shared
     *
     * @var string|null
     * @SerializedName("audience_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $audienceId = null;

    /**
     * @var Role[]|null
     * @SerializedName("permissions")
     * @Accessor(getter="getSerializedPermissions", setter="setDeserializedPermissions")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\Role"),
    ])]
    protected ?array $permissions = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->audienceId = array_key_exists('audienceId', $data) ? $data['audienceId'] : $this->audienceId;
            $this->permissions = array_key_exists('permissions', $data) ? $data['permissions'] : $this->permissions;
        }
    }

    /**
     * Gets audienceId.
     *
     * @return string|null
     */
    public function getAudienceId(): ?string
    {
        return $this->audienceId;
    }

    /**
    * Sets audienceId.
    *
    * @param string|null $audienceId  Audience ID that was shared
    *
    * @return $this
    */
    public function setAudienceId(?string $audienceId = null): self
    {
        $this->audienceId = $audienceId;

        return $this;
    }




    /**
     * Gets permissions.
     *
     * @return Role[]|null
     */
    public function getPermissions(): ?array
    {
        return $this->permissions;
    }

    /**
    * Sets permissions.
    *
    * @param Role[]|null $permissions
    *
    * @return $this
    */
    public function setPermissions(?array $permissions = null): self
    {
        $this->permissions = $permissions;

        return $this;
    }


    /**
    * Gets permissions for serialization.
    *
    * @return array
    */
    public function getSerializedPermissions(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->permissions ?? []
        );
    }

    /**
    * Sets permissions.
    *
    * @param ?array $permissions
    *
    * @return $this
    */
    public function setDeserializedPermissions(?array $permissions = []): self
    {
        $this->permissions = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = Role::tryFrom($value);
                }

                return $value;
            },
            $permissions ?? []
        );

        return $this;
    }

}


