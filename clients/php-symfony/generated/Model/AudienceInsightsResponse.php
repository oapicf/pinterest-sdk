<?php
/**
 * AudienceInsightsResponse
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AudienceInsightsResponse model.
 *
 * Audience interests and demographics.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AudienceInsightsResponse 
{
        /**
     * Category interest distribution
     *
     * @var AudienceCategory[]|null
     * @SerializedName("categories")
     * @Type("array<OpenAPI\Server\Model\AudienceCategory>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AudienceCategory"),
    ])]
    protected ?array $categories = null;

    /**
     * @var AudienceDemographics|null
     * @SerializedName("demographics")
     * @Type("OpenAPI\Server\Model\AudienceDemographics")
    */
    #[Assert\Type("OpenAPI\Server\Model\AudienceDemographics")]
    protected ?AudienceDemographics $demographics = null;

    /**
     * @var AudienceInsightType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    protected ?AudienceInsightType $type = null;

    /**
     * Generation date
     *
     * @var string|null
     * @SerializedName("date")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d{4}-\\d{2}-\\d{2}$/")]
    protected ?string $date = null;

    /**
     * Population count.
     *
     * @var int|null
     * @SerializedName("size")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $size = null;

    /**
     * Indicates whether the audience size has been rounded up to the next highest upper boundary.
     *
     * @var bool|null
     * @SerializedName("size_is_upper_bound")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $sizeIsUpperBound = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->categories = array_key_exists('categories', $data) ? $data['categories'] : $this->categories;
            $this->demographics = array_key_exists('demographics', $data) ? $data['demographics'] : $this->demographics;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->date = array_key_exists('date', $data) ? $data['date'] : $this->date;
            $this->size = array_key_exists('size', $data) ? $data['size'] : $this->size;
            $this->sizeIsUpperBound = array_key_exists('sizeIsUpperBound', $data) ? $data['sizeIsUpperBound'] : $this->sizeIsUpperBound;
        }
    }

    /**
     * Gets categories.
     *
     * @return AudienceCategory[]|null
     */
    public function getCategories(): ?array
    {
        return $this->categories;
    }

    /**
    * Sets categories.
    *
    * @param AudienceCategory[]|null $categories  Category interest distribution
    *
    * @return $this
    */
    public function setCategories(?array $categories = null): self
    {
        $this->categories = $categories;

        return $this;
    }




    /**
     * Gets demographics.
     *
     * @return AudienceDemographics|null
     */
    public function getDemographics(): ?AudienceDemographics
    {
        return $this->demographics;
    }

    /**
    * Sets demographics.
    *
    * @param AudienceDemographics|null $demographics
    *
    * @return $this
    */
    public function setDemographics(?AudienceDemographics $demographics = null): self
    {
        $this->demographics = $demographics;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return AudienceInsightType|null
     */
    public function getType(): ?AudienceInsightType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param AudienceInsightType|null $type
    *
    * @return $this
    */
    public function setType(?AudienceInsightType $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return !is_null($this->type?->value) ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|AudienceInsightType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|AudienceInsightType|null $type = null): self
    {
        if (is_string($type)) {
            $type = AudienceInsightType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets date.
     *
     * @return string|null
     */
    public function getDate(): ?string
    {
        return $this->date;
    }

    /**
    * Sets date.
    *
    * @param string|null $date  Generation date
    *
    * @return $this
    */
    public function setDate(?string $date = null): self
    {
        $this->date = $date;

        return $this;
    }




    /**
     * Gets size.
     *
     * @return int|null
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
    * Sets size.
    *
    * @param int|null $size  Population count.
    *
    * @return $this
    */
    public function setSize(?int $size = null): self
    {
        $this->size = $size;

        return $this;
    }




    /**
     * Gets sizeIsUpperBound.
     *
     * @return bool|null
     */
    public function isSizeIsUpperBound(): ?bool
    {
        return $this->sizeIsUpperBound;
    }

    /**
    * Sets sizeIsUpperBound.
    *
    * @param bool|null $sizeIsUpperBound  Indicates whether the audience size has been rounded up to the next highest upper boundary.
    *
    * @return $this
    */
    public function setSizeIsUpperBound(?bool $sizeIsUpperBound = null): self
    {
        $this->sizeIsUpperBound = $sizeIsUpperBound;

        return $this;
    }



}


