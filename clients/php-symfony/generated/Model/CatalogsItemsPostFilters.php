<?php
/**
 * CatalogsItemsPostFilters
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsItemsPostFilters model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsItemsPostFilters 
{
        /**
     * @var CatalogsType|null
     * @SerializedName("catalog_type")
    * @Accessor(getter="getSerializedCatalogType", setter="setDeserializedCatalogType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?CatalogsType $catalogType = null;

    /**
     * @var string[]|null
     * @SerializedName("item_ids")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 1000)]
    #[Assert\Count(min: 1)]
    protected ?array $itemIds = null;

    /**
     * Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
     *
     * @var string|null
     * @SerializedName("catalog_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $catalogId = null;

    /**
     * @var string[]|null
     * @SerializedName("hotel_ids")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 1000)]
    #[Assert\Count(min: 1)]
    protected ?array $hotelIds = null;

    /**
     * @var string[]|null
     * @SerializedName("creative_assets_ids")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 1000)]
    #[Assert\Count(min: 1)]
    protected ?array $creativeAssetsIds = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->catalogType = array_key_exists('catalogType', $data) ? $data['catalogType'] : $this->catalogType;
            $this->itemIds = array_key_exists('itemIds', $data) ? $data['itemIds'] : $this->itemIds;
            $this->catalogId = array_key_exists('catalogId', $data) ? $data['catalogId'] : $this->catalogId;
            $this->hotelIds = array_key_exists('hotelIds', $data) ? $data['hotelIds'] : $this->hotelIds;
            $this->creativeAssetsIds = array_key_exists('creativeAssetsIds', $data) ? $data['creativeAssetsIds'] : $this->creativeAssetsIds;
        }
    }

    /**
     * Gets catalogType.
     *
     * @return CatalogsType|null
     */
    public function getCatalogType(): ?CatalogsType
    {
        return $this->catalogType;
    }

    /**
    * Sets catalogType.
    *
    * @param CatalogsType|null $catalogType
    *
    * @return $this
    */
    public function setCatalogType(?CatalogsType $catalogType): self
    {
        $this->catalogType = $catalogType;

        return $this;
    }

    /**
    * Gets catalogType for serialization.
    *
    * @return string|null
    */
    public function getSerializedCatalogType(): string|null
    {
        return !is_null($this->catalogType?->value) ? (string) $this->catalogType->value : null;
    }

    /**
    * Sets catalogType.
    *
    * @param string|CatalogsType|null $catalogType
    *
    * @return $this
    */
    public function setDeserializedCatalogType(string|CatalogsType|null $catalogType): self
    {
        if (is_string($catalogType)) {
            $catalogType = CatalogsType::tryFrom($catalogType);
        }

        $this->catalogType = $catalogType;

        return $this;
    }



    /**
     * Gets itemIds.
     *
     * @return string[]|null
     */
    public function getItemIds(): ?array
    {
        return $this->itemIds;
    }

    /**
    * Sets itemIds.
    *
    * @param string[]|null $itemIds
    *
    * @return $this
    */
    public function setItemIds(?array $itemIds): self
    {
        $this->itemIds = $itemIds;

        return $this;
    }




    /**
     * Gets catalogId.
     *
     * @return string|null
     */
    public function getCatalogId(): ?string
    {
        return $this->catalogId;
    }

    /**
    * Sets catalogId.
    *
    * @param string|null $catalogId  Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
    *
    * @return $this
    */
    public function setCatalogId(?string $catalogId = null): self
    {
        $this->catalogId = $catalogId;

        return $this;
    }




    /**
     * Gets hotelIds.
     *
     * @return string[]|null
     */
    public function getHotelIds(): ?array
    {
        return $this->hotelIds;
    }

    /**
    * Sets hotelIds.
    *
    * @param string[]|null $hotelIds
    *
    * @return $this
    */
    public function setHotelIds(?array $hotelIds): self
    {
        $this->hotelIds = $hotelIds;

        return $this;
    }




    /**
     * Gets creativeAssetsIds.
     *
     * @return string[]|null
     */
    public function getCreativeAssetsIds(): ?array
    {
        return $this->creativeAssetsIds;
    }

    /**
    * Sets creativeAssetsIds.
    *
    * @param string[]|null $creativeAssetsIds
    *
    * @return $this
    */
    public function setCreativeAssetsIds(?array $creativeAssetsIds): self
    {
        $this->creativeAssetsIds = $creativeAssetsIds;

        return $this;
    }



}


