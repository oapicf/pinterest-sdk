<?php
/**
 * CustomerListRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CustomerListRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CustomerListRequest 
{
        /**
     * Customer list name.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
     *
     * @var string|null
     * @SerializedName("records")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $records = null;

    /**
     * @var UserListType|null
     * @SerializedName("list_type")
    * @Accessor(getter="getSerializedListType", setter="setDeserializedListType")
    * @Type("string")
    */
    protected ?UserListType $listType = 'EMAIL';

    /**
     * Customer list errors.
     *
     * @var array|null
     * @SerializedName("exceptions")
     * @Type("array")
    */
    #[Assert\Type("array")]
    protected ?array $exceptions = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->records = array_key_exists('records', $data) ? $data['records'] : $this->records;
            $this->listType = array_key_exists('listType', $data) ? $data['listType'] : $this->listType;
            $this->exceptions = array_key_exists('exceptions', $data) ? $data['exceptions'] : $this->exceptions;
        }
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Customer list name.
    *
    * @return $this
    */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets records.
     *
     * @return string|null
     */
    public function getRecords(): ?string
    {
        return $this->records;
    }

    /**
    * Sets records.
    *
    * @param string|null $records  Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
    *
    * @return $this
    */
    public function setRecords(?string $records): self
    {
        $this->records = $records;

        return $this;
    }




    /**
     * Gets listType.
     *
     * @return UserListType|null
     */
    public function getListType(): ?UserListType
    {
        return $this->listType;
    }

    /**
    * Sets listType.
    *
    * @param UserListType|null $listType
    *
    * @return $this
    */
    public function setListType(?UserListType $listType = null): self
    {
        $this->listType = $listType;

        return $this;
    }

    /**
    * Gets listType for serialization.
    *
    * @return string|null
    */
    public function getSerializedListType(): string|null
    {
        return !is_null($this->listType?->value) ? (string) $this->listType->value : null;
    }

    /**
    * Sets listType.
    *
    * @param string|UserListType|null $listType
    *
    * @return $this
    */
    public function setDeserializedListType(string|UserListType|null $listType = null): self
    {
        if (is_string($listType)) {
            $listType = UserListType::tryFrom($listType);
        }

        $this->listType = $listType;

        return $this;
    }



    /**
     * Gets exceptions.
     *
     * @return array|null
     */
    public function getExceptions(): ?array
    {
        return $this->exceptions;
    }

    /**
    * Sets exceptions.
    *
    * @param array|null $exceptions  Customer list errors.
    *
    * @return $this
    */
    public function setExceptions(?array $exceptions = null): self
    {
        $this->exceptions = $exceptions;

        return $this;
    }



}


