<?php
/**
 * OauthAccessTokenResponseClientCredentials
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OauthAccessTokenResponseClientCredentials model.
 *
 * A successful OAuth client token response for the client token flow.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OauthAccessTokenResponseClientCredentials 
{
        /**
     * @var string|null
     * @SerializedName("response_type")
     * @Type("string")
    */
    #[Assert\Choice(["authorization_code", "refresh_token", "client_credentials"])]
    #[Assert\Type("string")]
    protected ?string $responseType = null;

    /**
     * @var string|null
     * @SerializedName("access_token")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $accessToken = null;

    /**
     * @var string|null
     * @SerializedName("token_type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $tokenType = 'bearer';

    /**
     * @var int|null
     * @SerializedName("expires_in")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $expiresIn = null;

    /**
     * @var string|null
     * @SerializedName("scope")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $scope = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->responseType = array_key_exists('responseType', $data) ? $data['responseType'] : $this->responseType;
            $this->accessToken = array_key_exists('accessToken', $data) ? $data['accessToken'] : $this->accessToken;
            $this->tokenType = array_key_exists('tokenType', $data) ? $data['tokenType'] : $this->tokenType;
            $this->expiresIn = array_key_exists('expiresIn', $data) ? $data['expiresIn'] : $this->expiresIn;
            $this->scope = array_key_exists('scope', $data) ? $data['scope'] : $this->scope;
        }
    }

    /**
     * Gets responseType.
     *
     * @return string|null
     */
    public function getResponseType(): ?string
    {
        return $this->responseType;
    }

    /**
    * Sets responseType.
    *
    * @param string|null $responseType
    *
    * @return $this
    */
    public function setResponseType(?string $responseType = null): self
    {
        $this->responseType = $responseType;

        return $this;
    }




    /**
     * Gets accessToken.
     *
     * @return string|null
     */
    public function getAccessToken(): ?string
    {
        return $this->accessToken;
    }

    /**
    * Sets accessToken.
    *
    * @param string|null $accessToken
    *
    * @return $this
    */
    public function setAccessToken(?string $accessToken): self
    {
        $this->accessToken = $accessToken;

        return $this;
    }




    /**
     * Gets tokenType.
     *
     * @return string|null
     */
    public function getTokenType(): ?string
    {
        return $this->tokenType;
    }

    /**
    * Sets tokenType.
    *
    * @param string|null $tokenType
    *
    * @return $this
    */
    public function setTokenType(?string $tokenType): self
    {
        $this->tokenType = $tokenType;

        return $this;
    }




    /**
     * Gets expiresIn.
     *
     * @return int|null
     */
    public function getExpiresIn(): ?int
    {
        return $this->expiresIn;
    }

    /**
    * Sets expiresIn.
    *
    * @param int|null $expiresIn
    *
    * @return $this
    */
    public function setExpiresIn(?int $expiresIn): self
    {
        $this->expiresIn = $expiresIn;

        return $this;
    }




    /**
     * Gets scope.
     *
     * @return string|null
     */
    public function getScope(): ?string
    {
        return $this->scope;
    }

    /**
    * Sets scope.
    *
    * @param string|null $scope
    *
    * @return $this
    */
    public function setScope(?string $scope): self
    {
        $this->scope = $scope;

        return $this;
    }



}


