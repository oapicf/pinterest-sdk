<?php
/**
 * MediaUploadDetails
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the MediaUploadDetails model.
 *
 * Media upload details
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class MediaUploadDetails 
{
        /**
     * @var string|null
     * @SerializedName("media_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $mediaId = null;

    /**
     * @var MediaUploadType|null
     * @SerializedName("media_type")
    * @Accessor(getter="getSerializedMediaType", setter="setDeserializedMediaType")
    * @Type("string")
    */
    protected ?MediaUploadType $mediaType = null;

    /**
     * @var MediaUploadStatus|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?MediaUploadStatus $status = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->mediaId = array_key_exists('mediaId', $data) ? $data['mediaId'] : $this->mediaId;
            $this->mediaType = array_key_exists('mediaType', $data) ? $data['mediaType'] : $this->mediaType;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
        }
    }

    /**
     * Gets mediaId.
     *
     * @return string|null
     */
    public function getMediaId(): ?string
    {
        return $this->mediaId;
    }

    /**
    * Sets mediaId.
    *
    * @param string|null $mediaId
    *
    * @return $this
    */
    public function setMediaId(?string $mediaId = null): self
    {
        $this->mediaId = $mediaId;

        return $this;
    }




    /**
     * Gets mediaType.
     *
     * @return MediaUploadType|null
     */
    public function getMediaType(): ?MediaUploadType
    {
        return $this->mediaType;
    }

    /**
    * Sets mediaType.
    *
    * @param MediaUploadType|null $mediaType
    *
    * @return $this
    */
    public function setMediaType(?MediaUploadType $mediaType = null): self
    {
        $this->mediaType = $mediaType;

        return $this;
    }

    /**
    * Gets mediaType for serialization.
    *
    * @return string|null
    */
    public function getSerializedMediaType(): string|null
    {
        return !is_null($this->mediaType?->value) ? (string) $this->mediaType->value : null;
    }

    /**
    * Sets mediaType.
    *
    * @param string|MediaUploadType|null $mediaType
    *
    * @return $this
    */
    public function setDeserializedMediaType(string|MediaUploadType|null $mediaType = null): self
    {
        if (is_string($mediaType)) {
            $mediaType = MediaUploadType::tryFrom($mediaType);
        }

        $this->mediaType = $mediaType;

        return $this;
    }



    /**
     * Gets status.
     *
     * @return MediaUploadStatus|null
     */
    public function getStatus(): ?MediaUploadStatus
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param MediaUploadStatus|null $status
    *
    * @return $this
    */
    public function setStatus(?MediaUploadStatus $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return !is_null($this->status?->value) ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|MediaUploadStatus|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|MediaUploadStatus|null $status = null): self
    {
        if (is_string($status)) {
            $status = MediaUploadStatus::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }


}


