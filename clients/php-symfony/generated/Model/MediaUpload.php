<?php
/**
 * MediaUpload
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the MediaUpload model.
 *
 * Media upload that has been registered but not uploaded/processed yet.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class MediaUpload 
{
        /**
     * Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
     *
     * @var string|null
     * @SerializedName("media_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $mediaId = null;

    /**
     * @var MediaUploadType|null
     * @SerializedName("media_type")
    * @Accessor(getter="getSerializedMediaType", setter="setDeserializedMediaType")
    * @Type("string")
    */
    protected ?MediaUploadType $mediaType = null;

    /**
     * The URL where you will POST your media file.
     *
     * @var string|null
     * @SerializedName("upload_url")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $uploadUrl = null;

    /**
     * @var MediaUploadAllOfUploadParameters|null
     * @SerializedName("upload_parameters")
     * @Type("OpenAPI\Server\Model\MediaUploadAllOfUploadParameters")
    */
    #[Assert\Type("OpenAPI\Server\Model\MediaUploadAllOfUploadParameters")]
    protected ?MediaUploadAllOfUploadParameters $uploadParameters = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->mediaId = array_key_exists('mediaId', $data) ? $data['mediaId'] : $this->mediaId;
            $this->mediaType = array_key_exists('mediaType', $data) ? $data['mediaType'] : $this->mediaType;
            $this->uploadUrl = array_key_exists('uploadUrl', $data) ? $data['uploadUrl'] : $this->uploadUrl;
            $this->uploadParameters = array_key_exists('uploadParameters', $data) ? $data['uploadParameters'] : $this->uploadParameters;
        }
    }

    /**
     * Gets mediaId.
     *
     * @return string|null
     */
    public function getMediaId(): ?string
    {
        return $this->mediaId;
    }

    /**
    * Sets mediaId.
    *
    * @param string|null $mediaId  Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
    *
    * @return $this
    */
    public function setMediaId(?string $mediaId = null): self
    {
        $this->mediaId = $mediaId;

        return $this;
    }




    /**
     * Gets mediaType.
     *
     * @return MediaUploadType|null
     */
    public function getMediaType(): ?MediaUploadType
    {
        return $this->mediaType;
    }

    /**
    * Sets mediaType.
    *
    * @param MediaUploadType|null $mediaType
    *
    * @return $this
    */
    public function setMediaType(?MediaUploadType $mediaType = null): self
    {
        $this->mediaType = $mediaType;

        return $this;
    }

    /**
    * Gets mediaType for serialization.
    *
    * @return string|null
    */
    public function getSerializedMediaType(): string|null
    {
        return !is_null($this->mediaType?->value) ? (string) $this->mediaType->value : null;
    }

    /**
    * Sets mediaType.
    *
    * @param string|MediaUploadType|null $mediaType
    *
    * @return $this
    */
    public function setDeserializedMediaType(string|MediaUploadType|null $mediaType = null): self
    {
        if (is_string($mediaType)) {
            $mediaType = MediaUploadType::tryFrom($mediaType);
        }

        $this->mediaType = $mediaType;

        return $this;
    }



    /**
     * Gets uploadUrl.
     *
     * @return string|null
     */
    public function getUploadUrl(): ?string
    {
        return $this->uploadUrl;
    }

    /**
    * Sets uploadUrl.
    *
    * @param string|null $uploadUrl  The URL where you will POST your media file.
    *
    * @return $this
    */
    public function setUploadUrl(?string $uploadUrl = null): self
    {
        $this->uploadUrl = $uploadUrl;

        return $this;
    }




    /**
     * Gets uploadParameters.
     *
     * @return MediaUploadAllOfUploadParameters|null
     */
    public function getUploadParameters(): ?MediaUploadAllOfUploadParameters
    {
        return $this->uploadParameters;
    }

    /**
    * Sets uploadParameters.
    *
    * @param MediaUploadAllOfUploadParameters|null $uploadParameters
    *
    * @return $this
    */
    public function setUploadParameters(?MediaUploadAllOfUploadParameters $uploadParameters = null): self
    {
        $this->uploadParameters = $uploadParameters;

        return $this;
    }



}


