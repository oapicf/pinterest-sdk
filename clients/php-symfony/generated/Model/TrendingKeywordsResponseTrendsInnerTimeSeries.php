<?php
/**
 * TrendingKeywordsResponseTrendsInnerTimeSeries
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the TrendingKeywordsResponseTrendsInnerTimeSeries model.
 *
 * A sequence of weekly observations of the relative search volume for this keyword over the past year.&lt;br /&gt; These values are normalized to a [0-100] range, and can be used to visualize the history of user interest in this keyword. By default, normalization is applied independently to the time series of each keyword, but the &#x60;normalize_against_group&#x60; query parameter can be used in cases where you wish to compare relative volume between keywords.&lt;br /&gt; **Note**: The date of each observation is in ISO-8601 format and represents the *end* of the week.  For example, a value of &#x60;2023-10-31&#x60; would include searches that happened between &#x60;2023-10-25&#x60; and &#x60;2023-10-31&#x60;.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class TrendingKeywordsResponseTrendsInnerTimeSeries 
{
        /**
     * @var \DateTime|null
     * @SerializedName("date")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $date = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->date = array_key_exists('date', $data) ? $data['date'] : $this->date;
        }
    }

    /**
     * Gets date.
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->date;
    }

    /**
    * Sets date.
    *
    * @param \DateTime|null $date
    *
    * @return $this
    */
    public function setDate(?\DateTime $date = null): self
    {
        $this->date = $date;

        return $this;
    }



}


