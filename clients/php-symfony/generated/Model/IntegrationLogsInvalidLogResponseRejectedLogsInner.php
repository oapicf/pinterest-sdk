<?php
/**
 * IntegrationLogsInvalidLogResponseRejectedLogsInner
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the IntegrationLogsInvalidLogResponseRejectedLogsInner model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class IntegrationLogsInvalidLogResponseRejectedLogsInner 
{
        /**
     * Index of the log in the batch.
     *
     * @var int|null
     * @SerializedName("log_index")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $logIndex = null;

    /**
     * The field name containing an invalid value.
     *
     * @var string|null
     * @SerializedName("field")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $field = null;

    /**
     * The value that is invalid.
     *
     * @var string|null
     * @SerializedName("value")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $value = null;

    /**
     * The reason the value is invalid.
     *
     * @var string|null
     * @SerializedName("reason")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $reason = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->logIndex = array_key_exists('logIndex', $data) ? $data['logIndex'] : $this->logIndex;
            $this->field = array_key_exists('field', $data) ? $data['field'] : $this->field;
            $this->value = array_key_exists('value', $data) ? $data['value'] : $this->value;
            $this->reason = array_key_exists('reason', $data) ? $data['reason'] : $this->reason;
        }
    }

    /**
     * Gets logIndex.
     *
     * @return int|null
     */
    public function getLogIndex(): ?int
    {
        return $this->logIndex;
    }

    /**
    * Sets logIndex.
    *
    * @param int|null $logIndex  Index of the log in the batch.
    *
    * @return $this
    */
    public function setLogIndex(?int $logIndex = null): self
    {
        $this->logIndex = $logIndex;

        return $this;
    }




    /**
     * Gets field.
     *
     * @return string|null
     */
    public function getField(): ?string
    {
        return $this->field;
    }

    /**
    * Sets field.
    *
    * @param string|null $field  The field name containing an invalid value.
    *
    * @return $this
    */
    public function setField(?string $field): self
    {
        $this->field = $field;

        return $this;
    }




    /**
     * Gets value.
     *
     * @return string|null
     */
    public function getValue(): ?string
    {
        return $this->value;
    }

    /**
    * Sets value.
    *
    * @param string|null $value  The value that is invalid.
    *
    * @return $this
    */
    public function setValue(?string $value): self
    {
        $this->value = $value;

        return $this;
    }




    /**
     * Gets reason.
     *
     * @return string|null
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
    * Sets reason.
    *
    * @param string|null $reason  The reason the value is invalid.
    *
    * @return $this
    */
    public function setReason(?string $reason): self
    {
        $this->reason = $reason;

        return $this;
    }



}


