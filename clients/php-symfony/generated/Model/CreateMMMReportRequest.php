<?php
/**
 * CreateMMMReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CreateMMMReportRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CreateMMMReportRequest 
{
        /**
     * Name of the Marketing Mix Modeling (MMM) report
     *
     * @var string|null
     * @SerializedName("report_name")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $reportName = null;

    /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("start_date")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")]
    protected ?string $startDate = null;

    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("end_date")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")]
    protected ?string $endDate = null;

    /**
     * DAY - metrics are broken down daily.&lt;br&gt; WEEK - metrics are broken down weekly.
     *
     * @var string|null
     * @SerializedName("granularity")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["DAY", "WEEK"])]
    #[Assert\Type("string")]
    protected ?string $granularity = null;

    /**
     * Level of the report
     *
     * @var string|null
     * @SerializedName("level")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["CAMPAIGN_TARGETING", "AD_GROUP_TARGETING"])]
    #[Assert\Type("string")]
    protected ?string $level = null;

    /**
     * List of targeting types
     *
     * @var MMMReportingTargetingType[]|null
     * @SerializedName("targeting_types")
     * @Accessor(getter="getSerializedTargetingTypes", setter="setDeserializedTargetingTypes")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\MMMReportingTargetingType"),
    ])]
    #[Assert\Count(max: 5)]
    #[Assert\Count(min: 1)]
    protected ?array $targetingTypes = null;

    /**
     * Metric and entity columns
     *
     * @var MMMReportingColumn[]|null
     * @SerializedName("columns")
     * @Accessor(getter="getSerializedColumns", setter="setDeserializedColumns")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\MMMReportingColumn"),
    ])]
    protected ?array $columns = null;

    /**
     * A List of countries for filtering
     *
     * @var TargetingAdvertiserCountry[]|null
     * @SerializedName("countries")
     * @Accessor(getter="getSerializedCountries", setter="setDeserializedCountries")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\TargetingAdvertiserCountry"),
    ])]
    protected ?array $countries = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->reportName = array_key_exists('reportName', $data) ? $data['reportName'] : $this->reportName;
            $this->startDate = array_key_exists('startDate', $data) ? $data['startDate'] : $this->startDate;
            $this->endDate = array_key_exists('endDate', $data) ? $data['endDate'] : $this->endDate;
            $this->granularity = array_key_exists('granularity', $data) ? $data['granularity'] : $this->granularity;
            $this->level = array_key_exists('level', $data) ? $data['level'] : $this->level;
            $this->targetingTypes = array_key_exists('targetingTypes', $data) ? $data['targetingTypes'] : $this->targetingTypes;
            $this->columns = array_key_exists('columns', $data) ? $data['columns'] : $this->columns;
            $this->countries = array_key_exists('countries', $data) ? $data['countries'] : $this->countries;
        }
    }

    /**
     * Gets reportName.
     *
     * @return string|null
     */
    public function getReportName(): ?string
    {
        return $this->reportName;
    }

    /**
    * Sets reportName.
    *
    * @param string|null $reportName  Name of the Marketing Mix Modeling (MMM) report
    *
    * @return $this
    */
    public function setReportName(?string $reportName): self
    {
        $this->reportName = $reportName;

        return $this;
    }




    /**
     * Gets startDate.
     *
     * @return string|null
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
    * Sets startDate.
    *
    * @param string|null $startDate  Metric report start date (UTC). Format: YYYY-MM-DD
    *
    * @return $this
    */
    public function setStartDate(?string $startDate): self
    {
        $this->startDate = $startDate;

        return $this;
    }




    /**
     * Gets endDate.
     *
     * @return string|null
     */
    public function getEndDate(): ?string
    {
        return $this->endDate;
    }

    /**
    * Sets endDate.
    *
    * @param string|null $endDate  Metric report end date (UTC). Format: YYYY-MM-DD
    *
    * @return $this
    */
    public function setEndDate(?string $endDate): self
    {
        $this->endDate = $endDate;

        return $this;
    }




    /**
     * Gets granularity.
     *
     * @return string|null
     */
    public function getGranularity(): ?string
    {
        return $this->granularity;
    }

    /**
    * Sets granularity.
    *
    * @param string|null $granularity  DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
    *
    * @return $this
    */
    public function setGranularity(?string $granularity): self
    {
        $this->granularity = $granularity;

        return $this;
    }




    /**
     * Gets level.
     *
     * @return string|null
     */
    public function getLevel(): ?string
    {
        return $this->level;
    }

    /**
    * Sets level.
    *
    * @param string|null $level  Level of the report
    *
    * @return $this
    */
    public function setLevel(?string $level): self
    {
        $this->level = $level;

        return $this;
    }




    /**
     * Gets targetingTypes.
     *
     * @return MMMReportingTargetingType[]|null
     */
    public function getTargetingTypes(): ?array
    {
        return $this->targetingTypes;
    }

    /**
    * Sets targetingTypes.
    *
    * @param MMMReportingTargetingType[]|null $targetingTypes  List of targeting types
    *
    * @return $this
    */
    public function setTargetingTypes(?array $targetingTypes): self
    {
        $this->targetingTypes = $targetingTypes;

        return $this;
    }


    /**
    * Gets targetingTypes for serialization.
    *
    * @return array
    */
    public function getSerializedTargetingTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->targetingTypes ?? []
        );
    }

    /**
    * Sets targetingTypes.
    *
    * @param ?array $targetingTypes
    *
    * @return $this
    */
    public function setDeserializedTargetingTypes(?array $targetingTypes = []): self
    {
        $this->targetingTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = MMMReportingTargetingType::tryFrom($value);
                }

                return $value;
            },
            $targetingTypes ?? []
        );

        return $this;
    }


    /**
     * Gets columns.
     *
     * @return MMMReportingColumn[]|null
     */
    public function getColumns(): ?array
    {
        return $this->columns;
    }

    /**
    * Sets columns.
    *
    * @param MMMReportingColumn[]|null $columns  Metric and entity columns
    *
    * @return $this
    */
    public function setColumns(?array $columns): self
    {
        $this->columns = $columns;

        return $this;
    }


    /**
    * Gets columns for serialization.
    *
    * @return array
    */
    public function getSerializedColumns(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->columns ?? []
        );
    }

    /**
    * Sets columns.
    *
    * @param ?array $columns
    *
    * @return $this
    */
    public function setDeserializedColumns(?array $columns = []): self
    {
        $this->columns = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = MMMReportingColumn::tryFrom($value);
                }

                return $value;
            },
            $columns ?? []
        );

        return $this;
    }


    /**
     * Gets countries.
     *
     * @return TargetingAdvertiserCountry[]|null
     */
    public function getCountries(): ?array
    {
        return $this->countries;
    }

    /**
    * Sets countries.
    *
    * @param TargetingAdvertiserCountry[]|null $countries  A List of countries for filtering
    *
    * @return $this
    */
    public function setCountries(?array $countries = null): self
    {
        $this->countries = $countries;

        return $this;
    }


    /**
    * Gets countries for serialization.
    *
    * @return array
    */
    public function getSerializedCountries(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->countries ?? []
        );
    }

    /**
    * Sets countries.
    *
    * @param ?array $countries
    *
    * @return $this
    */
    public function setDeserializedCountries(?array $countries = []): self
    {
        $this->countries = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = TargetingAdvertiserCountry::tryFrom($value);
                }

                return $value;
            },
            $countries ?? []
        );

        return $this;
    }

}


