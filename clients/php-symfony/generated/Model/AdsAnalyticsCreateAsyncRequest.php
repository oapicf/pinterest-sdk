<?php
/**
 * AdsAnalyticsCreateAsyncRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdsAnalyticsCreateAsyncRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AdsAnalyticsCreateAsyncRequest 
{
        /**
     * Metric report start date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("start_date")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")]
    protected ?string $startDate = null;

    /**
     * Metric report end date (UTC). Format: YYYY-MM-DD
     *
     * @var string|null
     * @SerializedName("end_date")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^(\\d{4})-(\\d{2})-(\\d{2})$/")]
    protected ?string $endDate = null;

    /**
     * TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly
     *
     * @var Granularity|null
     * @SerializedName("granularity")
    * @Accessor(getter="getSerializedGranularity", setter="setDeserializedGranularity")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?Granularity $granularity = null;

    /**
     * Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("click_window_days")
    * @Accessor(getter="getSerializedClickWindowDays", setter="setDeserializedClickWindowDays")
    * @Type("string")
    */
    protected ?ConversionAttributionWindowDays $clickWindowDays = 30;

    /**
     * Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("engagement_window_days")
    * @Accessor(getter="getSerializedEngagementWindowDays", setter="setDeserializedEngagementWindowDays")
    * @Type("string")
    */
    protected ?ConversionAttributionWindowDays $engagementWindowDays = 30;

    /**
     * Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day.
     *
     * @var ConversionAttributionWindowDays|null
     * @SerializedName("view_window_days")
    * @Accessor(getter="getSerializedViewWindowDays", setter="setDeserializedViewWindowDays")
    * @Type("string")
    */
    protected ?ConversionAttributionWindowDays $viewWindowDays = 1;

    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
     *
     * @var ConversionReportTimeType|null
     * @SerializedName("conversion_report_time")
    * @Accessor(getter="getSerializedConversionReportTime", setter="setDeserializedConversionReportTime")
    * @Type("string")
    */
    protected ?ConversionReportTimeType $conversionReportTime = 'TIME_OF_AD_ACTION';

    /**
     * List of types of attribution for the conversion report
     *
     * @var ConversionReportAttributionType[]|null
     * @SerializedName("attribution_types")
     * @Accessor(getter="getSerializedAttributionTypes", setter="setDeserializedAttributionTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ConversionReportAttributionType"),
    ])]
    protected ?array $attributionTypes = null;

    /**
     * List of campaign ids
     *
     * @var string[]|null
     * @SerializedName("campaign_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $campaignIds = null;

    /**
     * List of status values for filtering
     *
     * @var CampaignSummaryStatus[]|null
     * @SerializedName("campaign_statuses")
     * @Accessor(getter="getSerializedCampaignStatuses", setter="setDeserializedCampaignStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\CampaignSummaryStatus"),
    ])]
    #[Assert\Count(max: 6)]
    #[Assert\Count(min: 1)]
    protected ?array $campaignStatuses = null;

    /**
     * List of values for filtering. [\&quot;WEB_SESSIONS\&quot;] in BETA.
     *
     * @var ObjectiveType[]|null
     * @SerializedName("campaign_objective_types")
     * @Accessor(getter="getSerializedCampaignObjectiveTypes", setter="setDeserializedCampaignObjectiveTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ObjectiveType"),
    ])]
    #[Assert\Count(max: 7)]
    #[Assert\Count(min: 1)]
    protected ?array $campaignObjectiveTypes = null;

    /**
     * List of ad group ids
     *
     * @var string[]|null
     * @SerializedName("ad_group_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $adGroupIds = null;

    /**
     * List of values for filtering
     *
     * @var AdGroupSummaryStatus[]|null
     * @SerializedName("ad_group_statuses")
     * @Accessor(getter="getSerializedAdGroupStatuses", setter="setDeserializedAdGroupStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AdGroupSummaryStatus"),
    ])]
    #[Assert\Count(max: 6)]
    #[Assert\Count(min: 1)]
    protected ?array $adGroupStatuses = null;

    /**
     * List of ad ids [This parameter is no supported for Product Item Level Reports]
     *
     * @var string[]|null
     * @SerializedName("ad_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $adIds = null;

    /**
     * List of values for filtering [This parameter is not supported for Product Item Level Reports]
     *
     * @var PinPromotionSummaryStatus[]|null
     * @SerializedName("ad_statuses")
     * @Accessor(getter="getSerializedAdStatuses", setter="setDeserializedAdStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\PinPromotionSummaryStatus"),
    ])]
    #[Assert\Count(max: 6)]
    #[Assert\Count(min: 1)]
    protected ?array $adStatuses = null;

    /**
     * List of product group ids
     *
     * @var string[]|null
     * @SerializedName("product_group_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $productGroupIds = null;

    /**
     * List of values for filtering
     *
     * @var ProductGroupSummaryStatus[]|null
     * @SerializedName("product_group_statuses")
     * @Accessor(getter="getSerializedProductGroupStatuses", setter="setDeserializedProductGroupStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ProductGroupSummaryStatus"),
    ])]
    #[Assert\Count(max: 6)]
    #[Assert\Count(min: 1)]
    protected ?array $productGroupStatuses = null;

    /**
     * List of product item ids
     *
     * @var string[]|null
     * @SerializedName("product_item_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $productItemIds = null;

    /**
     * List of targeting types. Requires &#x60;level&#x60; to be a value ending in &#x60;_TARGETING&#x60;. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users.
     *
     * @var AdsAnalyticsTargetingType[]|null
     * @SerializedName("targeting_types")
     * @Accessor(getter="getSerializedTargetingTypes", setter="setDeserializedTargetingTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AdsAnalyticsTargetingType"),
    ])]
    #[Assert\Count(max: 5)]
    #[Assert\Count(min: 1)]
    protected ?array $targetingTypes = null;

    /**
     * List of metrics filters
     *
     * @var AdsAnalyticsMetricsFilter[]|null
     * @SerializedName("metrics_filters")
     * @Type("array<OpenAPI\Server\Model\AdsAnalyticsMetricsFilter>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\AdsAnalyticsMetricsFilter"),
    ])]
    #[Assert\Count(min: 1)]
    protected ?array $metricsFilters = null;

    /**
     * Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
     *
     * @var ReportingColumnAsync[]|null
     * @SerializedName("columns")
     * @Accessor(getter="getSerializedColumns", setter="setDeserializedColumns")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ReportingColumnAsync"),
    ])]
    protected ?array $columns = null;

    /**
     * Level of the report
     *
     * @var MetricsReportingLevel|null
     * @SerializedName("level")
    * @Accessor(getter="getSerializedLevel", setter="setDeserializedLevel")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?MetricsReportingLevel $level = null;

    /**
     * Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
     *
     * @var DataOutputFormat|null
     * @SerializedName("report_format")
    * @Accessor(getter="getSerializedReportFormat", setter="setDeserializedReportFormat")
    * @Type("string")
    */
    protected ?DataOutputFormat $reportFormat = 'JSON';

    /**
     * Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
     *
     * @var string|null
     * @SerializedName("primary_sort")
     * @Type("string")
    */
    #[Assert\Choice(["BY_ID", "BY_DATE"])]
    #[Assert\Type("string")]
    protected ?string $primarySort = null;

    /**
     * Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
     *
     * @var int|null
     * @SerializedName("start_hour")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(0)]
    #[Assert\LessThanOrEqual(23)]
    protected ?int $startHour = null;

    /**
     * Which hour of the end date to stop the report (inclusive). For example, with an end_date of &#39;2020-01-01&#39; and end_hour of &#39;15&#39;, the report will contain metrics up to &#39;2020-01-01 14:59:59&#39;. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
     *
     * @var int|null
     * @SerializedName("end_hour")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(0)]
    #[Assert\LessThanOrEqual(23)]
    protected ?int $endHour = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->startDate = array_key_exists('startDate', $data) ? $data['startDate'] : $this->startDate;
            $this->endDate = array_key_exists('endDate', $data) ? $data['endDate'] : $this->endDate;
            $this->granularity = array_key_exists('granularity', $data) ? $data['granularity'] : $this->granularity;
            $this->clickWindowDays = array_key_exists('clickWindowDays', $data) ? $data['clickWindowDays'] : $this->clickWindowDays;
            $this->engagementWindowDays = array_key_exists('engagementWindowDays', $data) ? $data['engagementWindowDays'] : $this->engagementWindowDays;
            $this->viewWindowDays = array_key_exists('viewWindowDays', $data) ? $data['viewWindowDays'] : $this->viewWindowDays;
            $this->conversionReportTime = array_key_exists('conversionReportTime', $data) ? $data['conversionReportTime'] : $this->conversionReportTime;
            $this->attributionTypes = array_key_exists('attributionTypes', $data) ? $data['attributionTypes'] : $this->attributionTypes;
            $this->campaignIds = array_key_exists('campaignIds', $data) ? $data['campaignIds'] : $this->campaignIds;
            $this->campaignStatuses = array_key_exists('campaignStatuses', $data) ? $data['campaignStatuses'] : $this->campaignStatuses;
            $this->campaignObjectiveTypes = array_key_exists('campaignObjectiveTypes', $data) ? $data['campaignObjectiveTypes'] : $this->campaignObjectiveTypes;
            $this->adGroupIds = array_key_exists('adGroupIds', $data) ? $data['adGroupIds'] : $this->adGroupIds;
            $this->adGroupStatuses = array_key_exists('adGroupStatuses', $data) ? $data['adGroupStatuses'] : $this->adGroupStatuses;
            $this->adIds = array_key_exists('adIds', $data) ? $data['adIds'] : $this->adIds;
            $this->adStatuses = array_key_exists('adStatuses', $data) ? $data['adStatuses'] : $this->adStatuses;
            $this->productGroupIds = array_key_exists('productGroupIds', $data) ? $data['productGroupIds'] : $this->productGroupIds;
            $this->productGroupStatuses = array_key_exists('productGroupStatuses', $data) ? $data['productGroupStatuses'] : $this->productGroupStatuses;
            $this->productItemIds = array_key_exists('productItemIds', $data) ? $data['productItemIds'] : $this->productItemIds;
            $this->targetingTypes = array_key_exists('targetingTypes', $data) ? $data['targetingTypes'] : $this->targetingTypes;
            $this->metricsFilters = array_key_exists('metricsFilters', $data) ? $data['metricsFilters'] : $this->metricsFilters;
            $this->columns = array_key_exists('columns', $data) ? $data['columns'] : $this->columns;
            $this->level = array_key_exists('level', $data) ? $data['level'] : $this->level;
            $this->reportFormat = array_key_exists('reportFormat', $data) ? $data['reportFormat'] : $this->reportFormat;
            $this->primarySort = array_key_exists('primarySort', $data) ? $data['primarySort'] : $this->primarySort;
            $this->startHour = array_key_exists('startHour', $data) ? $data['startHour'] : $this->startHour;
            $this->endHour = array_key_exists('endHour', $data) ? $data['endHour'] : $this->endHour;
        }
    }

    /**
     * Gets startDate.
     *
     * @return string|null
     */
    public function getStartDate(): ?string
    {
        return $this->startDate;
    }

    /**
    * Sets startDate.
    *
    * @param string|null $startDate  Metric report start date (UTC). Format: YYYY-MM-DD
    *
    * @return $this
    */
    public function setStartDate(?string $startDate): self
    {
        $this->startDate = $startDate;

        return $this;
    }




    /**
     * Gets endDate.
     *
     * @return string|null
     */
    public function getEndDate(): ?string
    {
        return $this->endDate;
    }

    /**
    * Sets endDate.
    *
    * @param string|null $endDate  Metric report end date (UTC). Format: YYYY-MM-DD
    *
    * @return $this
    */
    public function setEndDate(?string $endDate): self
    {
        $this->endDate = $endDate;

        return $this;
    }




    /**
     * Gets granularity.
     *
     * @return Granularity|null
     */
    public function getGranularity(): ?Granularity
    {
        return $this->granularity;
    }

    /**
    * Sets granularity.
    *
    * @param Granularity|null $granularity  TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    *
    * @return $this
    */
    public function setGranularity(?Granularity $granularity): self
    {
        $this->granularity = $granularity;

        return $this;
    }

    /**
    * Gets granularity for serialization.
    *
    * @return string|null
    */
    public function getSerializedGranularity(): string|null
    {
        return !is_null($this->granularity?->value) ? (string) $this->granularity->value : null;
    }

    /**
    * Sets granularity.
    *
    * @param string|Granularity|null $granularity  TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    *
    * @return $this
    */
    public function setDeserializedGranularity(string|Granularity|null $granularity): self
    {
        if (is_string($granularity)) {
            $granularity = Granularity::tryFrom($granularity);
        }

        $this->granularity = $granularity;

        return $this;
    }



    /**
     * Gets clickWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getClickWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->clickWindowDays;
    }

    /**
    * Sets clickWindowDays.
    *
    * @param ConversionAttributionWindowDays|null $clickWindowDays  Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    *
    * @return $this
    */
    public function setClickWindowDays(?ConversionAttributionWindowDays $clickWindowDays = null): self
    {
        $this->clickWindowDays = $clickWindowDays;

        return $this;
    }

    /**
    * Gets clickWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedClickWindowDays(): string|null
    {
        return !is_null($this->clickWindowDays?->value) ? (string) $this->clickWindowDays->value : null;
    }

    /**
    * Sets clickWindowDays.
    *
    * @param string|ConversionAttributionWindowDays|null $clickWindowDays  Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    *
    * @return $this
    */
    public function setDeserializedClickWindowDays(string|ConversionAttributionWindowDays|null $clickWindowDays = null): self
    {
        if (is_string($clickWindowDays)) {
            $clickWindowDays = ConversionAttributionWindowDays::tryFrom($clickWindowDays);
        }

        $this->clickWindowDays = $clickWindowDays;

        return $this;
    }



    /**
     * Gets engagementWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getEngagementWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->engagementWindowDays;
    }

    /**
    * Sets engagementWindowDays.
    *
    * @param ConversionAttributionWindowDays|null $engagementWindowDays  Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    *
    * @return $this
    */
    public function setEngagementWindowDays(?ConversionAttributionWindowDays $engagementWindowDays = null): self
    {
        $this->engagementWindowDays = $engagementWindowDays;

        return $this;
    }

    /**
    * Gets engagementWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedEngagementWindowDays(): string|null
    {
        return !is_null($this->engagementWindowDays?->value) ? (string) $this->engagementWindowDays->value : null;
    }

    /**
    * Sets engagementWindowDays.
    *
    * @param string|ConversionAttributionWindowDays|null $engagementWindowDays  Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    *
    * @return $this
    */
    public function setDeserializedEngagementWindowDays(string|ConversionAttributionWindowDays|null $engagementWindowDays = null): self
    {
        if (is_string($engagementWindowDays)) {
            $engagementWindowDays = ConversionAttributionWindowDays::tryFrom($engagementWindowDays);
        }

        $this->engagementWindowDays = $engagementWindowDays;

        return $this;
    }



    /**
     * Gets viewWindowDays.
     *
     * @return ConversionAttributionWindowDays|null
     */
    public function getViewWindowDays(): ?ConversionAttributionWindowDays
    {
        return $this->viewWindowDays;
    }

    /**
    * Sets viewWindowDays.
    *
    * @param ConversionAttributionWindowDays|null $viewWindowDays  Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    *
    * @return $this
    */
    public function setViewWindowDays(?ConversionAttributionWindowDays $viewWindowDays = null): self
    {
        $this->viewWindowDays = $viewWindowDays;

        return $this;
    }

    /**
    * Gets viewWindowDays for serialization.
    *
    * @return string|null
    */
    public function getSerializedViewWindowDays(): string|null
    {
        return !is_null($this->viewWindowDays?->value) ? (string) $this->viewWindowDays->value : null;
    }

    /**
    * Sets viewWindowDays.
    *
    * @param string|ConversionAttributionWindowDays|null $viewWindowDays  Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    *
    * @return $this
    */
    public function setDeserializedViewWindowDays(string|ConversionAttributionWindowDays|null $viewWindowDays = null): self
    {
        if (is_string($viewWindowDays)) {
            $viewWindowDays = ConversionAttributionWindowDays::tryFrom($viewWindowDays);
        }

        $this->viewWindowDays = $viewWindowDays;

        return $this;
    }



    /**
     * Gets conversionReportTime.
     *
     * @return ConversionReportTimeType|null
     */
    public function getConversionReportTime(): ?ConversionReportTimeType
    {
        return $this->conversionReportTime;
    }

    /**
    * Sets conversionReportTime.
    *
    * @param ConversionReportTimeType|null $conversionReportTime  The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    *
    * @return $this
    */
    public function setConversionReportTime(?ConversionReportTimeType $conversionReportTime = null): self
    {
        $this->conversionReportTime = $conversionReportTime;

        return $this;
    }

    /**
    * Gets conversionReportTime for serialization.
    *
    * @return string|null
    */
    public function getSerializedConversionReportTime(): string|null
    {
        return !is_null($this->conversionReportTime?->value) ? (string) $this->conversionReportTime->value : null;
    }

    /**
    * Sets conversionReportTime.
    *
    * @param string|ConversionReportTimeType|null $conversionReportTime  The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
    *
    * @return $this
    */
    public function setDeserializedConversionReportTime(string|ConversionReportTimeType|null $conversionReportTime = null): self
    {
        if (is_string($conversionReportTime)) {
            $conversionReportTime = ConversionReportTimeType::tryFrom($conversionReportTime);
        }

        $this->conversionReportTime = $conversionReportTime;

        return $this;
    }



    /**
     * Gets attributionTypes.
     *
     * @return ConversionReportAttributionType[]|null
     */
    public function getAttributionTypes(): ?array
    {
        return $this->attributionTypes;
    }

    /**
    * Sets attributionTypes.
    *
    * @param ConversionReportAttributionType[]|null $attributionTypes  List of types of attribution for the conversion report
    *
    * @return $this
    */
    public function setAttributionTypes(?array $attributionTypes = null): self
    {
        $this->attributionTypes = $attributionTypes;

        return $this;
    }


    /**
    * Gets attributionTypes for serialization.
    *
    * @return array
    */
    public function getSerializedAttributionTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->attributionTypes ?? []
        );
    }

    /**
    * Sets attributionTypes.
    *
    * @param ?array $attributionTypes
    *
    * @return $this
    */
    public function setDeserializedAttributionTypes(?array $attributionTypes = []): self
    {
        $this->attributionTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ConversionReportAttributionType::tryFrom($value);
                }

                return $value;
            },
            $attributionTypes ?? []
        );

        return $this;
    }


    /**
     * Gets campaignIds.
     *
     * @return string[]|null
     */
    public function getCampaignIds(): ?array
    {
        return $this->campaignIds;
    }

    /**
    * Sets campaignIds.
    *
    * @param string[]|null $campaignIds  List of campaign ids
    *
    * @return $this
    */
    public function setCampaignIds(?array $campaignIds = null): self
    {
        $this->campaignIds = $campaignIds;

        return $this;
    }




    /**
     * Gets campaignStatuses.
     *
     * @return CampaignSummaryStatus[]|null
     */
    public function getCampaignStatuses(): ?array
    {
        return $this->campaignStatuses;
    }

    /**
    * Sets campaignStatuses.
    *
    * @param CampaignSummaryStatus[]|null $campaignStatuses  List of status values for filtering
    *
    * @return $this
    */
    public function setCampaignStatuses(?array $campaignStatuses = null): self
    {
        $this->campaignStatuses = $campaignStatuses;

        return $this;
    }


    /**
    * Gets campaignStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedCampaignStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->campaignStatuses ?? []
        );
    }

    /**
    * Sets campaignStatuses.
    *
    * @param ?array $campaignStatuses
    *
    * @return $this
    */
    public function setDeserializedCampaignStatuses(?array $campaignStatuses = []): self
    {
        $this->campaignStatuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = CampaignSummaryStatus::tryFrom($value);
                }

                return $value;
            },
            $campaignStatuses ?? []
        );

        return $this;
    }


    /**
     * Gets campaignObjectiveTypes.
     *
     * @return ObjectiveType[]|null
     */
    public function getCampaignObjectiveTypes(): ?array
    {
        return $this->campaignObjectiveTypes;
    }

    /**
    * Sets campaignObjectiveTypes.
    *
    * @param ObjectiveType[]|null $campaignObjectiveTypes  List of values for filtering. [\"WEB_SESSIONS\"] in BETA.
    *
    * @return $this
    */
    public function setCampaignObjectiveTypes(?array $campaignObjectiveTypes = null): self
    {
        $this->campaignObjectiveTypes = $campaignObjectiveTypes;

        return $this;
    }


    /**
    * Gets campaignObjectiveTypes for serialization.
    *
    * @return array
    */
    public function getSerializedCampaignObjectiveTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->campaignObjectiveTypes ?? []
        );
    }

    /**
    * Sets campaignObjectiveTypes.
    *
    * @param ?array $campaignObjectiveTypes
    *
    * @return $this
    */
    public function setDeserializedCampaignObjectiveTypes(?array $campaignObjectiveTypes = []): self
    {
        $this->campaignObjectiveTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ObjectiveType::tryFrom($value);
                }

                return $value;
            },
            $campaignObjectiveTypes ?? []
        );

        return $this;
    }


    /**
     * Gets adGroupIds.
     *
     * @return string[]|null
     */
    public function getAdGroupIds(): ?array
    {
        return $this->adGroupIds;
    }

    /**
    * Sets adGroupIds.
    *
    * @param string[]|null $adGroupIds  List of ad group ids
    *
    * @return $this
    */
    public function setAdGroupIds(?array $adGroupIds = null): self
    {
        $this->adGroupIds = $adGroupIds;

        return $this;
    }




    /**
     * Gets adGroupStatuses.
     *
     * @return AdGroupSummaryStatus[]|null
     */
    public function getAdGroupStatuses(): ?array
    {
        return $this->adGroupStatuses;
    }

    /**
    * Sets adGroupStatuses.
    *
    * @param AdGroupSummaryStatus[]|null $adGroupStatuses  List of values for filtering
    *
    * @return $this
    */
    public function setAdGroupStatuses(?array $adGroupStatuses = null): self
    {
        $this->adGroupStatuses = $adGroupStatuses;

        return $this;
    }


    /**
    * Gets adGroupStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedAdGroupStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->adGroupStatuses ?? []
        );
    }

    /**
    * Sets adGroupStatuses.
    *
    * @param ?array $adGroupStatuses
    *
    * @return $this
    */
    public function setDeserializedAdGroupStatuses(?array $adGroupStatuses = []): self
    {
        $this->adGroupStatuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = AdGroupSummaryStatus::tryFrom($value);
                }

                return $value;
            },
            $adGroupStatuses ?? []
        );

        return $this;
    }


    /**
     * Gets adIds.
     *
     * @return string[]|null
     */
    public function getAdIds(): ?array
    {
        return $this->adIds;
    }

    /**
    * Sets adIds.
    *
    * @param string[]|null $adIds  List of ad ids [This parameter is no supported for Product Item Level Reports]
    *
    * @return $this
    */
    public function setAdIds(?array $adIds = null): self
    {
        $this->adIds = $adIds;

        return $this;
    }




    /**
     * Gets adStatuses.
     *
     * @return PinPromotionSummaryStatus[]|null
     */
    public function getAdStatuses(): ?array
    {
        return $this->adStatuses;
    }

    /**
    * Sets adStatuses.
    *
    * @param PinPromotionSummaryStatus[]|null $adStatuses  List of values for filtering [This parameter is not supported for Product Item Level Reports]
    *
    * @return $this
    */
    public function setAdStatuses(?array $adStatuses = null): self
    {
        $this->adStatuses = $adStatuses;

        return $this;
    }


    /**
    * Gets adStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedAdStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->adStatuses ?? []
        );
    }

    /**
    * Sets adStatuses.
    *
    * @param ?array $adStatuses
    *
    * @return $this
    */
    public function setDeserializedAdStatuses(?array $adStatuses = []): self
    {
        $this->adStatuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = PinPromotionSummaryStatus::tryFrom($value);
                }

                return $value;
            },
            $adStatuses ?? []
        );

        return $this;
    }


    /**
     * Gets productGroupIds.
     *
     * @return string[]|null
     */
    public function getProductGroupIds(): ?array
    {
        return $this->productGroupIds;
    }

    /**
    * Sets productGroupIds.
    *
    * @param string[]|null $productGroupIds  List of product group ids
    *
    * @return $this
    */
    public function setProductGroupIds(?array $productGroupIds = null): self
    {
        $this->productGroupIds = $productGroupIds;

        return $this;
    }




    /**
     * Gets productGroupStatuses.
     *
     * @return ProductGroupSummaryStatus[]|null
     */
    public function getProductGroupStatuses(): ?array
    {
        return $this->productGroupStatuses;
    }

    /**
    * Sets productGroupStatuses.
    *
    * @param ProductGroupSummaryStatus[]|null $productGroupStatuses  List of values for filtering
    *
    * @return $this
    */
    public function setProductGroupStatuses(?array $productGroupStatuses = null): self
    {
        $this->productGroupStatuses = $productGroupStatuses;

        return $this;
    }


    /**
    * Gets productGroupStatuses for serialization.
    *
    * @return array
    */
    public function getSerializedProductGroupStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->productGroupStatuses ?? []
        );
    }

    /**
    * Sets productGroupStatuses.
    *
    * @param ?array $productGroupStatuses
    *
    * @return $this
    */
    public function setDeserializedProductGroupStatuses(?array $productGroupStatuses = []): self
    {
        $this->productGroupStatuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ProductGroupSummaryStatus::tryFrom($value);
                }

                return $value;
            },
            $productGroupStatuses ?? []
        );

        return $this;
    }


    /**
     * Gets productItemIds.
     *
     * @return string[]|null
     */
    public function getProductItemIds(): ?array
    {
        return $this->productItemIds;
    }

    /**
    * Sets productItemIds.
    *
    * @param string[]|null $productItemIds  List of product item ids
    *
    * @return $this
    */
    public function setProductItemIds(?array $productItemIds = null): self
    {
        $this->productItemIds = $productItemIds;

        return $this;
    }




    /**
     * Gets targetingTypes.
     *
     * @return AdsAnalyticsTargetingType[]|null
     */
    public function getTargetingTypes(): ?array
    {
        return $this->targetingTypes;
    }

    /**
    * Sets targetingTypes.
    *
    * @param AdsAnalyticsTargetingType[]|null $targetingTypes  List of targeting types. Requires `level` to be a value ending in `_TARGETING`. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.
    *
    * @return $this
    */
    public function setTargetingTypes(?array $targetingTypes = null): self
    {
        $this->targetingTypes = $targetingTypes;

        return $this;
    }


    /**
    * Gets targetingTypes for serialization.
    *
    * @return array
    */
    public function getSerializedTargetingTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->targetingTypes ?? []
        );
    }

    /**
    * Sets targetingTypes.
    *
    * @param ?array $targetingTypes
    *
    * @return $this
    */
    public function setDeserializedTargetingTypes(?array $targetingTypes = []): self
    {
        $this->targetingTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = AdsAnalyticsTargetingType::tryFrom($value);
                }

                return $value;
            },
            $targetingTypes ?? []
        );

        return $this;
    }


    /**
     * Gets metricsFilters.
     *
     * @return AdsAnalyticsMetricsFilter[]|null
     */
    public function getMetricsFilters(): ?array
    {
        return $this->metricsFilters;
    }

    /**
    * Sets metricsFilters.
    *
    * @param AdsAnalyticsMetricsFilter[]|null $metricsFilters  List of metrics filters
    *
    * @return $this
    */
    public function setMetricsFilters(?array $metricsFilters = null): self
    {
        $this->metricsFilters = $metricsFilters;

        return $this;
    }




    /**
     * Gets columns.
     *
     * @return ReportingColumnAsync[]|null
     */
    public function getColumns(): ?array
    {
        return $this->columns;
    }

    /**
    * Sets columns.
    *
    * @param ReportingColumnAsync[]|null $columns  Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
    *
    * @return $this
    */
    public function setColumns(?array $columns): self
    {
        $this->columns = $columns;

        return $this;
    }


    /**
    * Gets columns for serialization.
    *
    * @return array
    */
    public function getSerializedColumns(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->columns ?? []
        );
    }

    /**
    * Sets columns.
    *
    * @param ?array $columns
    *
    * @return $this
    */
    public function setDeserializedColumns(?array $columns = []): self
    {
        $this->columns = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ReportingColumnAsync::tryFrom($value);
                }

                return $value;
            },
            $columns ?? []
        );

        return $this;
    }


    /**
     * Gets level.
     *
     * @return MetricsReportingLevel|null
     */
    public function getLevel(): ?MetricsReportingLevel
    {
        return $this->level;
    }

    /**
    * Sets level.
    *
    * @param MetricsReportingLevel|null $level  Level of the report
    *
    * @return $this
    */
    public function setLevel(?MetricsReportingLevel $level): self
    {
        $this->level = $level;

        return $this;
    }

    /**
    * Gets level for serialization.
    *
    * @return string|null
    */
    public function getSerializedLevel(): string|null
    {
        return !is_null($this->level?->value) ? (string) $this->level->value : null;
    }

    /**
    * Sets level.
    *
    * @param string|MetricsReportingLevel|null $level  Level of the report
    *
    * @return $this
    */
    public function setDeserializedLevel(string|MetricsReportingLevel|null $level): self
    {
        if (is_string($level)) {
            $level = MetricsReportingLevel::tryFrom($level);
        }

        $this->level = $level;

        return $this;
    }



    /**
     * Gets reportFormat.
     *
     * @return DataOutputFormat|null
     */
    public function getReportFormat(): ?DataOutputFormat
    {
        return $this->reportFormat;
    }

    /**
    * Sets reportFormat.
    *
    * @param DataOutputFormat|null $reportFormat  Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    *
    * @return $this
    */
    public function setReportFormat(?DataOutputFormat $reportFormat = null): self
    {
        $this->reportFormat = $reportFormat;

        return $this;
    }

    /**
    * Gets reportFormat for serialization.
    *
    * @return string|null
    */
    public function getSerializedReportFormat(): string|null
    {
        return !is_null($this->reportFormat?->value) ? (string) $this->reportFormat->value : null;
    }

    /**
    * Sets reportFormat.
    *
    * @param string|DataOutputFormat|null $reportFormat  Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
    *
    * @return $this
    */
    public function setDeserializedReportFormat(string|DataOutputFormat|null $reportFormat = null): self
    {
        if (is_string($reportFormat)) {
            $reportFormat = DataOutputFormat::tryFrom($reportFormat);
        }

        $this->reportFormat = $reportFormat;

        return $this;
    }



    /**
     * Gets primarySort.
     *
     * @return string|null
     */
    public function getPrimarySort(): ?string
    {
        return $this->primarySort;
    }

    /**
    * Sets primarySort.
    *
    * @param string|null $primarySort  Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
    *
    * @return $this
    */
    public function setPrimarySort(?string $primarySort = null): self
    {
        $this->primarySort = $primarySort;

        return $this;
    }




    /**
     * Gets startHour.
     *
     * @return int|null
     */
    public function getStartHour(): ?int
    {
        return $this->startHour;
    }

    /**
    * Sets startHour.
    *
    * @param int|null $startHour  Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
    *
    * @return $this
    */
    public function setStartHour(?int $startHour = null): self
    {
        $this->startHour = $startHour;

        return $this;
    }




    /**
     * Gets endHour.
     *
     * @return int|null
     */
    public function getEndHour(): ?int
    {
        return $this->endHour;
    }

    /**
    * Sets endHour.
    *
    * @param int|null $endHour  Which hour of the end date to stop the report (inclusive). For example, with an end_date of '2020-01-01' and end_hour of '15', the report will contain metrics up to '2020-01-01 14:59:59'. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
    *
    * @return $this
    */
    public function setEndHour(?int $endHour = null): self
    {
        $this->endHour = $endHour;

        return $this;
    }



}


