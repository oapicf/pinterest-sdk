<?php
/**
 * ConversionApiResponse
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ConversionApiResponse model.
 *
 * Schema describing the object in the response, which contains information about the events that were received and processed.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ConversionApiResponse 
{
        /**
     * Total number of events received in the request.
     *
     * @var int|null
     * @SerializedName("num_events_received")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $numEventsReceived = null;

    /**
     * Number of events that were successfully processed from the events.
     *
     * @var int|null
     * @SerializedName("num_events_processed")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $numEventsProcessed = null;

    /**
     * Specific messages for each event received. The order will match the order in which the events were received in the request.
     *
     * @var ConversionApiResponseEventsInner[]|null
     * @SerializedName("events")
     * @Type("array<OpenAPI\Server\Model\ConversionApiResponseEventsInner>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ConversionApiResponseEventsInner"),
    ])]
    protected ?array $events = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->numEventsReceived = array_key_exists('numEventsReceived', $data) ? $data['numEventsReceived'] : $this->numEventsReceived;
            $this->numEventsProcessed = array_key_exists('numEventsProcessed', $data) ? $data['numEventsProcessed'] : $this->numEventsProcessed;
            $this->events = array_key_exists('events', $data) ? $data['events'] : $this->events;
        }
    }

    /**
     * Gets numEventsReceived.
     *
     * @return int|null
     */
    public function getNumEventsReceived(): ?int
    {
        return $this->numEventsReceived;
    }

    /**
    * Sets numEventsReceived.
    *
    * @param int|null $numEventsReceived  Total number of events received in the request.
    *
    * @return $this
    */
    public function setNumEventsReceived(?int $numEventsReceived): self
    {
        $this->numEventsReceived = $numEventsReceived;

        return $this;
    }




    /**
     * Gets numEventsProcessed.
     *
     * @return int|null
     */
    public function getNumEventsProcessed(): ?int
    {
        return $this->numEventsProcessed;
    }

    /**
    * Sets numEventsProcessed.
    *
    * @param int|null $numEventsProcessed  Number of events that were successfully processed from the events.
    *
    * @return $this
    */
    public function setNumEventsProcessed(?int $numEventsProcessed): self
    {
        $this->numEventsProcessed = $numEventsProcessed;

        return $this;
    }




    /**
     * Gets events.
     *
     * @return ConversionApiResponseEventsInner[]|null
     */
    public function getEvents(): ?array
    {
        return $this->events;
    }

    /**
    * Sets events.
    *
    * @param ConversionApiResponseEventsInner[]|null $events  Specific messages for each event received. The order will match the order in which the events were received in the request.
    *
    * @return $this
    */
    public function setEvents(?array $events): self
    {
        $this->events = $events;

        return $this;
    }



}


