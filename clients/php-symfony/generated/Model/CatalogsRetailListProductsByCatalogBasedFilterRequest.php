<?php
/**
 * CatalogsRetailListProductsByCatalogBasedFilterRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsRetailListProductsByCatalogBasedFilterRequest model.
 *
 * Request object to list products for a given retail catalog_id and product group filter.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsRetailListProductsByCatalogBasedFilterRequest 
{
        /**
     * Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
     *
     * @var string|null
     * @SerializedName("catalog_type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["RETAIL"])]
    #[Assert\Type("string")]
    protected ?string $catalogType = null;

    /**
     * Catalog id pertaining to the retail product group.
     *
     * @var string|null
     * @SerializedName("catalog_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $catalogId = null;

    /**
     * @var CatalogsProductGroupFilters|null
     * @SerializedName("filters")
     * @Type("OpenAPI\Server\Model\CatalogsProductGroupFilters")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\CatalogsProductGroupFilters")]
    protected ?CatalogsProductGroupFilters $filters = null;

    /**
     * @var Country|null
     * @SerializedName("country")
    * @Accessor(getter="getSerializedCountry", setter="setDeserializedCountry")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?Country $country = null;

    /**
     * @var CatalogsLocale|null
     * @SerializedName("locale")
    * @Accessor(getter="getSerializedLocale", setter="setDeserializedLocale")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?CatalogsLocale $locale = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->catalogType = array_key_exists('catalogType', $data) ? $data['catalogType'] : $this->catalogType;
            $this->catalogId = array_key_exists('catalogId', $data) ? $data['catalogId'] : $this->catalogId;
            $this->filters = array_key_exists('filters', $data) ? $data['filters'] : $this->filters;
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->locale = array_key_exists('locale', $data) ? $data['locale'] : $this->locale;
        }
    }

    /**
     * Gets catalogType.
     *
     * @return string|null
     */
    public function getCatalogType(): ?string
    {
        return $this->catalogType;
    }

    /**
    * Sets catalogType.
    *
    * @param string|null $catalogType  Retail catalog based product group is available only for selected partners at the moment. If you are not eligible, please use feed based one.
    *
    * @return $this
    */
    public function setCatalogType(?string $catalogType): self
    {
        $this->catalogType = $catalogType;

        return $this;
    }




    /**
     * Gets catalogId.
     *
     * @return string|null
     */
    public function getCatalogId(): ?string
    {
        return $this->catalogId;
    }

    /**
    * Sets catalogId.
    *
    * @param string|null $catalogId  Catalog id pertaining to the retail product group.
    *
    * @return $this
    */
    public function setCatalogId(?string $catalogId): self
    {
        $this->catalogId = $catalogId;

        return $this;
    }




    /**
     * Gets filters.
     *
     * @return CatalogsProductGroupFilters|null
     */
    public function getFilters(): ?CatalogsProductGroupFilters
    {
        return $this->filters;
    }

    /**
    * Sets filters.
    *
    * @param CatalogsProductGroupFilters|null $filters
    *
    * @return $this
    */
    public function setFilters(?CatalogsProductGroupFilters $filters): self
    {
        $this->filters = $filters;

        return $this;
    }




    /**
     * Gets country.
     *
     * @return Country|null
     */
    public function getCountry(): ?Country
    {
        return $this->country;
    }

    /**
    * Sets country.
    *
    * @param Country|null $country
    *
    * @return $this
    */
    public function setCountry(?Country $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
    * Gets country for serialization.
    *
    * @return string|null
    */
    public function getSerializedCountry(): string|null
    {
        return !is_null($this->country?->value) ? (string) $this->country->value : null;
    }

    /**
    * Sets country.
    *
    * @param string|Country|null $country
    *
    * @return $this
    */
    public function setDeserializedCountry(string|Country|null $country): self
    {
        if (is_string($country)) {
            $country = Country::tryFrom($country);
        }

        $this->country = $country;

        return $this;
    }



    /**
     * Gets locale.
     *
     * @return CatalogsLocale|null
     */
    public function getLocale(): ?CatalogsLocale
    {
        return $this->locale;
    }

    /**
    * Sets locale.
    *
    * @param CatalogsLocale|null $locale
    *
    * @return $this
    */
    public function setLocale(?CatalogsLocale $locale): self
    {
        $this->locale = $locale;

        return $this;
    }

    /**
    * Gets locale for serialization.
    *
    * @return string|null
    */
    public function getSerializedLocale(): string|null
    {
        return !is_null($this->locale?->value) ? (string) $this->locale->value : null;
    }

    /**
    * Sets locale.
    *
    * @param string|CatalogsLocale|null $locale
    *
    * @return $this
    */
    public function setDeserializedLocale(string|CatalogsLocale|null $locale): self
    {
        if (is_string($locale)) {
            $locale = CatalogsLocale::tryFrom($locale);
        }

        $this->locale = $locale;

        return $this;
    }


}


