<?php
/**
 * IntegrationLogClientError
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the IntegrationLogClientError model.
 *
 * System error details included in the log sent by the client.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class IntegrationLogClientError 
{
        /**
     * Original cause of the error.
     *
     * @var string|null
     * @SerializedName("cause")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 512)]
    protected ?string $cause = null;

    /**
     * Column number in the line of the file that raised the error.
     *
     * @var int|null
     * @SerializedName("column_number")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $columnNumber = null;

    /**
     * Filename where the error happened.
     *
     * @var string|null
     * @SerializedName("file_name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $fileName = null;

    /**
     * Line number where the error happened.
     *
     * @var int|null
     * @SerializedName("line_number")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lineNumber = null;

    /**
     * Human-readable description of the error.
     *
     * @var string|null
     * @SerializedName("message")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 512)]
    protected ?string $message = null;

    /**
     * More detail about the message.
     *
     * @var string|null
     * @SerializedName("message_detail")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 1024)]
    protected ?string $messageDetail = null;

    /**
     * Filename where the error happened.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $name = null;

    /**
     * Integer that specifies the error code.
     *
     * @var int|null
     * @SerializedName("number")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $number = null;

    /**
     * Stack trace of where the error happened.
     *
     * @var string|null
     * @SerializedName("stack_trace")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $stackTrace = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->cause = array_key_exists('cause', $data) ? $data['cause'] : $this->cause;
            $this->columnNumber = array_key_exists('columnNumber', $data) ? $data['columnNumber'] : $this->columnNumber;
            $this->fileName = array_key_exists('fileName', $data) ? $data['fileName'] : $this->fileName;
            $this->lineNumber = array_key_exists('lineNumber', $data) ? $data['lineNumber'] : $this->lineNumber;
            $this->message = array_key_exists('message', $data) ? $data['message'] : $this->message;
            $this->messageDetail = array_key_exists('messageDetail', $data) ? $data['messageDetail'] : $this->messageDetail;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->number = array_key_exists('number', $data) ? $data['number'] : $this->number;
            $this->stackTrace = array_key_exists('stackTrace', $data) ? $data['stackTrace'] : $this->stackTrace;
        }
    }

    /**
     * Gets cause.
     *
     * @return string|null
     */
    public function getCause(): ?string
    {
        return $this->cause;
    }

    /**
    * Sets cause.
    *
    * @param string|null $cause  Original cause of the error.
    *
    * @return $this
    */
    public function setCause(?string $cause = null): self
    {
        $this->cause = $cause;

        return $this;
    }




    /**
     * Gets columnNumber.
     *
     * @return int|null
     */
    public function getColumnNumber(): ?int
    {
        return $this->columnNumber;
    }

    /**
    * Sets columnNumber.
    *
    * @param int|null $columnNumber  Column number in the line of the file that raised the error.
    *
    * @return $this
    */
    public function setColumnNumber(?int $columnNumber = null): self
    {
        $this->columnNumber = $columnNumber;

        return $this;
    }




    /**
     * Gets fileName.
     *
     * @return string|null
     */
    public function getFileName(): ?string
    {
        return $this->fileName;
    }

    /**
    * Sets fileName.
    *
    * @param string|null $fileName  Filename where the error happened.
    *
    * @return $this
    */
    public function setFileName(?string $fileName = null): self
    {
        $this->fileName = $fileName;

        return $this;
    }




    /**
     * Gets lineNumber.
     *
     * @return int|null
     */
    public function getLineNumber(): ?int
    {
        return $this->lineNumber;
    }

    /**
    * Sets lineNumber.
    *
    * @param int|null $lineNumber  Line number where the error happened.
    *
    * @return $this
    */
    public function setLineNumber(?int $lineNumber = null): self
    {
        $this->lineNumber = $lineNumber;

        return $this;
    }




    /**
     * Gets message.
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
    * Sets message.
    *
    * @param string|null $message  Human-readable description of the error.
    *
    * @return $this
    */
    public function setMessage(?string $message = null): self
    {
        $this->message = $message;

        return $this;
    }




    /**
     * Gets messageDetail.
     *
     * @return string|null
     */
    public function getMessageDetail(): ?string
    {
        return $this->messageDetail;
    }

    /**
    * Sets messageDetail.
    *
    * @param string|null $messageDetail  More detail about the message.
    *
    * @return $this
    */
    public function setMessageDetail(?string $messageDetail = null): self
    {
        $this->messageDetail = $messageDetail;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Filename where the error happened.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets number.
     *
     * @return int|null
     */
    public function getNumber(): ?int
    {
        return $this->number;
    }

    /**
    * Sets number.
    *
    * @param int|null $number  Integer that specifies the error code.
    *
    * @return $this
    */
    public function setNumber(?int $number = null): self
    {
        $this->number = $number;

        return $this;
    }




    /**
     * Gets stackTrace.
     *
     * @return string|null
     */
    public function getStackTrace(): ?string
    {
        return $this->stackTrace;
    }

    /**
    * Sets stackTrace.
    *
    * @param string|null $stackTrace  Stack trace of where the error happened.
    *
    * @return $this
    */
    public function setStackTrace(?string $stackTrace = null): self
    {
        $this->stackTrace = $stackTrace;

        return $this;
    }



}


