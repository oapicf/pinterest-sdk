<?php
/**
 * CampaignCreateCommon
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CampaignCreateCommon model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CampaignCreateCommon 
{
        /**
     * Campaign&#39;s Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
     *
     * @var string|null
     * @SerializedName("ad_account_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $adAccountId = null;

    /**
     * Campaign name.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var EntityStatus|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?EntityStatus $status = null;

    /**
     * Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \&quot;daily_spend_cap\&quot; cannot be set at the same time.
     *
     * @var int|null
     * @SerializedName("lifetime_spend_cap")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lifetimeSpendCap = null;

    /**
     * Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \&quot;lifetime_spend_cap\&quot; cannot be set at the same time.
     *
     * @var int|null
     * @SerializedName("daily_spend_cap")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $dailySpendCap = null;

    /**
     * Order line ID that appears on the invoice.
     *
     * @var string|null
     * @SerializedName("order_line_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $orderLineId = null;

    /**
     * @var TrackingUrls|null
     * @SerializedName("tracking_urls")
     * @Type("OpenAPI\Server\Model\TrackingUrls")
    */
    #[Assert\Type("OpenAPI\Server\Model\TrackingUrls")]
    protected ?TrackingUrls $trackingUrls = null;

    /**
     * Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     *
     * @var int|null
     * @SerializedName("start_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $startTime = null;

    /**
     * Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
     *
     * @var int|null
     * @SerializedName("end_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $endTime = null;

    /**
     * Determine if a campaign has flexible daily budgets setup.
     *
     * @var bool|null
     * @SerializedName("is_flexible_daily_budgets")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $isFlexibleDailyBudgets = null;

    /**
     * When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
     *
     * @var int|null
     * @SerializedName("default_ad_group_budget_in_micro_currency")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $defaultAdGroupBudgetInMicroCurrency = null;

    /**
     * Specifies whether the campaign was created in the automated campaign flow
     *
     * @var bool|null
     * @SerializedName("is_automated_campaign")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $isAutomatedCampaign = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->adAccountId = array_key_exists('adAccountId', $data) ? $data['adAccountId'] : $this->adAccountId;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->lifetimeSpendCap = array_key_exists('lifetimeSpendCap', $data) ? $data['lifetimeSpendCap'] : $this->lifetimeSpendCap;
            $this->dailySpendCap = array_key_exists('dailySpendCap', $data) ? $data['dailySpendCap'] : $this->dailySpendCap;
            $this->orderLineId = array_key_exists('orderLineId', $data) ? $data['orderLineId'] : $this->orderLineId;
            $this->trackingUrls = array_key_exists('trackingUrls', $data) ? $data['trackingUrls'] : $this->trackingUrls;
            $this->startTime = array_key_exists('startTime', $data) ? $data['startTime'] : $this->startTime;
            $this->endTime = array_key_exists('endTime', $data) ? $data['endTime'] : $this->endTime;
            $this->isFlexibleDailyBudgets = array_key_exists('isFlexibleDailyBudgets', $data) ? $data['isFlexibleDailyBudgets'] : $this->isFlexibleDailyBudgets;
            $this->defaultAdGroupBudgetInMicroCurrency = array_key_exists('defaultAdGroupBudgetInMicroCurrency', $data) ? $data['defaultAdGroupBudgetInMicroCurrency'] : $this->defaultAdGroupBudgetInMicroCurrency;
            $this->isAutomatedCampaign = array_key_exists('isAutomatedCampaign', $data) ? $data['isAutomatedCampaign'] : $this->isAutomatedCampaign;
        }
    }

    /**
     * Gets adAccountId.
     *
     * @return string|null
     */
    public function getAdAccountId(): ?string
    {
        return $this->adAccountId;
    }

    /**
    * Sets adAccountId.
    *
    * @param string|null $adAccountId  Campaign's Advertiser ID. If you want to create a campaign in a Business Account shared account you need to specify the Business Access advertiser ID in both the query path param as well as the request body schema.
    *
    * @return $this
    */
    public function setAdAccountId(?string $adAccountId = null): self
    {
        $this->adAccountId = $adAccountId;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Campaign name.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return EntityStatus|null
     */
    public function getStatus(): ?EntityStatus
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param EntityStatus|null $status
    *
    * @return $this
    */
    public function setStatus(?EntityStatus $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return !is_null($this->status?->value) ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|EntityStatus|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|EntityStatus|null $status = null): self
    {
        if (is_string($status)) {
            $status = EntityStatus::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets lifetimeSpendCap.
     *
     * @return int|null
     */
    public function getLifetimeSpendCap(): ?int
    {
        return $this->lifetimeSpendCap;
    }

    /**
    * Sets lifetimeSpendCap.
    *
    * @param int|null $lifetimeSpendCap  Campaign total spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"daily_spend_cap\" cannot be set at the same time.
    *
    * @return $this
    */
    public function setLifetimeSpendCap(?int $lifetimeSpendCap = null): self
    {
        $this->lifetimeSpendCap = $lifetimeSpendCap;

        return $this;
    }




    /**
     * Gets dailySpendCap.
     *
     * @return int|null
     */
    public function getDailySpendCap(): ?int
    {
        return $this->dailySpendCap;
    }

    /**
    * Sets dailySpendCap.
    *
    * @param int|null $dailySpendCap  Campaign daily spending cap. Required for Campaign Budget Optimization (CBO) campaigns. This and \"lifetime_spend_cap\" cannot be set at the same time.
    *
    * @return $this
    */
    public function setDailySpendCap(?int $dailySpendCap = null): self
    {
        $this->dailySpendCap = $dailySpendCap;

        return $this;
    }




    /**
     * Gets orderLineId.
     *
     * @return string|null
     */
    public function getOrderLineId(): ?string
    {
        return $this->orderLineId;
    }

    /**
    * Sets orderLineId.
    *
    * @param string|null $orderLineId  Order line ID that appears on the invoice.
    *
    * @return $this
    */
    public function setOrderLineId(?string $orderLineId = null): self
    {
        $this->orderLineId = $orderLineId;

        return $this;
    }




    /**
     * Gets trackingUrls.
     *
     * @return TrackingUrls|null
     */
    public function getTrackingUrls(): ?TrackingUrls
    {
        return $this->trackingUrls;
    }

    /**
    * Sets trackingUrls.
    *
    * @param TrackingUrls|null $trackingUrls
    *
    * @return $this
    */
    public function setTrackingUrls(?TrackingUrls $trackingUrls = null): self
    {
        $this->trackingUrls = $trackingUrls;

        return $this;
    }




    /**
     * Gets startTime.
     *
     * @return int|null
     */
    public function getStartTime(): ?int
    {
        return $this->startTime;
    }

    /**
    * Sets startTime.
    *
    * @param int|null $startTime  Campaign start time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
    *
    * @return $this
    */
    public function setStartTime(?int $startTime = null): self
    {
        $this->startTime = $startTime;

        return $this;
    }




    /**
     * Gets endTime.
     *
     * @return int|null
     */
    public function getEndTime(): ?int
    {
        return $this->endTime;
    }

    /**
    * Sets endTime.
    *
    * @param int|null $endTime  Campaign end time. Unix timestamp in seconds. Only used for Campaign Budget Optimization (CBO) campaigns.
    *
    * @return $this
    */
    public function setEndTime(?int $endTime = null): self
    {
        $this->endTime = $endTime;

        return $this;
    }




    /**
     * Gets isFlexibleDailyBudgets.
     *
     * @return bool|null
     */
    public function isIsFlexibleDailyBudgets(): ?bool
    {
        return $this->isFlexibleDailyBudgets;
    }

    /**
    * Sets isFlexibleDailyBudgets.
    *
    * @param bool|null $isFlexibleDailyBudgets  Determine if a campaign has flexible daily budgets setup.
    *
    * @return $this
    */
    public function setIsFlexibleDailyBudgets(?bool $isFlexibleDailyBudgets = null): self
    {
        $this->isFlexibleDailyBudgets = $isFlexibleDailyBudgets;

        return $this;
    }




    /**
     * Gets defaultAdGroupBudgetInMicroCurrency.
     *
     * @return int|null
     */
    public function getDefaultAdGroupBudgetInMicroCurrency(): ?int
    {
        return $this->defaultAdGroupBudgetInMicroCurrency;
    }

    /**
    * Sets defaultAdGroupBudgetInMicroCurrency.
    *
    * @param int|null $defaultAdGroupBudgetInMicroCurrency  When transitioning from campaign budget optimization to non-campaign budget optimization, the default_ad_group_budget_in_micro_currency will propagate to each child ad groups daily budget. Unit is micro currency of the associated advertiser account.
    *
    * @return $this
    */
    public function setDefaultAdGroupBudgetInMicroCurrency(?int $defaultAdGroupBudgetInMicroCurrency = null): self
    {
        $this->defaultAdGroupBudgetInMicroCurrency = $defaultAdGroupBudgetInMicroCurrency;

        return $this;
    }




    /**
     * Gets isAutomatedCampaign.
     *
     * @return bool|null
     */
    public function isIsAutomatedCampaign(): ?bool
    {
        return $this->isAutomatedCampaign;
    }

    /**
    * Sets isAutomatedCampaign.
    *
    * @param bool|null $isAutomatedCampaign  Specifies whether the campaign was created in the automated campaign flow
    *
    * @return $this
    */
    public function setIsAutomatedCampaign(?bool $isAutomatedCampaign = null): self
    {
        $this->isAutomatedCampaign = $isAutomatedCampaign;

        return $this;
    }



}


