<?php
/**
 * CatalogsRetailProductGroup
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsRetailProductGroup model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsRetailProductGroup 
{
        /**
     * @var string|null
     * @SerializedName("catalog_type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["RETAIL"])]
    #[Assert\Type("string")]
    protected ?string $catalogType = null;

    /**
     * ID of the catalog product group.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $id = null;

    /**
     * Name of catalog product group
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $description = null;

    /**
     * @var CatalogsProductGroupFilters|null
     * @SerializedName("filters")
     * @Type("OpenAPI\Server\Model\CatalogsProductGroupFilters")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\CatalogsProductGroupFilters")]
    protected ?CatalogsProductGroupFilters $filters = null;

    /**
     * boolean indicator of whether the product group is being featured or not
     *
     * @var bool|null
     * @SerializedName("is_featured")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $isFeatured = null;

    /**
     * @var CatalogsProductGroupType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    protected ?CatalogsProductGroupType $type = null;

    /**
     * @var CatalogsProductGroupStatus|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?CatalogsProductGroupStatus $status = null;

    /**
     * Unix timestamp in seconds of when catalog product group was created.
     *
     * @var int|null
     * @SerializedName("created_at")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $createdAt = null;

    /**
     * Unix timestamp in seconds of last time catalog product group was updated.
     *
     * @var int|null
     * @SerializedName("updated_at")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $updatedAt = null;

    /**
     * Catalog id pertaining to the retail product group.
     *
     * @var string|null
     * @SerializedName("catalog_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $catalogId = null;

    /**
     * id of the catalogs feed belonging to this catalog product group
     *
     * @var string|null
     * @SerializedName("feed_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $feedId = null;

    /**
     * @var string|null
     * @SerializedName("country")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $country = null;

    /**
     * @var string|null
     * @SerializedName("locale")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $locale = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->catalogType = array_key_exists('catalogType', $data) ? $data['catalogType'] : $this->catalogType;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->filters = array_key_exists('filters', $data) ? $data['filters'] : $this->filters;
            $this->isFeatured = array_key_exists('isFeatured', $data) ? $data['isFeatured'] : $this->isFeatured;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->updatedAt = array_key_exists('updatedAt', $data) ? $data['updatedAt'] : $this->updatedAt;
            $this->catalogId = array_key_exists('catalogId', $data) ? $data['catalogId'] : $this->catalogId;
            $this->feedId = array_key_exists('feedId', $data) ? $data['feedId'] : $this->feedId;
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->locale = array_key_exists('locale', $data) ? $data['locale'] : $this->locale;
        }
    }

    /**
     * Gets catalogType.
     *
     * @return string|null
     */
    public function getCatalogType(): ?string
    {
        return $this->catalogType;
    }

    /**
    * Sets catalogType.
    *
    * @param string|null $catalogType
    *
    * @return $this
    */
    public function setCatalogType(?string $catalogType): self
    {
        $this->catalogType = $catalogType;

        return $this;
    }




    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  ID of the catalog product group.
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Name of catalog product group
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description
    *
    * @return $this
    */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets filters.
     *
     * @return CatalogsProductGroupFilters|null
     */
    public function getFilters(): ?CatalogsProductGroupFilters
    {
        return $this->filters;
    }

    /**
    * Sets filters.
    *
    * @param CatalogsProductGroupFilters|null $filters
    *
    * @return $this
    */
    public function setFilters(?CatalogsProductGroupFilters $filters): self
    {
        $this->filters = $filters;

        return $this;
    }




    /**
     * Gets isFeatured.
     *
     * @return bool|null
     */
    public function isIsFeatured(): ?bool
    {
        return $this->isFeatured;
    }

    /**
    * Sets isFeatured.
    *
    * @param bool|null $isFeatured  boolean indicator of whether the product group is being featured or not
    *
    * @return $this
    */
    public function setIsFeatured(?bool $isFeatured = null): self
    {
        $this->isFeatured = $isFeatured;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return CatalogsProductGroupType|null
     */
    public function getType(): ?CatalogsProductGroupType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param CatalogsProductGroupType|null $type
    *
    * @return $this
    */
    public function setType(?CatalogsProductGroupType $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return !is_null($this->type?->value) ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|CatalogsProductGroupType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|CatalogsProductGroupType|null $type = null): self
    {
        if (is_string($type)) {
            $type = CatalogsProductGroupType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets status.
     *
     * @return CatalogsProductGroupStatus|null
     */
    public function getStatus(): ?CatalogsProductGroupStatus
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param CatalogsProductGroupStatus|null $status
    *
    * @return $this
    */
    public function setStatus(?CatalogsProductGroupStatus $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return !is_null($this->status?->value) ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|CatalogsProductGroupStatus|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|CatalogsProductGroupStatus|null $status = null): self
    {
        if (is_string($status)) {
            $status = CatalogsProductGroupStatus::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets createdAt.
     *
     * @return int|null
     */
    public function getCreatedAt(): ?int
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param int|null $createdAt  Unix timestamp in seconds of when catalog product group was created.
    *
    * @return $this
    */
    public function setCreatedAt(?int $createdAt = null): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets updatedAt.
     *
     * @return int|null
     */
    public function getUpdatedAt(): ?int
    {
        return $this->updatedAt;
    }

    /**
    * Sets updatedAt.
    *
    * @param int|null $updatedAt  Unix timestamp in seconds of last time catalog product group was updated.
    *
    * @return $this
    */
    public function setUpdatedAt(?int $updatedAt = null): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }




    /**
     * Gets catalogId.
     *
     * @return string|null
     */
    public function getCatalogId(): ?string
    {
        return $this->catalogId;
    }

    /**
    * Sets catalogId.
    *
    * @param string|null $catalogId  Catalog id pertaining to the retail product group.
    *
    * @return $this
    */
    public function setCatalogId(?string $catalogId): self
    {
        $this->catalogId = $catalogId;

        return $this;
    }




    /**
     * Gets feedId.
     *
     * @return string|null
     */
    public function getFeedId(): ?string
    {
        return $this->feedId;
    }

    /**
    * Sets feedId.
    *
    * @param string|null $feedId  id of the catalogs feed belonging to this catalog product group
    *
    * @return $this
    */
    public function setFeedId(?string $feedId): self
    {
        $this->feedId = $feedId;

        return $this;
    }




    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
    * Sets country.
    *
    * @param string|null $country
    *
    * @return $this
    */
    public function setCountry(?string $country = null): self
    {
        $this->country = $country;

        return $this;
    }




    /**
     * Gets locale.
     *
     * @return string|null
     */
    public function getLocale(): ?string
    {
        return $this->locale;
    }

    /**
    * Sets locale.
    *
    * @param string|null $locale
    *
    * @return $this
    */
    public function setLocale(?string $locale = null): self
    {
        $this->locale = $locale;

        return $this;
    }



}


