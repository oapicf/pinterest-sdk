<?php
/**
 * AdGroupUpdateRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AdGroupUpdateRequest model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class AdGroupUpdateRequest 
{
        /**
     * Ad group name.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * Ad group/entity status.
     *
     * @var EntityStatus|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?EntityStatus $status = null;

    /**
     * Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
     *
     * @var int|null
     * @SerializedName("budget_in_micro_currency")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $budgetInMicroCurrency = null;

    /**
     * Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
     *
     * @var int|null
     * @SerializedName("bid_in_micro_currency")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $bidInMicroCurrency = null;

    /**
     * Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign&#39;s &#x60;objective_type&#x60; is set to &#x60;\&quot;WEB_CONVERSION\&quot;&#x60;.
     *
     * @var OptimizationGoalMetadata|null
     * @SerializedName("optimization_goal_metadata")
     * @Type("OpenAPI\Server\Model\OptimizationGoalMetadata")
    */
    #[Assert\Type("OpenAPI\Server\Model\OptimizationGoalMetadata")]
    protected ?OptimizationGoalMetadata $optimizationGoalMetadata = null;

    /**
     * @var BudgetType|null
     * @SerializedName("budget_type")
    * @Accessor(getter="getSerializedBudgetType", setter="setDeserializedBudgetType")
    * @Type("string")
    */
    protected ?BudgetType $budgetType = null;

    /**
     * Ad group start time. Unix timestamp in seconds. Defaults to current time.
     *
     * @var int|null
     * @SerializedName("start_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $startTime = null;

    /**
     * Ad group end time. Unix timestamp in seconds.
     *
     * @var int|null
     * @SerializedName("end_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $endTime = null;

    /**
     * @var TargetingSpec|null
     * @SerializedName("targeting_spec")
     * @Type("OpenAPI\Server\Model\TargetingSpec")
    */
    #[Assert\Type("OpenAPI\Server\Model\TargetingSpec")]
    protected ?TargetingSpec $targetingSpec = null;

    /**
     * Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION &lt;a href&#x3D;\&quot;/docs/redoc/#section/Billable-event\&quot;&gt;billable_event&lt;/a&gt; value. This field **REQUIRES** the &#x60;end_time&#x60; field.
     *
     * @var int|null
     * @SerializedName("lifetime_frequency_cap")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lifetimeFrequencyCap = null;

    /**
     * Third-party tracking URLs.&lt;br&gt; JSON object with the format: {\&quot;&lt;a href&#x3D;\&quot;/docs/redoc/#section/Tracking-URL-event\&quot;&gt;Tracking event enum&lt;/a&gt;\&quot;:[URL string array],...}&lt;br&gt; For example: {\&quot;impression\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;], \&quot;click\&quot;: [\&quot;URL1\&quot;, \&quot;URL2\&quot;, \&quot;URL3\&quot;]}.&lt;br&gt;Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.&lt;br&gt;&lt;br&gt; For more information, see &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Third-party and dynamic tracking&lt;/a&gt;.
     *
     * @var TrackingUrls|null
     * @SerializedName("tracking_urls")
     * @Type("OpenAPI\Server\Model\TrackingUrls")
    */
    #[Assert\Type("OpenAPI\Server\Model\TrackingUrls")]
    protected ?TrackingUrls $trackingUrls = null;

    /**
     * Enable auto-targeting for ad group. Also known as &lt;a href&#x3D;\&quot;https://help.pinterest.com/en/business/article/expanded-targeting\&quot; target&#x3D;\&quot;_blank\&quot;&gt;\&quot;expanded targeting\&quot;&lt;/a&gt;.
     *
     * @var bool|null
     * @SerializedName("auto_targeting_enabled")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $autoTargetingEnabled = null;

    /**
     * &lt;a href&#x3D;\&quot;/docs/redoc/#section/Placement-group\&quot;&gt;Placement group&lt;/a&gt;.
     *
     * @var PlacementGroupType|null
     * @SerializedName("placement_group")
    * @Accessor(getter="getSerializedPlacementGroup", setter="setDeserializedPlacementGroup")
    * @Type("string")
    */
    protected ?PlacementGroupType $placementGroup = null;

    /**
     * @var PacingDeliveryType|null
     * @SerializedName("pacing_delivery_type")
    * @Accessor(getter="getSerializedPacingDeliveryType", setter="setDeserializedPacingDeliveryType")
    * @Type("string")
    */
    protected ?PacingDeliveryType $pacingDeliveryType = null;

    /**
     * Campaign ID of the ad group.
     *
     * @var string|null
     * @SerializedName("campaign_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^[C]?\\d+$/")]
    protected ?string $campaignId = null;

    /**
     * @var ActionType|null
     * @SerializedName("billable_event")
    * @Accessor(getter="getSerializedBillableEvent", setter="setDeserializedBillableEvent")
    * @Type("string")
    */
    protected ?ActionType $billableEvent = null;

    /**
     * Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
     *
     * @var string|null
     * @SerializedName("bid_strategy_type")
     * @Type("string")
    */
    #[Assert\Choice(["AUTOMATIC_BID", "MAX_BID", "TARGET_AVG"])]
    #[Assert\Type("string")]
    protected ?string $bidStrategyType = null;

    /**
     * Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to [&#39;0&#39;].
     *
     * @var string[]|null
     * @SerializedName("targeting_template_ids")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 1)]
    protected ?array $targetingTemplateIds = null;

    /**
     * Ad group ID.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $id = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->budgetInMicroCurrency = array_key_exists('budgetInMicroCurrency', $data) ? $data['budgetInMicroCurrency'] : $this->budgetInMicroCurrency;
            $this->bidInMicroCurrency = array_key_exists('bidInMicroCurrency', $data) ? $data['bidInMicroCurrency'] : $this->bidInMicroCurrency;
            $this->optimizationGoalMetadata = array_key_exists('optimizationGoalMetadata', $data) ? $data['optimizationGoalMetadata'] : $this->optimizationGoalMetadata;
            $this->budgetType = array_key_exists('budgetType', $data) ? $data['budgetType'] : $this->budgetType;
            $this->startTime = array_key_exists('startTime', $data) ? $data['startTime'] : $this->startTime;
            $this->endTime = array_key_exists('endTime', $data) ? $data['endTime'] : $this->endTime;
            $this->targetingSpec = array_key_exists('targetingSpec', $data) ? $data['targetingSpec'] : $this->targetingSpec;
            $this->lifetimeFrequencyCap = array_key_exists('lifetimeFrequencyCap', $data) ? $data['lifetimeFrequencyCap'] : $this->lifetimeFrequencyCap;
            $this->trackingUrls = array_key_exists('trackingUrls', $data) ? $data['trackingUrls'] : $this->trackingUrls;
            $this->autoTargetingEnabled = array_key_exists('autoTargetingEnabled', $data) ? $data['autoTargetingEnabled'] : $this->autoTargetingEnabled;
            $this->placementGroup = array_key_exists('placementGroup', $data) ? $data['placementGroup'] : $this->placementGroup;
            $this->pacingDeliveryType = array_key_exists('pacingDeliveryType', $data) ? $data['pacingDeliveryType'] : $this->pacingDeliveryType;
            $this->campaignId = array_key_exists('campaignId', $data) ? $data['campaignId'] : $this->campaignId;
            $this->billableEvent = array_key_exists('billableEvent', $data) ? $data['billableEvent'] : $this->billableEvent;
            $this->bidStrategyType = array_key_exists('bidStrategyType', $data) ? $data['bidStrategyType'] : $this->bidStrategyType;
            $this->targetingTemplateIds = array_key_exists('targetingTemplateIds', $data) ? $data['targetingTemplateIds'] : $this->targetingTemplateIds;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
        }
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Ad group name.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return EntityStatus|null
     */
    public function getStatus(): ?EntityStatus
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param EntityStatus|null $status  Ad group/entity status.
    *
    * @return $this
    */
    public function setStatus(?EntityStatus $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return !is_null($this->status?->value) ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|EntityStatus|null $status  Ad group/entity status.
    *
    * @return $this
    */
    public function setDeserializedStatus(string|EntityStatus|null $status = null): self
    {
        if (is_string($status)) {
            $status = EntityStatus::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets budgetInMicroCurrency.
     *
     * @return int|null
     */
    public function getBudgetInMicroCurrency(): ?int
    {
        return $this->budgetInMicroCurrency;
    }

    /**
    * Sets budgetInMicroCurrency.
    *
    * @param int|null $budgetInMicroCurrency  Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
    *
    * @return $this
    */
    public function setBudgetInMicroCurrency(?int $budgetInMicroCurrency = null): self
    {
        $this->budgetInMicroCurrency = $budgetInMicroCurrency;

        return $this;
    }




    /**
     * Gets bidInMicroCurrency.
     *
     * @return int|null
     */
    public function getBidInMicroCurrency(): ?int
    {
        return $this->bidInMicroCurrency;
    }

    /**
    * Sets bidInMicroCurrency.
    *
    * @param int|null $bidInMicroCurrency  Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
    *
    * @return $this
    */
    public function setBidInMicroCurrency(?int $bidInMicroCurrency = null): self
    {
        $this->bidInMicroCurrency = $bidInMicroCurrency;

        return $this;
    }




    /**
     * Gets optimizationGoalMetadata.
     *
     * @return OptimizationGoalMetadata|null
     */
    public function getOptimizationGoalMetadata(): ?OptimizationGoalMetadata
    {
        return $this->optimizationGoalMetadata;
    }

    /**
    * Sets optimizationGoalMetadata.
    *
    * @param OptimizationGoalMetadata|null $optimizationGoalMetadata  Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`.
    *
    * @return $this
    */
    public function setOptimizationGoalMetadata(?OptimizationGoalMetadata $optimizationGoalMetadata = null): self
    {
        $this->optimizationGoalMetadata = $optimizationGoalMetadata;

        return $this;
    }




    /**
     * Gets budgetType.
     *
     * @return BudgetType|null
     */
    public function getBudgetType(): ?BudgetType
    {
        return $this->budgetType;
    }

    /**
    * Sets budgetType.
    *
    * @param BudgetType|null $budgetType
    *
    * @return $this
    */
    public function setBudgetType(?BudgetType $budgetType = null): self
    {
        $this->budgetType = $budgetType;

        return $this;
    }

    /**
    * Gets budgetType for serialization.
    *
    * @return string|null
    */
    public function getSerializedBudgetType(): string|null
    {
        return !is_null($this->budgetType?->value) ? (string) $this->budgetType->value : null;
    }

    /**
    * Sets budgetType.
    *
    * @param string|BudgetType|null $budgetType
    *
    * @return $this
    */
    public function setDeserializedBudgetType(string|BudgetType|null $budgetType = null): self
    {
        if (is_string($budgetType)) {
            $budgetType = BudgetType::tryFrom($budgetType);
        }

        $this->budgetType = $budgetType;

        return $this;
    }



    /**
     * Gets startTime.
     *
     * @return int|null
     */
    public function getStartTime(): ?int
    {
        return $this->startTime;
    }

    /**
    * Sets startTime.
    *
    * @param int|null $startTime  Ad group start time. Unix timestamp in seconds. Defaults to current time.
    *
    * @return $this
    */
    public function setStartTime(?int $startTime = null): self
    {
        $this->startTime = $startTime;

        return $this;
    }




    /**
     * Gets endTime.
     *
     * @return int|null
     */
    public function getEndTime(): ?int
    {
        return $this->endTime;
    }

    /**
    * Sets endTime.
    *
    * @param int|null $endTime  Ad group end time. Unix timestamp in seconds.
    *
    * @return $this
    */
    public function setEndTime(?int $endTime = null): self
    {
        $this->endTime = $endTime;

        return $this;
    }




    /**
     * Gets targetingSpec.
     *
     * @return TargetingSpec|null
     */
    public function getTargetingSpec(): ?TargetingSpec
    {
        return $this->targetingSpec;
    }

    /**
    * Sets targetingSpec.
    *
    * @param TargetingSpec|null $targetingSpec
    *
    * @return $this
    */
    public function setTargetingSpec(?TargetingSpec $targetingSpec = null): self
    {
        $this->targetingSpec = $targetingSpec;

        return $this;
    }




    /**
     * Gets lifetimeFrequencyCap.
     *
     * @return int|null
     */
    public function getLifetimeFrequencyCap(): ?int
    {
        return $this->lifetimeFrequencyCap;
    }

    /**
    * Sets lifetimeFrequencyCap.
    *
    * @param int|null $lifetimeFrequencyCap  Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field.
    *
    * @return $this
    */
    public function setLifetimeFrequencyCap(?int $lifetimeFrequencyCap = null): self
    {
        $this->lifetimeFrequencyCap = $lifetimeFrequencyCap;

        return $this;
    }




    /**
     * Gets trackingUrls.
     *
     * @return TrackingUrls|null
     */
    public function getTrackingUrls(): ?TrackingUrls
    {
        return $this->trackingUrls;
    }

    /**
    * Sets trackingUrls.
    *
    * @param TrackingUrls|null $trackingUrls  Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>.
    *
    * @return $this
    */
    public function setTrackingUrls(?TrackingUrls $trackingUrls = null): self
    {
        $this->trackingUrls = $trackingUrls;

        return $this;
    }




    /**
     * Gets autoTargetingEnabled.
     *
     * @return bool|null
     */
    public function isAutoTargetingEnabled(): ?bool
    {
        return $this->autoTargetingEnabled;
    }

    /**
    * Sets autoTargetingEnabled.
    *
    * @param bool|null $autoTargetingEnabled  Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>.
    *
    * @return $this
    */
    public function setAutoTargetingEnabled(?bool $autoTargetingEnabled = null): self
    {
        $this->autoTargetingEnabled = $autoTargetingEnabled;

        return $this;
    }




    /**
     * Gets placementGroup.
     *
     * @return PlacementGroupType|null
     */
    public function getPlacementGroup(): ?PlacementGroupType
    {
        return $this->placementGroup;
    }

    /**
    * Sets placementGroup.
    *
    * @param PlacementGroupType|null $placementGroup  <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    *
    * @return $this
    */
    public function setPlacementGroup(?PlacementGroupType $placementGroup = null): self
    {
        $this->placementGroup = $placementGroup;

        return $this;
    }

    /**
    * Gets placementGroup for serialization.
    *
    * @return string|null
    */
    public function getSerializedPlacementGroup(): string|null
    {
        return !is_null($this->placementGroup?->value) ? (string) $this->placementGroup->value : null;
    }

    /**
    * Sets placementGroup.
    *
    * @param string|PlacementGroupType|null $placementGroup  <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>.
    *
    * @return $this
    */
    public function setDeserializedPlacementGroup(string|PlacementGroupType|null $placementGroup = null): self
    {
        if (is_string($placementGroup)) {
            $placementGroup = PlacementGroupType::tryFrom($placementGroup);
        }

        $this->placementGroup = $placementGroup;

        return $this;
    }



    /**
     * Gets pacingDeliveryType.
     *
     * @return PacingDeliveryType|null
     */
    public function getPacingDeliveryType(): ?PacingDeliveryType
    {
        return $this->pacingDeliveryType;
    }

    /**
    * Sets pacingDeliveryType.
    *
    * @param PacingDeliveryType|null $pacingDeliveryType
    *
    * @return $this
    */
    public function setPacingDeliveryType(?PacingDeliveryType $pacingDeliveryType = null): self
    {
        $this->pacingDeliveryType = $pacingDeliveryType;

        return $this;
    }

    /**
    * Gets pacingDeliveryType for serialization.
    *
    * @return string|null
    */
    public function getSerializedPacingDeliveryType(): string|null
    {
        return !is_null($this->pacingDeliveryType?->value) ? (string) $this->pacingDeliveryType->value : null;
    }

    /**
    * Sets pacingDeliveryType.
    *
    * @param string|PacingDeliveryType|null $pacingDeliveryType
    *
    * @return $this
    */
    public function setDeserializedPacingDeliveryType(string|PacingDeliveryType|null $pacingDeliveryType = null): self
    {
        if (is_string($pacingDeliveryType)) {
            $pacingDeliveryType = PacingDeliveryType::tryFrom($pacingDeliveryType);
        }

        $this->pacingDeliveryType = $pacingDeliveryType;

        return $this;
    }



    /**
     * Gets campaignId.
     *
     * @return string|null
     */
    public function getCampaignId(): ?string
    {
        return $this->campaignId;
    }

    /**
    * Sets campaignId.
    *
    * @param string|null $campaignId  Campaign ID of the ad group.
    *
    * @return $this
    */
    public function setCampaignId(?string $campaignId = null): self
    {
        $this->campaignId = $campaignId;

        return $this;
    }




    /**
     * Gets billableEvent.
     *
     * @return ActionType|null
     */
    public function getBillableEvent(): ?ActionType
    {
        return $this->billableEvent;
    }

    /**
    * Sets billableEvent.
    *
    * @param ActionType|null $billableEvent
    *
    * @return $this
    */
    public function setBillableEvent(?ActionType $billableEvent = null): self
    {
        $this->billableEvent = $billableEvent;

        return $this;
    }

    /**
    * Gets billableEvent for serialization.
    *
    * @return string|null
    */
    public function getSerializedBillableEvent(): string|null
    {
        return !is_null($this->billableEvent?->value) ? (string) $this->billableEvent->value : null;
    }

    /**
    * Sets billableEvent.
    *
    * @param string|ActionType|null $billableEvent
    *
    * @return $this
    */
    public function setDeserializedBillableEvent(string|ActionType|null $billableEvent = null): self
    {
        if (is_string($billableEvent)) {
            $billableEvent = ActionType::tryFrom($billableEvent);
        }

        $this->billableEvent = $billableEvent;

        return $this;
    }



    /**
     * Gets bidStrategyType.
     *
     * @return string|null
     */
    public function getBidStrategyType(): ?string
    {
        return $this->bidStrategyType;
    }

    /**
    * Sets bidStrategyType.
    *
    * @param string|null $bidStrategyType  Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
    *
    * @return $this
    */
    public function setBidStrategyType(?string $bidStrategyType = null): self
    {
        $this->bidStrategyType = $bidStrategyType;

        return $this;
    }




    /**
     * Gets targetingTemplateIds.
     *
     * @return string[]|null
     */
    public function getTargetingTemplateIds(): ?array
    {
        return $this->targetingTemplateIds;
    }

    /**
    * Sets targetingTemplateIds.
    *
    * @param string[]|null $targetingTemplateIds  Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
    *
    * @return $this
    */
    public function setTargetingTemplateIds(?array $targetingTemplateIds = null): self
    {
        $this->targetingTemplateIds = $targetingTemplateIds;

        return $this;
    }




    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  Ad group ID.
    *
    * @return $this
    */
    public function setId(?string $id): self
    {
        $this->id = $id;

        return $this;
    }



}


