<?php
/**
 * CatalogsReportStats
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsReportStats model.
 *
 * Diagnostics aggregated numbers
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsReportStats 
{
        /**
     * @var string|null
     * @SerializedName("report_type")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Choice(["FEED_INGESTION_ISSUES", "DISTRIBUTION_ISSUES"])]
    #[Assert\Type("string")]
    protected ?string $reportType = null;

    /**
     * ID of the catalog entity.
     *
     * @var string|null
     * @SerializedName("catalog_id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Regex("/^\\d+$/")]
    protected ?string $catalogId = null;

    /**
     * The event code that a diagnostics aggregated number references
     *
     * @var int|null
     * @SerializedName("code")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $code = null;

    /**
     * A human-friendly label for the event code (e.g, &#39;SPAM&#39;)
     *
     * @var string|null
     * @SerializedName("code_label")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $codeLabel = null;

    /**
     * Title message describing the diagnostic issue
     *
     * @var string|null
     * @SerializedName("message")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $message = null;

    /**
     * Number of occurrences of the issue
     *
     * @var int|null
     * @SerializedName("occurrences")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $occurrences = null;

    /**
     * An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
     *
     * @var string|null
     * @SerializedName("severity")
     * @Type("string")
    */
    #[Assert\Choice(["WARN", "ERROR"])]
    #[Assert\Type("string")]
    protected ?string $severity = null;

    /**
     * Indicates if issue makes items ineligible for ads distribution
     *
     * @var bool|null
     * @SerializedName("ineligible_for_ads")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $ineligibleForAds = null;

    /**
     * Indicates if issue makes items ineligible for organic distribution
     *
     * @var bool|null
     * @SerializedName("ineligible_for_organic")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $ineligibleForOrganic = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->reportType = array_key_exists('reportType', $data) ? $data['reportType'] : $this->reportType;
            $this->catalogId = array_key_exists('catalogId', $data) ? $data['catalogId'] : $this->catalogId;
            $this->code = array_key_exists('code', $data) ? $data['code'] : $this->code;
            $this->codeLabel = array_key_exists('codeLabel', $data) ? $data['codeLabel'] : $this->codeLabel;
            $this->message = array_key_exists('message', $data) ? $data['message'] : $this->message;
            $this->occurrences = array_key_exists('occurrences', $data) ? $data['occurrences'] : $this->occurrences;
            $this->severity = array_key_exists('severity', $data) ? $data['severity'] : $this->severity;
            $this->ineligibleForAds = array_key_exists('ineligibleForAds', $data) ? $data['ineligibleForAds'] : $this->ineligibleForAds;
            $this->ineligibleForOrganic = array_key_exists('ineligibleForOrganic', $data) ? $data['ineligibleForOrganic'] : $this->ineligibleForOrganic;
        }
    }

    /**
     * Gets reportType.
     *
     * @return string|null
     */
    public function getReportType(): ?string
    {
        return $this->reportType;
    }

    /**
    * Sets reportType.
    *
    * @param string|null $reportType
    *
    * @return $this
    */
    public function setReportType(?string $reportType): self
    {
        $this->reportType = $reportType;

        return $this;
    }




    /**
     * Gets catalogId.
     *
     * @return string|null
     */
    public function getCatalogId(): ?string
    {
        return $this->catalogId;
    }

    /**
    * Sets catalogId.
    *
    * @param string|null $catalogId  ID of the catalog entity.
    *
    * @return $this
    */
    public function setCatalogId(?string $catalogId = null): self
    {
        $this->catalogId = $catalogId;

        return $this;
    }




    /**
     * Gets code.
     *
     * @return int|null
     */
    public function getCode(): ?int
    {
        return $this->code;
    }

    /**
    * Sets code.
    *
    * @param int|null $code  The event code that a diagnostics aggregated number references
    *
    * @return $this
    */
    public function setCode(?int $code = null): self
    {
        $this->code = $code;

        return $this;
    }




    /**
     * Gets codeLabel.
     *
     * @return string|null
     */
    public function getCodeLabel(): ?string
    {
        return $this->codeLabel;
    }

    /**
    * Sets codeLabel.
    *
    * @param string|null $codeLabel  A human-friendly label for the event code (e.g, 'SPAM')
    *
    * @return $this
    */
    public function setCodeLabel(?string $codeLabel = null): self
    {
        $this->codeLabel = $codeLabel;

        return $this;
    }




    /**
     * Gets message.
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
    * Sets message.
    *
    * @param string|null $message  Title message describing the diagnostic issue
    *
    * @return $this
    */
    public function setMessage(?string $message = null): self
    {
        $this->message = $message;

        return $this;
    }




    /**
     * Gets occurrences.
     *
     * @return int|null
     */
    public function getOccurrences(): ?int
    {
        return $this->occurrences;
    }

    /**
    * Sets occurrences.
    *
    * @param int|null $occurrences  Number of occurrences of the issue
    *
    * @return $this
    */
    public function setOccurrences(?int $occurrences = null): self
    {
        $this->occurrences = $occurrences;

        return $this;
    }




    /**
     * Gets severity.
     *
     * @return string|null
     */
    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    /**
    * Sets severity.
    *
    * @param string|null $severity  An ERROR means that items have been dropped, while a WARN denotes that items have been ingested despite an issue
    *
    * @return $this
    */
    public function setSeverity(?string $severity = null): self
    {
        $this->severity = $severity;

        return $this;
    }




    /**
     * Gets ineligibleForAds.
     *
     * @return bool|null
     */
    public function isIneligibleForAds(): ?bool
    {
        return $this->ineligibleForAds;
    }

    /**
    * Sets ineligibleForAds.
    *
    * @param bool|null $ineligibleForAds  Indicates if issue makes items ineligible for ads distribution
    *
    * @return $this
    */
    public function setIneligibleForAds(?bool $ineligibleForAds = null): self
    {
        $this->ineligibleForAds = $ineligibleForAds;

        return $this;
    }




    /**
     * Gets ineligibleForOrganic.
     *
     * @return bool|null
     */
    public function isIneligibleForOrganic(): ?bool
    {
        return $this->ineligibleForOrganic;
    }

    /**
    * Sets ineligibleForOrganic.
    *
    * @param bool|null $ineligibleForOrganic  Indicates if issue makes items ineligible for organic distribution
    *
    * @return $this
    */
    public function setIneligibleForOrganic(?bool $ineligibleForOrganic = null): self
    {
        $this->ineligibleForOrganic = $ineligibleForOrganic;

        return $this;
    }



}


