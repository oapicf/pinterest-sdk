<?php
/**
 * CatalogsCreativeAssetsProductMetadata
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsCreativeAssetsProductMetadata model.
 *
 * Creative assets product metadata entity
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsCreativeAssetsProductMetadata 
{
        /**
     * The user-created unique ID that represents the creative assets item.
     *
     * @var string|null
     * @SerializedName("creative_assets_id")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $creativeAssetsId = null;

    /**
     * @var CreativeAssetsVisibilityType|null
     * @SerializedName("visibility")
    * @Accessor(getter="getSerializedVisibility", setter="setDeserializedVisibility")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?CreativeAssetsVisibilityType $visibility = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->creativeAssetsId = array_key_exists('creativeAssetsId', $data) ? $data['creativeAssetsId'] : $this->creativeAssetsId;
            $this->visibility = array_key_exists('visibility', $data) ? $data['visibility'] : $this->visibility;
        }
    }

    /**
     * Gets creativeAssetsId.
     *
     * @return string|null
     */
    public function getCreativeAssetsId(): ?string
    {
        return $this->creativeAssetsId;
    }

    /**
    * Sets creativeAssetsId.
    *
    * @param string|null $creativeAssetsId  The user-created unique ID that represents the creative assets item.
    *
    * @return $this
    */
    public function setCreativeAssetsId(?string $creativeAssetsId): self
    {
        $this->creativeAssetsId = $creativeAssetsId;

        return $this;
    }




    /**
     * Gets visibility.
     *
     * @return CreativeAssetsVisibilityType|null
     */
    public function getVisibility(): ?CreativeAssetsVisibilityType
    {
        return $this->visibility;
    }

    /**
    * Sets visibility.
    *
    * @param CreativeAssetsVisibilityType|null $visibility
    *
    * @return $this
    */
    public function setVisibility(?CreativeAssetsVisibilityType $visibility): self
    {
        $this->visibility = $visibility;

        return $this;
    }

    /**
    * Gets visibility for serialization.
    *
    * @return string|null
    */
    public function getSerializedVisibility(): string|null
    {
        return !is_null($this->visibility?->value) ? (string) $this->visibility->value : null;
    }

    /**
    * Sets visibility.
    *
    * @param string|CreativeAssetsVisibilityType|null $visibility
    *
    * @return $this
    */
    public function setDeserializedVisibility(string|CreativeAssetsVisibilityType|null $visibility): self
    {
        if (is_string($visibility)) {
            $visibility = CreativeAssetsVisibilityType::tryFrom($visibility);
        }

        $this->visibility = $visibility;

        return $this;
    }


}


