<?php
/**
 * CatalogsFeedIngestionErrors
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CatalogsFeedIngestionErrors model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CatalogsFeedIngestionErrors 
{
        /**
     * We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
     *
     * @var int|null
     * @SerializedName("LINE_LEVEL_INTERNAL_ERROR")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lINELEVELINTERNALERROR = null;

    /**
     * The product count has decreased by more than 99% compared to the last successful ingestion.
     *
     * @var int|null
     * @SerializedName("LARGE_PRODUCT_COUNT_DECREASE")
     * @Type("int")
    */
    #[Assert\Choice([1])]
    #[Assert\Type("int")]
    protected ?int $lARGEPRODUCTCOUNTDECREASE = null;

    /**
     * We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
     *
     * @var int|null
     * @SerializedName("ACCOUNT_FLAGGED")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $aCCOUNTFLAGGED = null;

    /**
     * We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
     *
     * @var int|null
     * @SerializedName("IMAGE_LEVEL_INTERNAL_ERROR")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $iMAGELEVELINTERNALERROR = null;

    /**
     * Image files are unreadable. Please upload new files to continue.
     *
     * @var int|null
     * @SerializedName("IMAGE_FILE_NOT_ACCESSIBLE")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $iMAGEFILENOTACCESSIBLE = null;

    /**
     * Image files are unreadable. Please check your link and upload new files to continue.
     *
     * @var int|null
     * @SerializedName("IMAGE_MALFORMED_URL")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $iMAGEMALFORMEDURL = null;

    /**
     * Image files are unreadable. Please upload new files to continue.
     *
     * @var int|null
     * @SerializedName("IMAGE_FILE_NOT_FOUND")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $iMAGEFILENOTFOUND = null;

    /**
     * Image files are unreadable. Please upload new files to continue.
     *
     * @var int|null
     * @SerializedName("IMAGE_INVALID_FILE")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $iMAGEINVALIDFILE = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->lINELEVELINTERNALERROR = array_key_exists('lINELEVELINTERNALERROR', $data) ? $data['lINELEVELINTERNALERROR'] : $this->lINELEVELINTERNALERROR;
            $this->lARGEPRODUCTCOUNTDECREASE = array_key_exists('lARGEPRODUCTCOUNTDECREASE', $data) ? $data['lARGEPRODUCTCOUNTDECREASE'] : $this->lARGEPRODUCTCOUNTDECREASE;
            $this->aCCOUNTFLAGGED = array_key_exists('aCCOUNTFLAGGED', $data) ? $data['aCCOUNTFLAGGED'] : $this->aCCOUNTFLAGGED;
            $this->iMAGELEVELINTERNALERROR = array_key_exists('iMAGELEVELINTERNALERROR', $data) ? $data['iMAGELEVELINTERNALERROR'] : $this->iMAGELEVELINTERNALERROR;
            $this->iMAGEFILENOTACCESSIBLE = array_key_exists('iMAGEFILENOTACCESSIBLE', $data) ? $data['iMAGEFILENOTACCESSIBLE'] : $this->iMAGEFILENOTACCESSIBLE;
            $this->iMAGEMALFORMEDURL = array_key_exists('iMAGEMALFORMEDURL', $data) ? $data['iMAGEMALFORMEDURL'] : $this->iMAGEMALFORMEDURL;
            $this->iMAGEFILENOTFOUND = array_key_exists('iMAGEFILENOTFOUND', $data) ? $data['iMAGEFILENOTFOUND'] : $this->iMAGEFILENOTFOUND;
            $this->iMAGEINVALIDFILE = array_key_exists('iMAGEINVALIDFILE', $data) ? $data['iMAGEINVALIDFILE'] : $this->iMAGEINVALIDFILE;
        }
    }

    /**
     * Gets lINELEVELINTERNALERROR.
     *
     * @return int|null
     */
    public function getLINELEVELINTERNALERROR(): ?int
    {
        return $this->lINELEVELINTERNALERROR;
    }

    /**
    * Sets lINELEVELINTERNALERROR.
    *
    * @param int|null $lINELEVELINTERNALERROR  We experienced a technical difficulty and were unable to ingest this some items. The next ingestion will happen in 24 hours.
    *
    * @return $this
    */
    public function setLINELEVELINTERNALERROR(?int $lINELEVELINTERNALERROR = null): self
    {
        $this->lINELEVELINTERNALERROR = $lINELEVELINTERNALERROR;

        return $this;
    }




    /**
     * Gets lARGEPRODUCTCOUNTDECREASE.
     *
     * @return int|null
     */
    public function getLARGEPRODUCTCOUNTDECREASE(): ?int
    {
        return $this->lARGEPRODUCTCOUNTDECREASE;
    }

    /**
    * Sets lARGEPRODUCTCOUNTDECREASE.
    *
    * @param int|null $lARGEPRODUCTCOUNTDECREASE  The product count has decreased by more than 99% compared to the last successful ingestion.
    *
    * @return $this
    */
    public function setLARGEPRODUCTCOUNTDECREASE(?int $lARGEPRODUCTCOUNTDECREASE = null): self
    {
        $this->lARGEPRODUCTCOUNTDECREASE = $lARGEPRODUCTCOUNTDECREASE;

        return $this;
    }




    /**
     * Gets aCCOUNTFLAGGED.
     *
     * @return int|null
     */
    public function getACCOUNTFLAGGED(): ?int
    {
        return $this->aCCOUNTFLAGGED;
    }

    /**
    * Sets aCCOUNTFLAGGED.
    *
    * @param int|null $aCCOUNTFLAGGED  We detected an issue with your account and are not currently ingesting your items. Please review our policies at policy.pinterest.com/community-guidelines#section-spam or contact us at help.pinterest.com/contact for more information.
    *
    * @return $this
    */
    public function setACCOUNTFLAGGED(?int $aCCOUNTFLAGGED = null): self
    {
        $this->aCCOUNTFLAGGED = $aCCOUNTFLAGGED;

        return $this;
    }




    /**
     * Gets iMAGELEVELINTERNALERROR.
     *
     * @return int|null
     */
    public function getIMAGELEVELINTERNALERROR(): ?int
    {
        return $this->iMAGELEVELINTERNALERROR;
    }

    /**
    * Sets iMAGELEVELINTERNALERROR.
    *
    * @param int|null $iMAGELEVELINTERNALERROR  We experienced a technical difficulty and were unable to download some images. The next download attempt will happen in 24 hours.
    *
    * @return $this
    */
    public function setIMAGELEVELINTERNALERROR(?int $iMAGELEVELINTERNALERROR = null): self
    {
        $this->iMAGELEVELINTERNALERROR = $iMAGELEVELINTERNALERROR;

        return $this;
    }




    /**
     * Gets iMAGEFILENOTACCESSIBLE.
     *
     * @return int|null
     */
    public function getIMAGEFILENOTACCESSIBLE(): ?int
    {
        return $this->iMAGEFILENOTACCESSIBLE;
    }

    /**
    * Sets iMAGEFILENOTACCESSIBLE.
    *
    * @param int|null $iMAGEFILENOTACCESSIBLE  Image files are unreadable. Please upload new files to continue.
    *
    * @return $this
    */
    public function setIMAGEFILENOTACCESSIBLE(?int $iMAGEFILENOTACCESSIBLE = null): self
    {
        $this->iMAGEFILENOTACCESSIBLE = $iMAGEFILENOTACCESSIBLE;

        return $this;
    }




    /**
     * Gets iMAGEMALFORMEDURL.
     *
     * @return int|null
     */
    public function getIMAGEMALFORMEDURL(): ?int
    {
        return $this->iMAGEMALFORMEDURL;
    }

    /**
    * Sets iMAGEMALFORMEDURL.
    *
    * @param int|null $iMAGEMALFORMEDURL  Image files are unreadable. Please check your link and upload new files to continue.
    *
    * @return $this
    */
    public function setIMAGEMALFORMEDURL(?int $iMAGEMALFORMEDURL = null): self
    {
        $this->iMAGEMALFORMEDURL = $iMAGEMALFORMEDURL;

        return $this;
    }




    /**
     * Gets iMAGEFILENOTFOUND.
     *
     * @return int|null
     */
    public function getIMAGEFILENOTFOUND(): ?int
    {
        return $this->iMAGEFILENOTFOUND;
    }

    /**
    * Sets iMAGEFILENOTFOUND.
    *
    * @param int|null $iMAGEFILENOTFOUND  Image files are unreadable. Please upload new files to continue.
    *
    * @return $this
    */
    public function setIMAGEFILENOTFOUND(?int $iMAGEFILENOTFOUND = null): self
    {
        $this->iMAGEFILENOTFOUND = $iMAGEFILENOTFOUND;

        return $this;
    }




    /**
     * Gets iMAGEINVALIDFILE.
     *
     * @return int|null
     */
    public function getIMAGEINVALIDFILE(): ?int
    {
        return $this->iMAGEINVALIDFILE;
    }

    /**
    * Sets iMAGEINVALIDFILE.
    *
    * @param int|null $iMAGEINVALIDFILE  Image files are unreadable. Please upload new files to continue.
    *
    * @return $this
    */
    public function setIMAGEINVALIDFILE(?int $iMAGEINVALIDFILE = null): self
    {
        $this->iMAGEINVALIDFILE = $iMAGEINVALIDFILE;

        return $this;
    }



}


