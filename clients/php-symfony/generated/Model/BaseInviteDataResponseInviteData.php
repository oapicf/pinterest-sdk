<?php
/**
 * BaseInviteDataResponseInviteData
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BaseInviteDataResponseInviteData model.
 *
 * Metadata for the invite/request.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class BaseInviteDataResponseInviteData 
{
        /**
     * The date and time when the invite/request will expire. Returned in milliseconds.
     *
     * @var int|null
     * @SerializedName("invite_expiration")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $inviteExpiration = null;

    /**
     * The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
     *
     * @var string|null
     * @SerializedName("invite_status")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $inviteStatus = null;

    /**
     * The type of invite. &lt;br&gt;&#39;MEMBER_INVITE&#39; is to invite a member to access your business assets. &lt;br&gt;&#39;PARTNER_INVITE&#39; is to invite a partner to access your business assets. &lt;br&gt;&#39;PARTNER_REQUEST&#39; is to request access a partner&#39;s business assets.
     *
     * @var string|null
     * @SerializedName("invite_type")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $inviteType = null;

    /**
     * The date and time the invite/request was last updated. Returned in milliseconds.
     *
     * @var int|null
     * @SerializedName("last_updated_time")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lastUpdatedTime = null;

    /**
     * The date and time the invite/request was sent/created. Returned in milliseconds.
     *
     * @var int|null
     * @SerializedName("sent_at")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $sentAt = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->inviteExpiration = array_key_exists('inviteExpiration', $data) ? $data['inviteExpiration'] : $this->inviteExpiration;
            $this->inviteStatus = array_key_exists('inviteStatus', $data) ? $data['inviteStatus'] : $this->inviteStatus;
            $this->inviteType = array_key_exists('inviteType', $data) ? $data['inviteType'] : $this->inviteType;
            $this->lastUpdatedTime = array_key_exists('lastUpdatedTime', $data) ? $data['lastUpdatedTime'] : $this->lastUpdatedTime;
            $this->sentAt = array_key_exists('sentAt', $data) ? $data['sentAt'] : $this->sentAt;
        }
    }

    /**
     * Gets inviteExpiration.
     *
     * @return int|null
     */
    public function getInviteExpiration(): ?int
    {
        return $this->inviteExpiration;
    }

    /**
    * Sets inviteExpiration.
    *
    * @param int|null $inviteExpiration  The date and time when the invite/request will expire. Returned in milliseconds.
    *
    * @return $this
    */
    public function setInviteExpiration(?int $inviteExpiration = null): self
    {
        $this->inviteExpiration = $inviteExpiration;

        return $this;
    }




    /**
     * Gets inviteStatus.
     *
     * @return string|null
     */
    public function getInviteStatus(): ?string
    {
        return $this->inviteStatus;
    }

    /**
    * Sets inviteStatus.
    *
    * @param string|null $inviteStatus  The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED.
    *
    * @return $this
    */
    public function setInviteStatus(?string $inviteStatus = null): self
    {
        $this->inviteStatus = $inviteStatus;

        return $this;
    }




    /**
     * Gets inviteType.
     *
     * @return string|null
     */
    public function getInviteType(): ?string
    {
        return $this->inviteType;
    }

    /**
    * Sets inviteType.
    *
    * @param string|null $inviteType  The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER_INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets.
    *
    * @return $this
    */
    public function setInviteType(?string $inviteType = null): self
    {
        $this->inviteType = $inviteType;

        return $this;
    }




    /**
     * Gets lastUpdatedTime.
     *
     * @return int|null
     */
    public function getLastUpdatedTime(): ?int
    {
        return $this->lastUpdatedTime;
    }

    /**
    * Sets lastUpdatedTime.
    *
    * @param int|null $lastUpdatedTime  The date and time the invite/request was last updated. Returned in milliseconds.
    *
    * @return $this
    */
    public function setLastUpdatedTime(?int $lastUpdatedTime = null): self
    {
        $this->lastUpdatedTime = $lastUpdatedTime;

        return $this;
    }




    /**
     * Gets sentAt.
     *
     * @return int|null
     */
    public function getSentAt(): ?int
    {
        return $this->sentAt;
    }

    /**
    * Sets sentAt.
    *
    * @param int|null $sentAt  The date and time the invite/request was sent/created. Returned in milliseconds.
    *
    * @return $this
    */
    public function setSentAt(?int $sentAt = null): self
    {
        $this->sentAt = $sentAt;

        return $this;
    }



}


