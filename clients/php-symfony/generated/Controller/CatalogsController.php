<?php

/**
 * CatalogsController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\CatalogsApiInterface;
use OpenAPI\Server\Model\Catalog;
use OpenAPI\Server\Model\CatalogsCreateReportResponse;
use OpenAPI\Server\Model\CatalogsCreateRequest;
use OpenAPI\Server\Model\CatalogsFeed;
use OpenAPI\Server\Model\CatalogsFeedIngestion;
use OpenAPI\Server\Model\CatalogsItemValidationIssue;
use OpenAPI\Server\Model\CatalogsItems;
use OpenAPI\Server\Model\CatalogsItemsBatch;
use OpenAPI\Server\Model\CatalogsItemsRequest;
use OpenAPI\Server\Model\CatalogsList200Response;
use OpenAPI\Server\Model\CatalogsListProductsByFilterRequest;
use OpenAPI\Server\Model\CatalogsProductGroupPinsList200Response;
use OpenAPI\Server\Model\CatalogsProductGroupProductCountsVertical;
use OpenAPI\Server\Model\CatalogsProductGroupsList200Response;
use OpenAPI\Server\Model\CatalogsProductGroupsUpdateRequest;
use OpenAPI\Server\Model\CatalogsReport;
use OpenAPI\Server\Model\CatalogsReportParameters;
use OpenAPI\Server\Model\CatalogsVerticalProductGroup;
use OpenAPI\Server\Model\Error;
use OpenAPI\Server\Model\FeedProcessingResultsList200Response;
use OpenAPI\Server\Model\FeedsCreateRequest;
use OpenAPI\Server\Model\FeedsList200Response;
use OpenAPI\Server\Model\FeedsUpdateRequest;
use OpenAPI\Server\Model\ItemsBatchPostRequest;
use OpenAPI\Server\Model\ItemsIssuesList200Response;
use OpenAPI\Server\Model\MultipleProductGroupsInner;
use OpenAPI\Server\Model\OpenAPI\Server\Model\CatalogsItemsFilters;
use OpenAPI\Server\Model\OpenAPI\Server\Model\CatalogsReportParameters;
use OpenAPI\Server\Model\ReportsStats200Response;

/**
 * CatalogsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class CatalogsController extends Controller
{

    /**
     * Operation catalogsCreate
     *
     * Create catalog
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $catalogsCreateRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $catalogsCreateRequest = $this->deserialize($catalogsCreateRequest, 'OpenAPI\Server\Model\CatalogsCreateRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsCreateRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($catalogsCreateRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsCreate($catalogsCreateRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsList
     *
     * List catalogs
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsListAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsList($bookmark, $pageSize, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupPinsList
     *
     * List products by product group
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupPinsListAction(Request $request, $productGroupId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $adAccountId = $request->query->get('adAccountId');
        $pinMetrics = $request->query->get('pinMetrics', false);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $productGroupId = $this->deserialize($productGroupId, 'string', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $pinMetrics = $this->deserialize($pinMetrics, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($productGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($pinMetrics, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupPinsList($productGroupId, $bookmark, $pageSize, $adAccountId, $pinMetrics, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                404 => 'Catalogs product group not found.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsCreate
     *
     * Create product group
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $multipleProductGroupsInner = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $multipleProductGroupsInner = $this->deserialize($multipleProductGroupsInner, 'OpenAPI\Server\Model\MultipleProductGroupsInner', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\MultipleProductGroupsInner");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($multipleProductGroupsInner, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsCreate($multipleProductGroupsInner, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                201 => 'Success',
                400 => 'Invalid body.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                409 => 'Conflict. Can&#39;t create this catalogs product group with this value.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsCreateMany
     *
     * Create product groups
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsCreateManyAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $multipleProductGroupsInner = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $multipleProductGroupsInner = $this->deserialize($multipleProductGroupsInner, 'array<OpenAPI\Server\Model\MultipleProductGroupsInner>', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\MultipleProductGroupsInner"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($multipleProductGroupsInner, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsCreateMany($multipleProductGroupsInner, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                201 => 'Success',
                400 => 'Invalid body.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                409 => 'Conflict. Can&#39;t create this catalogs product group with this value.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsDelete
     *
     * Delete product group
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsDeleteAction(Request $request, $productGroupId)
    {
        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $productGroupId = $this->deserialize($productGroupId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($productGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->catalogsProductGroupsDelete($productGroupId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                204 => 'Catalogs Product Group deleted successfully.',
                400 => 'Invalid catalogs product group id parameters.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                404 => 'Catalogs product group not found.',
                409 => 'Conflict. Can&#39;t delete this catalogs product group.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsDeleteMany
     *
     * Delete product groups
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsDeleteManyAction(Request $request)
    {
        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $id = $request->query->get('id');
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'array<csv,int>', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $asserts[] = new Assert\Count([
            'max' => 1000
        ]);
        $asserts[] = new Assert\Count([
            'min' => 1
        ]);
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->catalogsProductGroupsDeleteMany($id, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                204 => 'Catalogs Product Groups deleted successfully.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                404 => 'Catalogs product group not found.',
                409 => 'Conflict. Can&#39;t delete this catalogs product group.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsGet
     *
     * Get product group
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsGetAction(Request $request, $productGroupId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $productGroupId = $this->deserialize($productGroupId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($productGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsGet($productGroupId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid catalogs product group id parameters.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                404 => 'Catalogs product group not found.',
                409 => 'Conflict. Can&#39;t get a catalogs product group without an existing catalog.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsList
     *
     * List product groups
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsListAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $id = $request->query->get('id');
        $feedId = $request->query->get('feedId');
        $catalogId = $request->query->get('catalogId');
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'array<csv,int>', 'string');
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $catalogId = $this->deserialize($catalogId, 'string', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $asserts[] = new Assert\Count([
            'max' => 1000
        ]);
        $asserts[] = new Assert\Count([
            'min' => 1
        ]);
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($catalogId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsList($id, $feedId, $catalogId, $bookmark, $pageSize, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid feed parameters.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                404 => 'Data feed not found.',
                409 => 'Conflict. Can&#39;t create this catalogs product group with this value.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsProductCountsGet
     *
     * Get product counts
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsProductCountsGetAction(Request $request, $productGroupId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $productGroupId = $this->deserialize($productGroupId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($productGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsProductCountsGet($productGroupId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                404 => 'Product Group Not Found.',
                409 => 'Can&#39;t access this feature without an existing catalog.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation catalogsProductGroupsUpdate
     *
     * Update single product group
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function catalogsProductGroupsUpdateAction(Request $request, $productGroupId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $catalogsProductGroupsUpdateRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $productGroupId = $this->deserialize($productGroupId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $catalogsProductGroupsUpdateRequest = $this->deserialize($catalogsProductGroupsUpdateRequest, 'OpenAPI\Server\Model\CatalogsProductGroupsUpdateRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($productGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsProductGroupsUpdateRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($catalogsProductGroupsUpdateRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->catalogsProductGroupsUpdate($productGroupId, $catalogsProductGroupsUpdateRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                403 => 'Forbidden. Account not approved for catalog product group mutations yet.',
                404 => 'Catalogs product group not found.',
                409 => 'Conflict. Can&#39;t update this catalogs product group to this value.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedProcessingResultsList
     *
     * List feed processing results
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedProcessingResultsListAction(Request $request, $feedId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedProcessingResultsList($feedId, $bookmark, $pageSize, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                404 => 'Feed not found.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsCreate
     *
     * Create feed
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $feedsCreateRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $feedsCreateRequest = $this->deserialize($feedsCreateRequest, 'OpenAPI\Server\Model\FeedsCreateRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\FeedsCreateRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($feedsCreateRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedsCreate($feedsCreateRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                201 => 'Success',
                400 => 'Invalid feed parameters.',
                401 => 'Unauthorized access.',
                403 => 'Business account required.',
                409 => 'User website required.',
                422 => 'Unique feed name is required.',
                501 => 'Not implemented (absent \&quot;default_country\&quot; or \&quot;default_locale\&quot;).',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsDelete
     *
     * Delete feed
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsDeleteAction(Request $request, $feedId)
    {
        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->feedsDelete($feedId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                204 => 'Feed deleted successfully.',
                400 => 'Invalid feed parameters.',
                403 => 'Forbidden. Account not approved for feed mutations yet.',
                404 => 'Data feed not found.',
                409 => 'Conflict. Can&#39;t delete a feed with active promotions.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsGet
     *
     * Get feed
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsGetAction(Request $request, $feedId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedsGet($feedId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid feed parameters.',
                401 => 'Unauthorized access.',
                404 => 'Data feed not found.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsIngest
     *
     * Ingest feed items
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsIngestAction(Request $request, $feedId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedsIngest($feedId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'The ingestion process was successfully started.',
                400 => 'Invalid feed parameters.',
                403 => 'Forbidden. Account not approved for feed mutations yet.',
                404 => 'Data feed not found.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsList
     *
     * List feeds
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsListAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $catalogId = $request->query->get('catalogId');
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $catalogId = $this->deserialize($catalogId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($catalogId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedsList($bookmark, $pageSize, $catalogId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                401 => 'Unauthorized access.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation feedsUpdate
     *
     * Update feed
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function feedsUpdateAction(Request $request, $feedId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $feedsUpdateRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $feedId = $this->deserialize($feedId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $feedsUpdateRequest = $this->deserialize($feedsUpdateRequest, 'OpenAPI\Server\Model\FeedsUpdateRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($feedId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\FeedsUpdateRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($feedsUpdateRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->feedsUpdate($feedId, $feedsUpdateRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid feed parameters.',
                403 => 'Forbidden. Account not approved for feed mutations yet.',
                404 => 'Data feed not found.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation itemsBatchGet
     *
     * Get item batch status
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function itemsBatchGetAction(Request $request, $batchId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $batchId = $this->deserialize($batchId, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($batchId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->itemsBatchGet($batchId, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the requested catalogs items batch',
                401 => 'Not authenticated to access catalogs items batch',
                403 => 'Not authorized to access catalogs items batch',
                404 => 'Catalogs items batch not found',
                405 => 'Method Not Allowed.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation itemsBatchPost
     *
     * Operate on item batch
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function itemsBatchPostAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'client_credentials' required
        // Oauth required
        $securityclient_credentials = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $itemsBatchPostRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $itemsBatchPostRequest = $this->deserialize($itemsBatchPostRequest, 'OpenAPI\Server\Model\ItemsBatchPostRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ItemsBatchPostRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($itemsBatchPostRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'client_credentials'
            $handler->setclient_credentials($securityclient_credentials);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->itemsBatchPost($itemsBatchPostRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the requested catalogs items batch',
                400 => 'Invalid request parameters.',
                401 => 'Not authenticated to post catalogs items',
                403 => 'Not authorized to post catalogs items',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation itemsGet
     *
     * Get catalogs items
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function itemsGetAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $country = $request->query->get('country');
        $language = $request->query->get('language');
        $itemIds = $request->query->get('itemIds');
        $filters = $request->query->get('filters');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $country = $this->deserialize($country, 'string', 'string');
            $language = $this->deserialize($language, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $itemIds = $this->deserialize($itemIds, 'array<multi,string>', 'string');
            $filters = $this->deserialize($filters, 'OpenAPI\Server\Model\CatalogsItemsFilters', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($country, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($language, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($itemIds, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsItemsFilters");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($filters, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->itemsGet($country, $language, $adAccountId, $itemIds, $filters, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the requested catalogs items',
                400 => 'Invalid request parameters.',
                401 => 'Not authorized to access catalogs items',
                403 => 'Not authorized to access catalogs items',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation itemsIssuesList
     *
     * List item issues
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function itemsIssuesListAction(Request $request, $processingResultId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $itemNumbers = $request->query->get('itemNumbers');
        $itemValidationIssue = $request->query->get('itemValidationIssue');
        $adAccountId = $request->query->get('adAccountId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $processingResultId = $this->deserialize($processingResultId, 'string', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $itemNumbers = $this->deserialize($itemNumbers, 'array<multi,int>', 'string');
            $itemValidationIssue = $this->deserialize($itemValidationIssue, '\OpenAPI\Server\Model\OpenAPI\Server\Model\CatalogsItemValidationIssue', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($processingResultId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($itemNumbers, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("\OpenAPI\Server\Model\OpenAPI\Server\Model\CatalogsItemValidationIssue");
        $response = $this->validate($itemValidationIssue, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->itemsIssuesList($processingResultId, $bookmark, $pageSize, $itemNumbers, $itemValidationIssue, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                401 => 'Unauthorized access.',
                404 => 'Processing Result not found.',
                501 => 'Not implemented.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation itemsPost
     *
     * Get catalogs items (POST)
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function itemsPostAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $catalogsItemsRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $catalogsItemsRequest = $this->deserialize($catalogsItemsRequest, 'OpenAPI\Server\Model\CatalogsItemsRequest', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsItemsRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($catalogsItemsRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->itemsPost($catalogsItemsRequest, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the requested catalogs items',
                400 => 'Invalid request',
                401 => 'Not authorized to access catalogs items',
                403 => 'Not authorized to access catalogs items',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation productsByProductGroupFilterList
     *
     * List products by filter
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function productsByProductGroupFilterListAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $adAccountId = $request->query->get('adAccountId');
        $pinMetrics = $request->query->get('pinMetrics', false);
        $catalogsListProductsByFilterRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $catalogsListProductsByFilterRequest = $this->deserialize($catalogsListProductsByFilterRequest, 'OpenAPI\Server\Model\CatalogsListProductsByFilterRequest', $inputFormat);
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $pinMetrics = $this->deserialize($pinMetrics, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsListProductsByFilterRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($catalogsListProductsByFilterRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($pinMetrics, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->productsByProductGroupFilterList($catalogsListProductsByFilterRequest, $bookmark, $pageSize, $adAccountId, $pinMetrics, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                401 => 'Unauthorized access.',
                409 => 'Conflict. Can&#39;t get products.',
                0 => 'Unexpected error.',
                default => 'Unexpected error.',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation reportsCreate
     *
     * Build catalogs report
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function reportsCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $catalogsReportParameters = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $catalogsReportParameters = $this->deserialize($catalogsReportParameters, 'OpenAPI\Server\Model\CatalogsReportParameters', $inputFormat);
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsReportParameters");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($catalogsReportParameters, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->reportsCreate($catalogsReportParameters, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the report token',
                404 => 'Entity (e.g., catalog, feed or processing_result) not found',
                409 => 'Can&#39;t access this feature without an existing catalog.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation reportsGet
     *
     * Get catalogs report
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function reportsGetAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $token = $request->query->get('token');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $token = $this->deserialize($token, 'string', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($token, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->reportsGet($token, $adAccountId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response that contains a link to download the report',
                400 => 'The token you provided is not valid or has expired.',
                409 => 'Can&#39;t access this feature without an existing catalog.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation reportsStats
     *
     * List report stats
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function reportsStatsAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $adAccountId = $request->query->get('adAccountId');
        $pageSize = $request->query->get('pageSize', 25);
        $bookmark = $request->query->get('bookmark');
        $parameters = $request->query->get('parameters');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $parameters = $this->deserialize($parameters, 'OpenAPI\Server\Model\CatalogsReportParameters', 'string');
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CatalogsReportParameters");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($parameters, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->reportsStats($parameters, $adAccountId, $pageSize, $bookmark, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Response containing the diagnostics aggregated counters',
                401 => 'Not authorized to access catalogs',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return CatalogsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('catalogs');
    }
}
