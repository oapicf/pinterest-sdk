<?php

/**
 * BusinessAccessAssetsController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\BusinessAccessAssetsApiInterface;
use OpenAPI\Server\Model\BusinessAssetMembersGet200Response;
use OpenAPI\Server\Model\BusinessAssetPartnersGet200Response;
use OpenAPI\Server\Model\BusinessAssetsGet200Response;
use OpenAPI\Server\Model\BusinessMemberAssetsGet200Response;
use OpenAPI\Server\Model\BusinessMembersAssetAccessDeleteRequest;
use OpenAPI\Server\Model\BusinessPartnerAssetAccessGet200Response;
use OpenAPI\Server\Model\CreateAssetGroupBody;
use OpenAPI\Server\Model\CreateAssetGroupResponse;
use OpenAPI\Server\Model\DeleteAssetGroupBody;
use OpenAPI\Server\Model\DeleteAssetGroupResponse;
use OpenAPI\Server\Model\DeleteMemberAccessResultsResponseArray;
use OpenAPI\Server\Model\DeletePartnerAssetAccessBody;
use OpenAPI\Server\Model\DeletePartnerAssetsResultsResponseArray;
use OpenAPI\Server\Model\Error;
use OpenAPI\Server\Model\PartnerType;
use OpenAPI\Server\Model\PermissionsWithOwner;
use OpenAPI\Server\Model\UpdateAssetGroupBody;
use OpenAPI\Server\Model\UpdateAssetGroupResponse;
use OpenAPI\Server\Model\UpdateMemberAssetAccessBody;
use OpenAPI\Server\Model\UpdateMemberAssetsResultsResponseArray;
use OpenAPI\Server\Model\UpdatePartnerAssetAccessBody;
use OpenAPI\Server\Model\UpdatePartnerAssetsResultsResponseArray;

/**
 * BusinessAccessAssetsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class BusinessAccessAssetsController extends Controller
{

    /**
     * Operation assetGroupCreate
     *
     * Create a new asset group.
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function assetGroupCreateAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $createAssetGroupBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $createAssetGroupBody = $this->deserialize($createAssetGroupBody, 'OpenAPI\Server\Model\CreateAssetGroupBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\CreateAssetGroupBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($createAssetGroupBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->assetGroupCreate($businessId, $createAssetGroupBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation assetGroupDelete
     *
     * Delete asset groups.
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function assetGroupDeleteAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $deleteAssetGroupBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $deleteAssetGroupBody = $this->deserialize($deleteAssetGroupBody, 'OpenAPI\Server\Model\DeleteAssetGroupBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\DeleteAssetGroupBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($deleteAssetGroupBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->assetGroupDelete($businessId, $deleteAssetGroupBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation assetGroupUpdate
     *
     * Update asset groups.
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function assetGroupUpdateAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateAssetGroupBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateAssetGroupBody = $this->deserialize($updateAssetGroupBody, 'OpenAPI\Server\Model\UpdateAssetGroupBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateAssetGroupBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateAssetGroupBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->assetGroupUpdate($businessId, $updateAssetGroupBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'Invalid parameters.',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessAssetMembersGet
     *
     * Get members with access to asset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessAssetMembersGetAction(Request $request, $businessId, $assetId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);
        $startIndex = $request->query->get('startIndex', 0);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $assetId = $this->deserialize($assetId, 'string', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $startIndex = $this->deserialize($startIndex, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($assetId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(0);
        $response = $this->validate($startIndex, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessAssetMembersGet($businessId, $assetId, $bookmark, $pageSize, $startIndex, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Sucess',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessAssetPartnersGet
     *
     * Get partners with access to asset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessAssetPartnersGetAction(Request $request, $businessId, $assetId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $startIndex = $request->query->get('startIndex', 0);
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $assetId = $this->deserialize($assetId, 'string', 'string');
            $startIndex = $this->deserialize($startIndex, 'int', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($assetId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(0);
        $response = $this->validate($startIndex, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessAssetPartnersGet($businessId, $assetId, $startIndex, $bookmark, $pageSize, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Sucess',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessAssetsGet
     *
     * List business assets
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessAssetsGetAction(Request $request, $businessId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $permissions = $request->query->get('permissions');
        $childAssetId = $request->query->get('childAssetId');
        $assetGroupId = $request->query->get('assetGroupId');
        $assetType = $request->query->get('assetType', 'AD_ACCOUNT');
        $startIndex = $request->query->get('startIndex', 0);
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $permissions = $this->deserialize($permissions, 'array<multi,OpenAPI\Server\Model\PermissionsWithOwner>', 'string');
            $childAssetId = $this->deserialize($childAssetId, 'string', 'string');
            $assetGroupId = $this->deserialize($assetGroupId, 'string', 'string');
            $assetType = $this->deserialize($assetType, 'string', 'string');
            $startIndex = $this->deserialize($startIndex, 'int', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\PermissionsWithOwner"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($permissions, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($childAssetId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($assetGroupId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "AD_ACCOUNT", "PROFILE", "ASSET_GROUP" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($assetType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(0);
        $response = $this->validate($startIndex, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessAssetsGet($businessId, $permissions, $childAssetId, $assetGroupId, $assetType, $startIndex, $bookmark, $pageSize, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessMemberAssetsGet
     *
     * Get assets assigned to a member
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessMemberAssetsGetAction(Request $request, $businessId, $memberId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $assetType = $request->query->get('assetType', 'AD_ACCOUNT');
        $startIndex = $request->query->get('startIndex', 0);
        $bookmark = $request->query->get('bookmark');
        $pageSize = $request->query->get('pageSize', 25);

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $memberId = $this->deserialize($memberId, 'string', 'string');
            $assetType = $this->deserialize($assetType, 'string', 'string');
            $startIndex = $this->deserialize($startIndex, 'int', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($memberId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "AD_ACCOUNT", "PROFILE", "ASSET_GROUP" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($assetType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(0);
        $response = $this->validate($startIndex, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessMemberAssetsGet($businessId, $memberId, $assetType, $startIndex, $bookmark, $pageSize, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessMembersAssetAccessDelete
     *
     * Delete member access to asset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessMembersAssetAccessDeleteAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $businessMembersAssetAccessDeleteRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $businessMembersAssetAccessDeleteRequest = $this->deserialize($businessMembersAssetAccessDeleteRequest, 'OpenAPI\Server\Model\BusinessMembersAssetAccessDeleteRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\BusinessMembersAssetAccessDeleteRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($businessMembersAssetAccessDeleteRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessMembersAssetAccessDelete($businessId, $businessMembersAssetAccessDeleteRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'response',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessMembersAssetAccessUpdate
     *
     * Assign/Update member asset permissions
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessMembersAssetAccessUpdateAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateMemberAssetAccessBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateMemberAssetAccessBody = $this->deserialize($updateMemberAssetAccessBody, 'OpenAPI\Server\Model\UpdateMemberAssetAccessBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateMemberAssetAccessBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateMemberAssetAccessBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessMembersAssetAccessUpdate($businessId, $updateMemberAssetAccessBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'response',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation businessPartnerAssetAccessGet
     *
     * Get assets assigned to a partner or assets assigned by a partner
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function businessPartnerAssetAccessGetAction(Request $request, $businessId, $partnerId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $partnerType = $request->query->get('partnerType');
        $assetType = $request->query->get('assetType', 'AD_ACCOUNT');
        $startIndex = $request->query->get('startIndex', 0);
        $pageSize = $request->query->get('pageSize', 25);
        $bookmark = $request->query->get('bookmark');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $partnerId = $this->deserialize($partnerId, 'string', 'string');
            $partnerType = $this->deserialize($partnerType, 'PartnerType', 'string');
            $assetType = $this->deserialize($assetType, 'string', 'string');
            $startIndex = $this->deserialize($startIndex, 'int', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $bookmark = $this->deserialize($bookmark, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($partnerId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("PartnerType");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($partnerType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Choice([ "AD_ACCOUNT", "PROFILE", "ASSET_GROUP" ]);
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($assetType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(0);
        $response = $this->validate($startIndex, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\GreaterThanOrEqual(1);
        $asserts[] = new Assert\LessThanOrEqual(250);
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bookmark, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->businessPartnerAssetAccessGet($businessId, $partnerId, $partnerType, $assetType, $startIndex, $pageSize, $bookmark, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deletePartnerAssetAccessHandlerImpl
     *
     * Delete partner access to asset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deletePartnerAssetAccessHandlerImplAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $deletePartnerAssetAccessBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $deletePartnerAssetAccessBody = $this->deserialize($deletePartnerAssetAccessBody, 'OpenAPI\Server\Model\DeletePartnerAssetAccessBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\DeletePartnerAssetAccessBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($deletePartnerAssetAccessBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->deletePartnerAssetAccessHandlerImpl($businessId, $deletePartnerAssetAccessBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updatePartnerAssetAccessHandlerImpl
     *
     * Assign/Update partner asset permissions
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updatePartnerAssetAccessHandlerImplAction(Request $request, $businessId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updatePartnerAssetAccessBody = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $businessId = $this->deserialize($businessId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updatePartnerAssetAccessBody = $this->deserialize($updatePartnerAssetAccessBody, 'OpenAPI\Server\Model\UpdatePartnerAssetAccessBody', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 20
        ]);
        $asserts[] = new Assert\Length([
            'min' => 1
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($businessId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdatePartnerAssetAccessBody");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updatePartnerAssetAccessBody, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updatePartnerAssetAccessHandlerImpl($businessId, $updatePartnerAssetAccessBody, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                0 => 'Unexpected error',
                default => 'Unexpected error',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return BusinessAccessAssetsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('businessAccessAssets');
    }
}
