<?php

/**
 * ConversionEventsController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\ConversionEventsApiInterface;
use OpenAPI\Server\Model\ConversionApiResponse;
use OpenAPI\Server\Model\ConversionEvents;
use OpenAPI\Server\Model\DetailedError;
use OpenAPI\Server\Model\Error;

/**
 * ConversionEventsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class ConversionEventsController extends Controller
{

    /**
     * Operation eventsCreate
     *
     * Send conversions
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function eventsCreateAction(Request $request, $adAccountId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'pinterest_oauth2' required
        // Oauth required
        $securitypinterest_oauth2 = $request->headers->get('authorization');
        // Authentication 'conversion_token' required
        // HTTP bearer authentication required
        $securityconversion_token = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $test = $request->query->get('test');
        $conversionEvents = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $adAccountId = $this->deserialize($adAccountId, 'string', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $conversionEvents = $this->deserialize($conversionEvents, 'OpenAPI\Server\Model\ConversionEvents', $inputFormat);
            $test = $this->deserialize($test, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $asserts[] = new Assert\Length([
            'max' => 18
        ]);
        $asserts[] = new Assert\Regex("/^\\d+$/");
        $response = $this->validate($adAccountId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ConversionEvents");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($conversionEvents, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($test, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'pinterest_oauth2'
            $handler->setpinterest_oauth2($securitypinterest_oauth2);
            // Set authentication method 'conversion_token'
            $handler->setconversion_token($securityconversion_token);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->eventsCreate($adAccountId, $conversionEvents, $test, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Success',
                400 => 'The request was invalid.',
                401 => 'Not authorized to send conversion events',
                403 => 'Unauthorized access.',
                422 => 'Not all events were successfully processed.',
                429 => 'This request exceeded a rate limit. This can happen if the client exceeds one of the published rate limits within a short time window.',
                503 => 'The endpoint has been ramped down and is currently not accepting any traffic.',
                0 => 'Unexpected errors',
                default => 'Unexpected errors',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return ConversionEventsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('conversionEvents');
    }
}
