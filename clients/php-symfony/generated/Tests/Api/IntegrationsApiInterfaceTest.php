<?php
/**
 * IntegrationsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * IntegrationsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\IntegrationsApiInterface
 */
class IntegrationsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for integrationsCommerceDel
     *
     * Delete commerce integration.
     *
     */
    public function testIntegrationsCommerceDel(): void
    {
        $client = self::$client;

        $path = '/integrations/commerce/{external_business_id}';
        $pattern = '{externalBusinessId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for integrationsCommerceDel not implemented');
    }

    /**
     * Test case for integrationsCommerceGet
     *
     * Get commerce integration.
     *
     */
    public function testIntegrationsCommerceGet(): void
    {
        $client = self::$client;

        $path = '/integrations/commerce/{external_business_id}';
        $pattern = '{externalBusinessId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for integrationsCommerceGet not implemented');
    }

    /**
     * Test case for integrationsCommercePatch
     *
     * Update commerce integration.
     *
     */
    public function testIntegrationsCommercePatch(): void
    {
        $client = self::$client;

        $path = '/integrations/commerce/{external_business_id}';
        $pattern = '{externalBusinessId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for integrationsCommercePatch not implemented');
    }

    /**
     * Test case for integrationsCommercePost
     *
     * Create commerce integration.
     *
     */
    public function testIntegrationsCommercePost(): void
    {
        $client = self::$client;

        $path = '/integrations/commerce';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for integrationsCommercePost not implemented');
    }

    /**
     * Test case for integrationsGetById
     *
     * Get integration metadata.
     *
     */
    public function testIntegrationsGetById(): void
    {
        $client = self::$client;

        $path = '/integrations/{id}';
        $pattern = '{id}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for integrationsGetById not implemented');
    }

    /**
     * Test case for integrationsGetList
     *
     * Get integration metadata list.
     *
     */
    public function testIntegrationsGetList(): void
    {
        $client = self::$client;

        $path = '/integrations';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for integrationsGetList not implemented');
    }

    /**
     * Test case for integrationsLogsPost
     *
     * Receives batched logs from integration applications..
     *
     */
    public function testIntegrationsLogsPost(): void
    {
        $client = self::$client;

        $path = '/integrations/logs';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for integrationsLogsPost not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
