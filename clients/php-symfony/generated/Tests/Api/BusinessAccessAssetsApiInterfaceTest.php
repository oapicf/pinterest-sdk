<?php
/**
 * BusinessAccessAssetsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BusinessAccessAssetsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\BusinessAccessAssetsApiInterface
 */
class BusinessAccessAssetsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for assetGroupCreate
     *
     * Create a new asset group..
     *
     */
    public function testAssetGroupCreate(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/asset_groups';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for assetGroupCreate not implemented');
    }

    /**
     * Test case for assetGroupDelete
     *
     * Delete asset groups..
     *
     */
    public function testAssetGroupDelete(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/asset_groups';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for assetGroupDelete not implemented');
    }

    /**
     * Test case for assetGroupUpdate
     *
     * Update asset groups..
     *
     */
    public function testAssetGroupUpdate(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/asset_groups';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for assetGroupUpdate not implemented');
    }

    /**
     * Test case for businessAssetMembersGet
     *
     * Get members with access to asset.
     *
     */
    public function testBusinessAssetMembersGet(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/assets/{asset_id}/members';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{assetId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for businessAssetMembersGet not implemented');
    }

    /**
     * Test case for businessAssetPartnersGet
     *
     * Get partners with access to asset.
     *
     */
    public function testBusinessAssetPartnersGet(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/assets/{asset_id}/partners';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{assetId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for businessAssetPartnersGet not implemented');
    }

    /**
     * Test case for businessAssetsGet
     *
     * List business assets.
     *
     */
    public function testBusinessAssetsGet(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/assets';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for businessAssetsGet not implemented');
    }

    /**
     * Test case for businessMemberAssetsGet
     *
     * Get assets assigned to a member.
     *
     */
    public function testBusinessMemberAssetsGet(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/members/{member_id}/assets';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{memberId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for businessMemberAssetsGet not implemented');
    }

    /**
     * Test case for businessMembersAssetAccessDelete
     *
     * Delete member access to asset.
     *
     */
    public function testBusinessMembersAssetAccessDelete(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/members/assets/access';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for businessMembersAssetAccessDelete not implemented');
    }

    /**
     * Test case for businessMembersAssetAccessUpdate
     *
     * Assign/Update member asset permissions.
     *
     */
    public function testBusinessMembersAssetAccessUpdate(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/members/assets/access';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for businessMembersAssetAccessUpdate not implemented');
    }

    /**
     * Test case for businessPartnerAssetAccessGet
     *
     * Get assets assigned to a partner or assets assigned by a partner.
     *
     */
    public function testBusinessPartnerAssetAccessGet(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/partners/{partner_id}/assets';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{partnerId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for businessPartnerAssetAccessGet not implemented');
    }

    /**
     * Test case for deletePartnerAssetAccessHandlerImpl
     *
     * Delete partner access to asset.
     *
     */
    public function testDeletePartnerAssetAccessHandlerImpl(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/partners/assets';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deletePartnerAssetAccessHandlerImpl not implemented');
    }

    /**
     * Test case for updatePartnerAssetAccessHandlerImpl
     *
     * Assign/Update partner asset permissions.
     *
     */
    public function testUpdatePartnerAssetAccessHandlerImpl(): void
    {
        $client = self::$client;

        $path = '/businesses/{business_id}/partners/assets';
        $pattern = '{businessId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updatePartnerAssetAccessHandlerImpl not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
