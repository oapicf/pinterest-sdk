<?php
/**
 * BillingApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BillingApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\BillingApiInterface
 */
class BillingApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adsCreditRedeem
     *
     * Redeem ad credits.
     *
     */
    public function testAdsCreditRedeem(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ads_credit/redeem';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for adsCreditRedeem not implemented');
    }

    /**
     * Test case for adsCreditsDiscountsGet
     *
     * Get ads credit discounts.
     *
     */
    public function testAdsCreditsDiscountsGet(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ads_credit/discounts';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for adsCreditsDiscountsGet not implemented');
    }

    /**
     * Test case for billingProfilesGet
     *
     * Get billing profiles.
     *
     */
    public function testBillingProfilesGet(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/billing_profiles';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for billingProfilesGet not implemented');
    }

    /**
     * Test case for ssioAccountsGet
     *
     * Get Salesforce account details including bill-to information..
     *
     */
    public function testSsioAccountsGet(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/accounts';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for ssioAccountsGet not implemented');
    }

    /**
     * Test case for ssioInsertionOrderCreate
     *
     * Create insertion order through SSIO..
     *
     */
    public function testSsioInsertionOrderCreate(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/insertion_orders';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for ssioInsertionOrderCreate not implemented');
    }

    /**
     * Test case for ssioInsertionOrderEdit
     *
     * Edit insertion order through SSIO..
     *
     */
    public function testSsioInsertionOrderEdit(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/insertion_orders';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for ssioInsertionOrderEdit not implemented');
    }

    /**
     * Test case for ssioInsertionOrdersStatusGetByAdAccount
     *
     * Get insertion order status by ad account id..
     *
     */
    public function testSsioInsertionOrdersStatusGetByAdAccount(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/insertion_orders/status';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for ssioInsertionOrdersStatusGetByAdAccount not implemented');
    }

    /**
     * Test case for ssioInsertionOrdersStatusGetByPinOrderId
     *
     * Get insertion order status by pin order id..
     *
     */
    public function testSsioInsertionOrdersStatusGetByPinOrderId(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/insertion_orders/{pin_order_id}/status';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pinOrderId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for ssioInsertionOrdersStatusGetByPinOrderId not implemented');
    }

    /**
     * Test case for ssioOrderLinesGetByAdAccount
     *
     * Get Salesforce order lines by ad account id..
     *
     */
    public function testSsioOrderLinesGetByAdAccount(): void
    {
        $client = self::$client;

        $path = '/ad_accounts/{ad_account_id}/ssio/order_lines';
        $pattern = '{adAccountId}';
        $data = $this->genTestData('^\\d+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for ssioOrderLinesGetByAdAccount not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
