<?php
/**
 * UserAccountApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * UserAccountApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\UserAccountApiInterface
 */
class UserAccountApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for boardsUserFollowsList
     *
     * List following boards.
     *
     */
    public function testBoardsUserFollowsList(): void
    {
        $client = self::$client;

        $path = '/user_account/following/boards';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for boardsUserFollowsList not implemented');
    }

    /**
     * Test case for followUserUpdate
     *
     * Follow user.
     *
     */
    public function testFollowUserUpdate(): void
    {
        $client = self::$client;

        $path = '/user_account/following/{username}';
        $pattern = '{username}';
        $data = $this->genTestData('(?!^\\d+$)^.+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for followUserUpdate not implemented');
    }

    /**
     * Test case for followersList
     *
     * List followers.
     *
     */
    public function testFollowersList(): void
    {
        $client = self::$client;

        $path = '/user_account/followers';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for followersList not implemented');
    }

    /**
     * Test case for linkedBusinessAccountsGet
     *
     * List linked businesses.
     *
     */
    public function testLinkedBusinessAccountsGet(): void
    {
        $client = self::$client;

        $path = '/user_account/businesses';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for linkedBusinessAccountsGet not implemented');
    }

    /**
     * Test case for unverifyWebsiteDelete
     *
     * Unverify website.
     *
     */
    public function testUnverifyWebsiteDelete(): void
    {
        $client = self::$client;

        $path = '/user_account/websites';

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for unverifyWebsiteDelete not implemented');
    }

    /**
     * Test case for userAccountAnalytics
     *
     * Get user account analytics.
     *
     */
    public function testUserAccountAnalytics(): void
    {
        $client = self::$client;

        $path = '/user_account/analytics';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userAccountAnalytics not implemented');
    }

    /**
     * Test case for userAccountAnalyticsTopPins
     *
     * Get user account top pins analytics.
     *
     */
    public function testUserAccountAnalyticsTopPins(): void
    {
        $client = self::$client;

        $path = '/user_account/analytics/top_pins';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userAccountAnalyticsTopPins not implemented');
    }

    /**
     * Test case for userAccountAnalyticsTopVideoPins
     *
     * Get user account top video pins analytics.
     *
     */
    public function testUserAccountAnalyticsTopVideoPins(): void
    {
        $client = self::$client;

        $path = '/user_account/analytics/top_video_pins';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userAccountAnalyticsTopVideoPins not implemented');
    }

    /**
     * Test case for userAccountFollowedInterests
     *
     * List following interests.
     *
     */
    public function testUserAccountFollowedInterests(): void
    {
        $client = self::$client;

        $path = '/users/{username}/interests/follow';
        $pattern = '{username}';
        $data = $this->genTestData('(?!^\\d+$)^.+$');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userAccountFollowedInterests not implemented');
    }

    /**
     * Test case for userAccountGet
     *
     * Get user account.
     *
     */
    public function testUserAccountGet(): void
    {
        $client = self::$client;

        $path = '/user_account';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userAccountGet not implemented');
    }

    /**
     * Test case for userFollowingGet
     *
     * List following.
     *
     */
    public function testUserFollowingGet(): void
    {
        $client = self::$client;

        $path = '/user_account/following';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userFollowingGet not implemented');
    }

    /**
     * Test case for userWebsitesGet
     *
     * Get user websites.
     *
     */
    public function testUserWebsitesGet(): void
    {
        $client = self::$client;

        $path = '/user_account/websites';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for userWebsitesGet not implemented');
    }

    /**
     * Test case for verifyWebsiteUpdate
     *
     * Verify website.
     *
     */
    public function testVerifyWebsiteUpdate(): void
    {
        $client = self::$client;

        $path = '/user_account/websites';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for verifyWebsiteUpdate not implemented');
    }

    /**
     * Test case for websiteVerificationGet
     *
     * Get user verification code for website claiming.
     *
     */
    public function testWebsiteVerificationGet(): void
    {
        $client = self::$client;

        $path = '/user_account/websites/verification';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for websiteVerificationGet not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
