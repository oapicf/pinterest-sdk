<?php
/**
 * ConversionEventsUserDataTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ConversionEventsUserData;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ConversionEventsUserDataTest Class Doc Comment
 *
 * @category    Class
 * @description Object containing customer information data. Note, It is required at least one of 1) em, 2) hashed_maids or 3) pair client_ip_address + client_user_agent.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\ConversionEventsUserData
 */
class ConversionEventsUserDataTest extends TestCase
{
    protected ConversionEventsUserData|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(ConversionEventsUserData::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(ConversionEventsUserData::class));
        $this->assertInstanceOf(ConversionEventsUserData::class, $this->object);
    }

    /**
     * Test attribute "ph"
     *
     * @group unit
     * @small
     */
    public function testPropertyPh(): void
    {
        $this->markTestSkipped('Test for property ph not implemented');
    }

    /**
     * Test attribute "ge"
     *
     * @group unit
     * @small
     */
    public function testPropertyGe(): void
    {
        $this->markTestSkipped('Test for property ge not implemented');
    }

    /**
     * Test attribute "db"
     *
     * @group unit
     * @small
     */
    public function testPropertyDb(): void
    {
        $this->markTestSkipped('Test for property db not implemented');
    }

    /**
     * Test attribute "ln"
     *
     * @group unit
     * @small
     */
    public function testPropertyLn(): void
    {
        $this->markTestSkipped('Test for property ln not implemented');
    }

    /**
     * Test attribute "fn"
     *
     * @group unit
     * @small
     */
    public function testPropertyFn(): void
    {
        $this->markTestSkipped('Test for property fn not implemented');
    }

    /**
     * Test attribute "ct"
     *
     * @group unit
     * @small
     */
    public function testPropertyCt(): void
    {
        $this->markTestSkipped('Test for property ct not implemented');
    }

    /**
     * Test attribute "st"
     *
     * @group unit
     * @small
     */
    public function testPropertySt(): void
    {
        $this->markTestSkipped('Test for property st not implemented');
    }

    /**
     * Test attribute "zp"
     *
     * @group unit
     * @small
     */
    public function testPropertyZp(): void
    {
        $this->markTestSkipped('Test for property zp not implemented');
    }

    /**
     * Test attribute "country"
     *
     * @group unit
     * @small
     */
    public function testPropertyCountry(): void
    {
        $this->markTestSkipped('Test for property country not implemented');
    }

    /**
     * Test attribute "externalId"
     *
     * @group unit
     * @small
     */
    public function testPropertyExternalId(): void
    {
        $this->markTestSkipped('Test for property externalId not implemented');
    }

    /**
     * Test attribute "clickId"
     *
     * @group unit
     * @small
     */
    public function testPropertyClickId(): void
    {
        $this->markTestSkipped('Test for property clickId not implemented');
    }

    /**
     * Test attribute "partnerId"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartnerId(): void
    {
        $this->markTestSkipped('Test for property partnerId not implemented');
    }

    /**
     * Test attribute "em"
     *
     * @group unit
     * @small
     */
    public function testPropertyEm(): void
    {
        $this->markTestSkipped('Test for property em not implemented');
    }

    /**
     * Test attribute "hashedMaids"
     *
     * @group unit
     * @small
     */
    public function testPropertyHashedMaids(): void
    {
        $this->markTestSkipped('Test for property hashedMaids not implemented');
    }

    /**
     * Test attribute "clientIpAddress"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientIpAddress(): void
    {
        $this->markTestSkipped('Test for property clientIpAddress not implemented');
    }

    /**
     * Test attribute "clientUserAgent"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientUserAgent(): void
    {
        $this->markTestSkipped('Test for property clientUserAgent not implemented');
    }
}
