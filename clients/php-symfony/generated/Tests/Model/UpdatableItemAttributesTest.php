<?php
/**
 * UpdatableItemAttributesTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\UpdatableItemAttributes;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * UpdatableItemAttributesTest Class Doc Comment
 *
 * @category    Class
 * @description UpdatableItemAttributes
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\UpdatableItemAttributes
 */
class UpdatableItemAttributesTest extends TestCase
{
    protected UpdatableItemAttributes|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(UpdatableItemAttributes::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(UpdatableItemAttributes::class));
        $this->assertInstanceOf(UpdatableItemAttributes::class, $this->object);
    }

    /**
     * Test attribute "adLink"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdLink(): void
    {
        $this->markTestSkipped('Test for property adLink not implemented');
    }

    /**
     * Test attribute "adult"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdult(): void
    {
        $this->markTestSkipped('Test for property adult not implemented');
    }

    /**
     * Test attribute "ageGroup"
     *
     * @group unit
     * @small
     */
    public function testPropertyAgeGroup(): void
    {
        $this->markTestSkipped('Test for property ageGroup not implemented');
    }

    /**
     * Test attribute "availability"
     *
     * @group unit
     * @small
     */
    public function testPropertyAvailability(): void
    {
        $this->markTestSkipped('Test for property availability not implemented');
    }

    /**
     * Test attribute "averageReviewRating"
     *
     * @group unit
     * @small
     */
    public function testPropertyAverageReviewRating(): void
    {
        $this->markTestSkipped('Test for property averageReviewRating not implemented');
    }

    /**
     * Test attribute "brand"
     *
     * @group unit
     * @small
     */
    public function testPropertyBrand(): void
    {
        $this->markTestSkipped('Test for property brand not implemented');
    }

    /**
     * Test attribute "checkoutEnabled"
     *
     * @group unit
     * @small
     */
    public function testPropertyCheckoutEnabled(): void
    {
        $this->markTestSkipped('Test for property checkoutEnabled not implemented');
    }

    /**
     * Test attribute "color"
     *
     * @group unit
     * @small
     */
    public function testPropertyColor(): void
    {
        $this->markTestSkipped('Test for property color not implemented');
    }

    /**
     * Test attribute "condition"
     *
     * @group unit
     * @small
     */
    public function testPropertyCondition(): void
    {
        $this->markTestSkipped('Test for property condition not implemented');
    }

    /**
     * Test attribute "customLabel0"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel0(): void
    {
        $this->markTestSkipped('Test for property customLabel0 not implemented');
    }

    /**
     * Test attribute "customLabel1"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel1(): void
    {
        $this->markTestSkipped('Test for property customLabel1 not implemented');
    }

    /**
     * Test attribute "customLabel2"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel2(): void
    {
        $this->markTestSkipped('Test for property customLabel2 not implemented');
    }

    /**
     * Test attribute "customLabel3"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel3(): void
    {
        $this->markTestSkipped('Test for property customLabel3 not implemented');
    }

    /**
     * Test attribute "customLabel4"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel4(): void
    {
        $this->markTestSkipped('Test for property customLabel4 not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "freeShippingLabel"
     *
     * @group unit
     * @small
     */
    public function testPropertyFreeShippingLabel(): void
    {
        $this->markTestSkipped('Test for property freeShippingLabel not implemented');
    }

    /**
     * Test attribute "freeShippingLimit"
     *
     * @group unit
     * @small
     */
    public function testPropertyFreeShippingLimit(): void
    {
        $this->markTestSkipped('Test for property freeShippingLimit not implemented');
    }

    /**
     * Test attribute "gender"
     *
     * @group unit
     * @small
     */
    public function testPropertyGender(): void
    {
        $this->markTestSkipped('Test for property gender not implemented');
    }

    /**
     * Test attribute "googleProductCategory"
     *
     * @group unit
     * @small
     */
    public function testPropertyGoogleProductCategory(): void
    {
        $this->markTestSkipped('Test for property googleProductCategory not implemented');
    }

    /**
     * Test attribute "gtin"
     *
     * @group unit
     * @small
     */
    public function testPropertyGtin(): void
    {
        $this->markTestSkipped('Test for property gtin not implemented');
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "itemGroupId"
     *
     * @group unit
     * @small
     */
    public function testPropertyItemGroupId(): void
    {
        $this->markTestSkipped('Test for property itemGroupId not implemented');
    }

    /**
     * Test attribute "lastUpdatedTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastUpdatedTime(): void
    {
        $this->markTestSkipped('Test for property lastUpdatedTime not implemented');
    }

    /**
     * Test attribute "link"
     *
     * @group unit
     * @small
     */
    public function testPropertyLink(): void
    {
        $this->markTestSkipped('Test for property link not implemented');
    }

    /**
     * Test attribute "material"
     *
     * @group unit
     * @small
     */
    public function testPropertyMaterial(): void
    {
        $this->markTestSkipped('Test for property material not implemented');
    }

    /**
     * Test attribute "minAdPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyMinAdPrice(): void
    {
        $this->markTestSkipped('Test for property minAdPrice not implemented');
    }

    /**
     * Test attribute "mobileLink"
     *
     * @group unit
     * @small
     */
    public function testPropertyMobileLink(): void
    {
        $this->markTestSkipped('Test for property mobileLink not implemented');
    }

    /**
     * Test attribute "mpn"
     *
     * @group unit
     * @small
     */
    public function testPropertyMpn(): void
    {
        $this->markTestSkipped('Test for property mpn not implemented');
    }

    /**
     * Test attribute "numberOfRatings"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfRatings(): void
    {
        $this->markTestSkipped('Test for property numberOfRatings not implemented');
    }

    /**
     * Test attribute "numberOfReviews"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfReviews(): void
    {
        $this->markTestSkipped('Test for property numberOfReviews not implemented');
    }

    /**
     * Test attribute "pattern"
     *
     * @group unit
     * @small
     */
    public function testPropertyPattern(): void
    {
        $this->markTestSkipped('Test for property pattern not implemented');
    }

    /**
     * Test attribute "price"
     *
     * @group unit
     * @small
     */
    public function testPropertyPrice(): void
    {
        $this->markTestSkipped('Test for property price not implemented');
    }

    /**
     * Test attribute "productType"
     *
     * @group unit
     * @small
     */
    public function testPropertyProductType(): void
    {
        $this->markTestSkipped('Test for property productType not implemented');
    }

    /**
     * Test attribute "salePrice"
     *
     * @group unit
     * @small
     */
    public function testPropertySalePrice(): void
    {
        $this->markTestSkipped('Test for property salePrice not implemented');
    }

    /**
     * Test attribute "shipping"
     *
     * @group unit
     * @small
     */
    public function testPropertyShipping(): void
    {
        $this->markTestSkipped('Test for property shipping not implemented');
    }

    /**
     * Test attribute "shippingHeight"
     *
     * @group unit
     * @small
     */
    public function testPropertyShippingHeight(): void
    {
        $this->markTestSkipped('Test for property shippingHeight not implemented');
    }

    /**
     * Test attribute "shippingWeight"
     *
     * @group unit
     * @small
     */
    public function testPropertyShippingWeight(): void
    {
        $this->markTestSkipped('Test for property shippingWeight not implemented');
    }

    /**
     * Test attribute "shippingWidth"
     *
     * @group unit
     * @small
     */
    public function testPropertyShippingWidth(): void
    {
        $this->markTestSkipped('Test for property shippingWidth not implemented');
    }

    /**
     * Test attribute "size"
     *
     * @group unit
     * @small
     */
    public function testPropertySize(): void
    {
        $this->markTestSkipped('Test for property size not implemented');
    }

    /**
     * Test attribute "sizeSystem"
     *
     * @group unit
     * @small
     */
    public function testPropertySizeSystem(): void
    {
        $this->markTestSkipped('Test for property sizeSystem not implemented');
    }

    /**
     * Test attribute "sizeType"
     *
     * @group unit
     * @small
     */
    public function testPropertySizeType(): void
    {
        $this->markTestSkipped('Test for property sizeType not implemented');
    }

    /**
     * Test attribute "tax"
     *
     * @group unit
     * @small
     */
    public function testPropertyTax(): void
    {
        $this->markTestSkipped('Test for property tax not implemented');
    }

    /**
     * Test attribute "title"
     *
     * @group unit
     * @small
     */
    public function testPropertyTitle(): void
    {
        $this->markTestSkipped('Test for property title not implemented');
    }

    /**
     * Test attribute "variantNames"
     *
     * @group unit
     * @small
     */
    public function testPropertyVariantNames(): void
    {
        $this->markTestSkipped('Test for property variantNames not implemented');
    }

    /**
     * Test attribute "variantValues"
     *
     * @group unit
     * @small
     */
    public function testPropertyVariantValues(): void
    {
        $this->markTestSkipped('Test for property variantValues not implemented');
    }
}
