<?php
/**
 * ProductGroupPromotionResponseElementTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ProductGroupPromotionResponseElement;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ProductGroupPromotionResponseElementTest Class Doc Comment
 *
 * @category    Class
 * @description ProductGroupPromotionResponseElement
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\ProductGroupPromotionResponseElement
 */
class ProductGroupPromotionResponseElementTest extends TestCase
{
    protected ProductGroupPromotionResponseElement|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(ProductGroupPromotionResponseElement::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(ProductGroupPromotionResponseElement::class));
        $this->assertInstanceOf(ProductGroupPromotionResponseElement::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "adGroupId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdGroupId(): void
    {
        $this->markTestSkipped('Test for property adGroupId not implemented');
    }

    /**
     * Test attribute "bidInMicroCurrency"
     *
     * @group unit
     * @small
     */
    public function testPropertyBidInMicroCurrency(): void
    {
        $this->markTestSkipped('Test for property bidInMicroCurrency not implemented');
    }

    /**
     * Test attribute "included"
     *
     * @group unit
     * @small
     */
    public function testPropertyIncluded(): void
    {
        $this->markTestSkipped('Test for property included not implemented');
    }

    /**
     * Test attribute "definition"
     *
     * @group unit
     * @small
     */
    public function testPropertyDefinition(): void
    {
        $this->markTestSkipped('Test for property definition not implemented');
    }

    /**
     * Test attribute "relativeDefinition"
     *
     * @group unit
     * @small
     */
    public function testPropertyRelativeDefinition(): void
    {
        $this->markTestSkipped('Test for property relativeDefinition not implemented');
    }

    /**
     * Test attribute "parentId"
     *
     * @group unit
     * @small
     */
    public function testPropertyParentId(): void
    {
        $this->markTestSkipped('Test for property parentId not implemented');
    }

    /**
     * Test attribute "slideshowCollectionsTitle"
     *
     * @group unit
     * @small
     */
    public function testPropertySlideshowCollectionsTitle(): void
    {
        $this->markTestSkipped('Test for property slideshowCollectionsTitle not implemented');
    }

    /**
     * Test attribute "slideshowCollectionsDescription"
     *
     * @group unit
     * @small
     */
    public function testPropertySlideshowCollectionsDescription(): void
    {
        $this->markTestSkipped('Test for property slideshowCollectionsDescription not implemented');
    }

    /**
     * Test attribute "isMdl"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsMdl(): void
    {
        $this->markTestSkipped('Test for property isMdl not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "trackingUrl"
     *
     * @group unit
     * @small
     */
    public function testPropertyTrackingUrl(): void
    {
        $this->markTestSkipped('Test for property trackingUrl not implemented');
    }

    /**
     * Test attribute "catalogProductGroupId"
     *
     * @group unit
     * @small
     */
    public function testPropertyCatalogProductGroupId(): void
    {
        $this->markTestSkipped('Test for property catalogProductGroupId not implemented');
    }

    /**
     * Test attribute "catalogProductGroupName"
     *
     * @group unit
     * @small
     */
    public function testPropertyCatalogProductGroupName(): void
    {
        $this->markTestSkipped('Test for property catalogProductGroupName not implemented');
    }

    /**
     * Test attribute "collectionsHeroPinId"
     *
     * @group unit
     * @small
     */
    public function testPropertyCollectionsHeroPinId(): void
    {
        $this->markTestSkipped('Test for property collectionsHeroPinId not implemented');
    }

    /**
     * Test attribute "collectionsHeroDestinationUrl"
     *
     * @group unit
     * @small
     */
    public function testPropertyCollectionsHeroDestinationUrl(): void
    {
        $this->markTestSkipped('Test for property collectionsHeroDestinationUrl not implemented');
    }

    /**
     * Test attribute "gridClickType"
     *
     * @group unit
     * @small
     */
    public function testPropertyGridClickType(): void
    {
        $this->markTestSkipped('Test for property gridClickType not implemented');
    }

    /**
     * Test attribute "creativeType"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreativeType(): void
    {
        $this->markTestSkipped('Test for property creativeType not implemented');
    }
}
