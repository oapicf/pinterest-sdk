<?php
/**
 * CatalogsUpdatableHotelAttributesTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CatalogsUpdatableHotelAttributes;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CatalogsUpdatableHotelAttributesTest Class Doc Comment
 *
 * @category    Class
 * @description CatalogsUpdatableHotelAttributes
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CatalogsUpdatableHotelAttributes
 */
class CatalogsUpdatableHotelAttributesTest extends TestCase
{
    protected CatalogsUpdatableHotelAttributes|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CatalogsUpdatableHotelAttributes::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CatalogsUpdatableHotelAttributes::class));
        $this->assertInstanceOf(CatalogsUpdatableHotelAttributes::class, $this->object);
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "link"
     *
     * @group unit
     * @small
     */
    public function testPropertyLink(): void
    {
        $this->markTestSkipped('Test for property link not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "brand"
     *
     * @group unit
     * @small
     */
    public function testPropertyBrand(): void
    {
        $this->markTestSkipped('Test for property brand not implemented');
    }

    /**
     * Test attribute "latitude"
     *
     * @group unit
     * @small
     */
    public function testPropertyLatitude(): void
    {
        $this->markTestSkipped('Test for property latitude not implemented');
    }

    /**
     * Test attribute "longitude"
     *
     * @group unit
     * @small
     */
    public function testPropertyLongitude(): void
    {
        $this->markTestSkipped('Test for property longitude not implemented');
    }

    /**
     * Test attribute "neighborhood"
     *
     * @group unit
     * @small
     */
    public function testPropertyNeighborhood(): void
    {
        $this->markTestSkipped('Test for property neighborhood not implemented');
    }

    /**
     * Test attribute "address"
     *
     * @group unit
     * @small
     */
    public function testPropertyAddress(): void
    {
        $this->markTestSkipped('Test for property address not implemented');
    }

    /**
     * Test attribute "customLabel0"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel0(): void
    {
        $this->markTestSkipped('Test for property customLabel0 not implemented');
    }

    /**
     * Test attribute "customLabel1"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel1(): void
    {
        $this->markTestSkipped('Test for property customLabel1 not implemented');
    }

    /**
     * Test attribute "customLabel2"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel2(): void
    {
        $this->markTestSkipped('Test for property customLabel2 not implemented');
    }

    /**
     * Test attribute "customLabel3"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel3(): void
    {
        $this->markTestSkipped('Test for property customLabel3 not implemented');
    }

    /**
     * Test attribute "customLabel4"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomLabel4(): void
    {
        $this->markTestSkipped('Test for property customLabel4 not implemented');
    }

    /**
     * Test attribute "category"
     *
     * @group unit
     * @small
     */
    public function testPropertyCategory(): void
    {
        $this->markTestSkipped('Test for property category not implemented');
    }

    /**
     * Test attribute "basePrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyBasePrice(): void
    {
        $this->markTestSkipped('Test for property basePrice not implemented');
    }

    /**
     * Test attribute "salePrice"
     *
     * @group unit
     * @small
     */
    public function testPropertySalePrice(): void
    {
        $this->markTestSkipped('Test for property salePrice not implemented');
    }

    /**
     * Test attribute "guestRatings"
     *
     * @group unit
     * @small
     */
    public function testPropertyGuestRatings(): void
    {
        $this->markTestSkipped('Test for property guestRatings not implemented');
    }
}
