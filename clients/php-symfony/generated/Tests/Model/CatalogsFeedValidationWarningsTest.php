<?php
/**
 * CatalogsFeedValidationWarningsTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CatalogsFeedValidationWarnings;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CatalogsFeedValidationWarningsTest Class Doc Comment
 *
 * @category    Class
 * @description CatalogsFeedValidationWarnings
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CatalogsFeedValidationWarnings
 */
class CatalogsFeedValidationWarningsTest extends TestCase
{
    protected CatalogsFeedValidationWarnings|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CatalogsFeedValidationWarnings::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CatalogsFeedValidationWarnings::class));
        $this->assertInstanceOf(CatalogsFeedValidationWarnings::class, $this->object);
    }

    /**
     * Test attribute "aDLINKFORMATWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyADLINKFORMATWARNING(): void
    {
        $this->markTestSkipped('Test for property aDLINKFORMATWARNING not implemented');
    }

    /**
     * Test attribute "aDLINKSAMEASLINK"
     *
     * @group unit
     * @small
     */
    public function testPropertyADLINKSAMEASLINK(): void
    {
        $this->markTestSkipped('Test for property aDLINKSAMEASLINK not implemented');
    }

    /**
     * Test attribute "tITLELENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyTITLELENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property tITLELENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "dESCRIPTIONLENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyDESCRIPTIONLENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property dESCRIPTIONLENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "gENDERINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyGENDERINVALID(): void
    {
        $this->markTestSkipped('Test for property gENDERINVALID not implemented');
    }

    /**
     * Test attribute "aGEGROUPINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyAGEGROUPINVALID(): void
    {
        $this->markTestSkipped('Test for property aGEGROUPINVALID not implemented');
    }

    /**
     * Test attribute "sIZETYPEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySIZETYPEINVALID(): void
    {
        $this->markTestSkipped('Test for property sIZETYPEINVALID not implemented');
    }

    /**
     * Test attribute "sIZESYSTEMINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySIZESYSTEMINVALID(): void
    {
        $this->markTestSkipped('Test for property sIZESYSTEMINVALID not implemented');
    }

    /**
     * Test attribute "lINKFORMATWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyLINKFORMATWARNING(): void
    {
        $this->markTestSkipped('Test for property lINKFORMATWARNING not implemented');
    }

    /**
     * Test attribute "sALESPRICEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySALESPRICEINVALID(): void
    {
        $this->markTestSkipped('Test for property sALESPRICEINVALID not implemented');
    }

    /**
     * Test attribute "pRODUCTCATEGORYDEPTHWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTCATEGORYDEPTHWARNING(): void
    {
        $this->markTestSkipped('Test for property pRODUCTCATEGORYDEPTHWARNING not implemented');
    }

    /**
     * Test attribute "aDWORDSFORMATWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyADWORDSFORMATWARNING(): void
    {
        $this->markTestSkipped('Test for property aDWORDSFORMATWARNING not implemented');
    }

    /**
     * Test attribute "aDWORDSSAMEASLINK"
     *
     * @group unit
     * @small
     */
    public function testPropertyADWORDSSAMEASLINK(): void
    {
        $this->markTestSkipped('Test for property aDWORDSSAMEASLINK not implemented');
    }

    /**
     * Test attribute "dUPLICATEHEADERS"
     *
     * @group unit
     * @small
     */
    public function testPropertyDUPLICATEHEADERS(): void
    {
        $this->markTestSkipped('Test for property dUPLICATEHEADERS not implemented');
    }

    /**
     * Test attribute "fETCHSAMESIGNATURE"
     *
     * @group unit
     * @small
     */
    public function testPropertyFETCHSAMESIGNATURE(): void
    {
        $this->markTestSkipped('Test for property fETCHSAMESIGNATURE not implemented');
    }

    /**
     * Test attribute "aDDITIONALIMAGELINKLENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyADDITIONALIMAGELINKLENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property aDDITIONALIMAGELINKLENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "aDDITIONALIMAGELINKWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyADDITIONALIMAGELINKWARNING(): void
    {
        $this->markTestSkipped('Test for property aDDITIONALIMAGELINKWARNING not implemented');
    }

    /**
     * Test attribute "iMAGELINKWARNING"
     *
     * @group unit
     * @small
     */
    public function testPropertyIMAGELINKWARNING(): void
    {
        $this->markTestSkipped('Test for property iMAGELINKWARNING not implemented');
    }

    /**
     * Test attribute "sHIPPINGINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySHIPPINGINVALID(): void
    {
        $this->markTestSkipped('Test for property sHIPPINGINVALID not implemented');
    }

    /**
     * Test attribute "tAXINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyTAXINVALID(): void
    {
        $this->markTestSkipped('Test for property tAXINVALID not implemented');
    }

    /**
     * Test attribute "sHIPPINGWEIGHTINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySHIPPINGWEIGHTINVALID(): void
    {
        $this->markTestSkipped('Test for property sHIPPINGWEIGHTINVALID not implemented');
    }

    /**
     * Test attribute "eXPIRATIONDATEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyEXPIRATIONDATEINVALID(): void
    {
        $this->markTestSkipped('Test for property eXPIRATIONDATEINVALID not implemented');
    }

    /**
     * Test attribute "aVAILABILITYDATEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyAVAILABILITYDATEINVALID(): void
    {
        $this->markTestSkipped('Test for property aVAILABILITYDATEINVALID not implemented');
    }

    /**
     * Test attribute "sALEDATEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySALEDATEINVALID(): void
    {
        $this->markTestSkipped('Test for property sALEDATEINVALID not implemented');
    }

    /**
     * Test attribute "wEIGHTUNITINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyWEIGHTUNITINVALID(): void
    {
        $this->markTestSkipped('Test for property wEIGHTUNITINVALID not implemented');
    }

    /**
     * Test attribute "iSBUNDLEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyISBUNDLEINVALID(): void
    {
        $this->markTestSkipped('Test for property iSBUNDLEINVALID not implemented');
    }

    /**
     * Test attribute "uPDATEDTIMEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyUPDATEDTIMEINVALID(): void
    {
        $this->markTestSkipped('Test for property uPDATEDTIMEINVALID not implemented');
    }

    /**
     * Test attribute "cUSTOMLABELLENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABELLENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABELLENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPELENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPELENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPELENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "tOOMANYADDITIONALIMAGELINKS"
     *
     * @group unit
     * @small
     */
    public function testPropertyTOOMANYADDITIONALIMAGELINKS(): void
    {
        $this->markTestSkipped('Test for property tOOMANYADDITIONALIMAGELINKS not implemented');
    }

    /**
     * Test attribute "mULTIPACKINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyMULTIPACKINVALID(): void
    {
        $this->markTestSkipped('Test for property mULTIPACKINVALID not implemented');
    }

    /**
     * Test attribute "iNDEXEDPRODUCTCOUNTLARGEDELTA"
     *
     * @group unit
     * @small
     */
    public function testPropertyINDEXEDPRODUCTCOUNTLARGEDELTA(): void
    {
        $this->markTestSkipped('Test for property iNDEXEDPRODUCTCOUNTLARGEDELTA not implemented');
    }

    /**
     * Test attribute "iTEMADDITIONALIMAGEDOWNLOADFAILURE"
     *
     * @group unit
     * @small
     */
    public function testPropertyITEMADDITIONALIMAGEDOWNLOADFAILURE(): void
    {
        $this->markTestSkipped('Test for property iTEMADDITIONALIMAGEDOWNLOADFAILURE not implemented');
    }

    /**
     * Test attribute "oPTIONALPRODUCTCATEGORYMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyOPTIONALPRODUCTCATEGORYMISSING(): void
    {
        $this->markTestSkipped('Test for property oPTIONALPRODUCTCATEGORYMISSING not implemented');
    }

    /**
     * Test attribute "oPTIONALPRODUCTCATEGORYINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyOPTIONALPRODUCTCATEGORYINVALID(): void
    {
        $this->markTestSkipped('Test for property oPTIONALPRODUCTCATEGORYINVALID not implemented');
    }

    /**
     * Test attribute "oPTIONALCONDITIONMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyOPTIONALCONDITIONMISSING(): void
    {
        $this->markTestSkipped('Test for property oPTIONALCONDITIONMISSING not implemented');
    }

    /**
     * Test attribute "oPTIONALCONDITIONINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyOPTIONALCONDITIONINVALID(): void
    {
        $this->markTestSkipped('Test for property oPTIONALCONDITIONINVALID not implemented');
    }

    /**
     * Test attribute "iOSDEEPLINKINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyIOSDEEPLINKINVALID(): void
    {
        $this->markTestSkipped('Test for property iOSDEEPLINKINVALID not implemented');
    }

    /**
     * Test attribute "aNDROIDDEEPLINKINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyANDROIDDEEPLINKINVALID(): void
    {
        $this->markTestSkipped('Test for property aNDROIDDEEPLINKINVALID not implemented');
    }

    /**
     * Test attribute "uTMSOURCEAUTOCORRECTED"
     *
     * @group unit
     * @small
     */
    public function testPropertyUTMSOURCEAUTOCORRECTED(): void
    {
        $this->markTestSkipped('Test for property uTMSOURCEAUTOCORRECTED not implemented');
    }

    /**
     * Test attribute "cOUNTRYDOESNOTMAPTOCURRENCY"
     *
     * @group unit
     * @small
     */
    public function testPropertyCOUNTRYDOESNOTMAPTOCURRENCY(): void
    {
        $this->markTestSkipped('Test for property cOUNTRYDOESNOTMAPTOCURRENCY not implemented');
    }

    /**
     * Test attribute "mINADPRICEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyMINADPRICEINVALID(): void
    {
        $this->markTestSkipped('Test for property mINADPRICEINVALID not implemented');
    }

    /**
     * Test attribute "gTININVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyGTININVALID(): void
    {
        $this->markTestSkipped('Test for property gTININVALID not implemented');
    }

    /**
     * Test attribute "iNCONSISTENTCURRENCYVALUES"
     *
     * @group unit
     * @small
     */
    public function testPropertyINCONSISTENTCURRENCYVALUES(): void
    {
        $this->markTestSkipped('Test for property iNCONSISTENTCURRENCYVALUES not implemented');
    }

    /**
     * Test attribute "sALESPRICETOOLOW"
     *
     * @group unit
     * @small
     */
    public function testPropertySALESPRICETOOLOW(): void
    {
        $this->markTestSkipped('Test for property sALESPRICETOOLOW not implemented');
    }

    /**
     * Test attribute "sHIPPINGWIDTHINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySHIPPINGWIDTHINVALID(): void
    {
        $this->markTestSkipped('Test for property sHIPPINGWIDTHINVALID not implemented');
    }

    /**
     * Test attribute "sHIPPINGHEIGHTINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertySHIPPINGHEIGHTINVALID(): void
    {
        $this->markTestSkipped('Test for property sHIPPINGHEIGHTINVALID not implemented');
    }

    /**
     * Test attribute "sALESPRICETOOHIGH"
     *
     * @group unit
     * @small
     */
    public function testPropertySALESPRICETOOHIGH(): void
    {
        $this->markTestSkipped('Test for property sALESPRICETOOHIGH not implemented');
    }

    /**
     * Test attribute "mPNINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyMPNINVALID(): void
    {
        $this->markTestSkipped('Test for property mPNINVALID not implemented');
    }
}
