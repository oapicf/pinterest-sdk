<?php
/**
 * ConversionEventsDataInnerTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ConversionEventsDataInner;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ConversionEventsDataInnerTest Class Doc Comment
 *
 * @category    Class
 * @description ConversionEventsDataInner
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\ConversionEventsDataInner
 */
class ConversionEventsDataInnerTest extends TestCase
{
    protected ConversionEventsDataInner|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(ConversionEventsDataInner::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(ConversionEventsDataInner::class));
        $this->assertInstanceOf(ConversionEventsDataInner::class, $this->object);
    }

    /**
     * Test attribute "eventName"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventName(): void
    {
        $this->markTestSkipped('Test for property eventName not implemented');
    }

    /**
     * Test attribute "actionSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyActionSource(): void
    {
        $this->markTestSkipped('Test for property actionSource not implemented');
    }

    /**
     * Test attribute "eventTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventTime(): void
    {
        $this->markTestSkipped('Test for property eventTime not implemented');
    }

    /**
     * Test attribute "eventId"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventId(): void
    {
        $this->markTestSkipped('Test for property eventId not implemented');
    }

    /**
     * Test attribute "eventSourceUrl"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventSourceUrl(): void
    {
        $this->markTestSkipped('Test for property eventSourceUrl not implemented');
    }

    /**
     * Test attribute "optOut"
     *
     * @group unit
     * @small
     */
    public function testPropertyOptOut(): void
    {
        $this->markTestSkipped('Test for property optOut not implemented');
    }

    /**
     * Test attribute "partnerName"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartnerName(): void
    {
        $this->markTestSkipped('Test for property partnerName not implemented');
    }

    /**
     * Test attribute "userData"
     *
     * @group unit
     * @small
     */
    public function testPropertyUserData(): void
    {
        $this->markTestSkipped('Test for property userData not implemented');
    }

    /**
     * Test attribute "customData"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomData(): void
    {
        $this->markTestSkipped('Test for property customData not implemented');
    }

    /**
     * Test attribute "appId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAppId(): void
    {
        $this->markTestSkipped('Test for property appId not implemented');
    }

    /**
     * Test attribute "appName"
     *
     * @group unit
     * @small
     */
    public function testPropertyAppName(): void
    {
        $this->markTestSkipped('Test for property appName not implemented');
    }

    /**
     * Test attribute "appVersion"
     *
     * @group unit
     * @small
     */
    public function testPropertyAppVersion(): void
    {
        $this->markTestSkipped('Test for property appVersion not implemented');
    }

    /**
     * Test attribute "deviceBrand"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeviceBrand(): void
    {
        $this->markTestSkipped('Test for property deviceBrand not implemented');
    }

    /**
     * Test attribute "deviceCarrier"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeviceCarrier(): void
    {
        $this->markTestSkipped('Test for property deviceCarrier not implemented');
    }

    /**
     * Test attribute "deviceModel"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeviceModel(): void
    {
        $this->markTestSkipped('Test for property deviceModel not implemented');
    }

    /**
     * Test attribute "deviceType"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeviceType(): void
    {
        $this->markTestSkipped('Test for property deviceType not implemented');
    }

    /**
     * Test attribute "osVersion"
     *
     * @group unit
     * @small
     */
    public function testPropertyOsVersion(): void
    {
        $this->markTestSkipped('Test for property osVersion not implemented');
    }

    /**
     * Test attribute "wifi"
     *
     * @group unit
     * @small
     */
    public function testPropertyWifi(): void
    {
        $this->markTestSkipped('Test for property wifi not implemented');
    }

    /**
     * Test attribute "language"
     *
     * @group unit
     * @small
     */
    public function testPropertyLanguage(): void
    {
        $this->markTestSkipped('Test for property language not implemented');
    }
}
