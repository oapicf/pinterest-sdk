<?php
/**
 * IntegrationLogTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\IntegrationLog;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * IntegrationLogTest Class Doc Comment
 *
 * @category    Class
 * @description Schema for log sent from an integration application.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\IntegrationLog
 */
class IntegrationLogTest extends TestCase
{
    protected IntegrationLog|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(IntegrationLog::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(IntegrationLog::class));
        $this->assertInstanceOf(IntegrationLog::class, $this->object);
    }

    /**
     * Test attribute "clientTimestamp"
     *
     * @group unit
     * @small
     */
    public function testPropertyClientTimestamp(): void
    {
        $this->markTestSkipped('Test for property clientTimestamp not implemented');
    }

    /**
     * Test attribute "eventType"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventType(): void
    {
        $this->markTestSkipped('Test for property eventType not implemented');
    }

    /**
     * Test attribute "logLevel"
     *
     * @group unit
     * @small
     */
    public function testPropertyLogLevel(): void
    {
        $this->markTestSkipped('Test for property logLevel not implemented');
    }

    /**
     * Test attribute "externalBusinessId"
     *
     * @group unit
     * @small
     */
    public function testPropertyExternalBusinessId(): void
    {
        $this->markTestSkipped('Test for property externalBusinessId not implemented');
    }

    /**
     * Test attribute "advertiserId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdvertiserId(): void
    {
        $this->markTestSkipped('Test for property advertiserId not implemented');
    }

    /**
     * Test attribute "merchantId"
     *
     * @group unit
     * @small
     */
    public function testPropertyMerchantId(): void
    {
        $this->markTestSkipped('Test for property merchantId not implemented');
    }

    /**
     * Test attribute "tagId"
     *
     * @group unit
     * @small
     */
    public function testPropertyTagId(): void
    {
        $this->markTestSkipped('Test for property tagId not implemented');
    }

    /**
     * Test attribute "feedProfileId"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeedProfileId(): void
    {
        $this->markTestSkipped('Test for property feedProfileId not implemented');
    }

    /**
     * Test attribute "message"
     *
     * @group unit
     * @small
     */
    public function testPropertyMessage(): void
    {
        $this->markTestSkipped('Test for property message not implemented');
    }

    /**
     * Test attribute "appVersionNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyAppVersionNumber(): void
    {
        $this->markTestSkipped('Test for property appVersionNumber not implemented');
    }

    /**
     * Test attribute "platformVersionNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyPlatformVersionNumber(): void
    {
        $this->markTestSkipped('Test for property platformVersionNumber not implemented');
    }

    /**
     * Test attribute "error"
     *
     * @group unit
     * @small
     */
    public function testPropertyError(): void
    {
        $this->markTestSkipped('Test for property error not implemented');
    }

    /**
     * Test attribute "request"
     *
     * @group unit
     * @small
     */
    public function testPropertyRequest(): void
    {
        $this->markTestSkipped('Test for property request not implemented');
    }
}
