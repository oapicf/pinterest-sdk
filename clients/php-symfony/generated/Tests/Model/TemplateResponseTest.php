<?php
/**
 * TemplateResponseTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\TemplateResponse;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * TemplateResponseTest Class Doc Comment
 *
 * @category    Class
 * @description Template fields
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\TemplateResponse
 */
class TemplateResponseTest extends TestCase
{
    protected TemplateResponse|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(TemplateResponse::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(TemplateResponse::class));
        $this->assertInstanceOf(TemplateResponse::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "adAccountId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdAccountId(): void
    {
        $this->markTestSkipped('Test for property adAccountId not implemented');
    }

    /**
     * Test attribute "adAccountIds"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdAccountIds(): void
    {
        $this->markTestSkipped('Test for property adAccountIds not implemented');
    }

    /**
     * Test attribute "userId"
     *
     * @group unit
     * @small
     */
    public function testPropertyUserId(): void
    {
        $this->markTestSkipped('Test for property userId not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "reportStartRelativeDaysInPast"
     *
     * @group unit
     * @small
     */
    public function testPropertyReportStartRelativeDaysInPast(): void
    {
        $this->markTestSkipped('Test for property reportStartRelativeDaysInPast not implemented');
    }

    /**
     * Test attribute "reportEndRelativeDaysInPast"
     *
     * @group unit
     * @small
     */
    public function testPropertyReportEndRelativeDaysInPast(): void
    {
        $this->markTestSkipped('Test for property reportEndRelativeDaysInPast not implemented');
    }

    /**
     * Test attribute "dateRange"
     *
     * @group unit
     * @small
     */
    public function testPropertyDateRange(): void
    {
        $this->markTestSkipped('Test for property dateRange not implemented');
    }

    /**
     * Test attribute "reportLevel"
     *
     * @group unit
     * @small
     */
    public function testPropertyReportLevel(): void
    {
        $this->markTestSkipped('Test for property reportLevel not implemented');
    }

    /**
     * Test attribute "reportFormat"
     *
     * @group unit
     * @small
     */
    public function testPropertyReportFormat(): void
    {
        $this->markTestSkipped('Test for property reportFormat not implemented');
    }

    /**
     * Test attribute "columns"
     *
     * @group unit
     * @small
     */
    public function testPropertyColumns(): void
    {
        $this->markTestSkipped('Test for property columns not implemented');
    }

    /**
     * Test attribute "granularity"
     *
     * @group unit
     * @small
     */
    public function testPropertyGranularity(): void
    {
        $this->markTestSkipped('Test for property granularity not implemented');
    }

    /**
     * Test attribute "viewWindowDays"
     *
     * @group unit
     * @small
     */
    public function testPropertyViewWindowDays(): void
    {
        $this->markTestSkipped('Test for property viewWindowDays not implemented');
    }

    /**
     * Test attribute "clickWindowDays"
     *
     * @group unit
     * @small
     */
    public function testPropertyClickWindowDays(): void
    {
        $this->markTestSkipped('Test for property clickWindowDays not implemented');
    }

    /**
     * Test attribute "engagementWindowDays"
     *
     * @group unit
     * @small
     */
    public function testPropertyEngagementWindowDays(): void
    {
        $this->markTestSkipped('Test for property engagementWindowDays not implemented');
    }

    /**
     * Test attribute "conversionReportTimeType"
     *
     * @group unit
     * @small
     */
    public function testPropertyConversionReportTimeType(): void
    {
        $this->markTestSkipped('Test for property conversionReportTimeType not implemented');
    }

    /**
     * Test attribute "filtersJson"
     *
     * @group unit
     * @small
     */
    public function testPropertyFiltersJson(): void
    {
        $this->markTestSkipped('Test for property filtersJson not implemented');
    }

    /**
     * Test attribute "isOwnedByUser"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsOwnedByUser(): void
    {
        $this->markTestSkipped('Test for property isOwnedByUser not implemented');
    }

    /**
     * Test attribute "isScheduled"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsScheduled(): void
    {
        $this->markTestSkipped('Test for property isScheduled not implemented');
    }

    /**
     * Test attribute "creationSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationSource(): void
    {
        $this->markTestSkipped('Test for property creationSource not implemented');
    }

    /**
     * Test attribute "isDeleted"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsDeleted(): void
    {
        $this->markTestSkipped('Test for property isDeleted not implemented');
    }

    /**
     * Test attribute "updatedTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyUpdatedTime(): void
    {
        $this->markTestSkipped('Test for property updatedTime not implemented');
    }

    /**
     * Test attribute "customColumnIds"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomColumnIds(): void
    {
        $this->markTestSkipped('Test for property customColumnIds not implemented');
    }

    /**
     * Test attribute "type"
     *
     * @group unit
     * @small
     */
    public function testPropertyType(): void
    {
        $this->markTestSkipped('Test for property type not implemented');
    }

    /**
     * Test attribute "ingestionSources"
     *
     * @group unit
     * @small
     */
    public function testPropertyIngestionSources(): void
    {
        $this->markTestSkipped('Test for property ingestionSources not implemented');
    }
}
