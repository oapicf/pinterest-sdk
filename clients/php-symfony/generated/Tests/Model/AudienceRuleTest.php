<?php
/**
 * AudienceRuleTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\AudienceRule;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * AudienceRuleTest Class Doc Comment
 *
 * @category    Class
 * @description JSON object defining targeted audience users. Example rule formats per audience type:&lt;br&gt;CUSTOMER_LIST: { \&quot;customer_list_id\&quot;: \&quot;&amp;lt;customer list ID&amp;gt;\&quot;}&lt;br&gt;ACTALIKE: { \&quot;seed_id\&quot;: [\&quot;&amp;lt;audience ID&amp;gt;\&quot;], \&quot;country\&quot;: \&quot;US\&quot;, \&quot;percentage\&quot;: \&quot;10\&quot; }&lt;br&gt;(Valid countries include: \&quot;US\&quot;, \&quot;CA\&quot;, and \&quot;GB\&quot;. Percentage should be 1-10.&lt;br&gt;The targeted audience should be this % size across Pinterest.)&lt;br&gt;VISITOR: { \&quot;visitor_source_id\&quot;: [\&quot;&amp;lt;conversion tag ID&amp;gt;\&quot;], \&quot;retention_days\&quot;: \&quot;180\&quot;, \&quot;event_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;web\&quot;, \&quot;mobile\&quot;]}, \&quot;ingestion_source\&quot;: {\&quot;&#x3D;\&quot;: [\&quot;tag\&quot;]}}&lt;br&gt;(Retention days should be 1-540. Retention applies to specific customers.)&lt;br&gt;ENGAGEMENT: {\&quot;engagement_domain\&quot;: [\&quot;www.entomi.com\&quot;], \&quot;engager_type\&quot;: 1}&lt;br&gt;For more details on engagement audiences, see &lt;a href&#x3D;\&quot;/docs/redoc/adtech_ads_v4/#section/November-2021\&quot; target&#x3D;\&quot;_blank\&quot;&gt;November 2021 changelog&lt;/a&gt;.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\AudienceRule
 */
class AudienceRuleTest extends TestCase
{
    protected AudienceRule|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(AudienceRule::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(AudienceRule::class));
        $this->assertInstanceOf(AudienceRule::class, $this->object);
    }

    /**
     * Test attribute "country"
     *
     * @group unit
     * @small
     */
    public function testPropertyCountry(): void
    {
        $this->markTestSkipped('Test for property country not implemented');
    }

    /**
     * Test attribute "customerListId"
     *
     * @group unit
     * @small
     */
    public function testPropertyCustomerListId(): void
    {
        $this->markTestSkipped('Test for property customerListId not implemented');
    }

    /**
     * Test attribute "engagementDomain"
     *
     * @group unit
     * @small
     */
    public function testPropertyEngagementDomain(): void
    {
        $this->markTestSkipped('Test for property engagementDomain not implemented');
    }

    /**
     * Test attribute "engagementType"
     *
     * @group unit
     * @small
     */
    public function testPropertyEngagementType(): void
    {
        $this->markTestSkipped('Test for property engagementType not implemented');
    }

    /**
     * Test attribute "event"
     *
     * @group unit
     * @small
     */
    public function testPropertyEvent(): void
    {
        $this->markTestSkipped('Test for property event not implemented');
    }

    /**
     * Test attribute "eventData"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventData(): void
    {
        $this->markTestSkipped('Test for property eventData not implemented');
    }

    /**
     * Test attribute "percentage"
     *
     * @group unit
     * @small
     */
    public function testPropertyPercentage(): void
    {
        $this->markTestSkipped('Test for property percentage not implemented');
    }

    /**
     * Test attribute "pinId"
     *
     * @group unit
     * @small
     */
    public function testPropertyPinId(): void
    {
        $this->markTestSkipped('Test for property pinId not implemented');
    }

    /**
     * Test attribute "prefill"
     *
     * @group unit
     * @small
     */
    public function testPropertyPrefill(): void
    {
        $this->markTestSkipped('Test for property prefill not implemented');
    }

    /**
     * Test attribute "retentionDays"
     *
     * @group unit
     * @small
     */
    public function testPropertyRetentionDays(): void
    {
        $this->markTestSkipped('Test for property retentionDays not implemented');
    }

    /**
     * Test attribute "seedId"
     *
     * @group unit
     * @small
     */
    public function testPropertySeedId(): void
    {
        $this->markTestSkipped('Test for property seedId not implemented');
    }

    /**
     * Test attribute "url"
     *
     * @group unit
     * @small
     */
    public function testPropertyUrl(): void
    {
        $this->markTestSkipped('Test for property url not implemented');
    }

    /**
     * Test attribute "visitorSourceId"
     *
     * @group unit
     * @small
     */
    public function testPropertyVisitorSourceId(): void
    {
        $this->markTestSkipped('Test for property visitorSourceId not implemented');
    }

    /**
     * Test attribute "eventSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyEventSource(): void
    {
        $this->markTestSkipped('Test for property eventSource not implemented');
    }

    /**
     * Test attribute "ingestionSource"
     *
     * @group unit
     * @small
     */
    public function testPropertyIngestionSource(): void
    {
        $this->markTestSkipped('Test for property ingestionSource not implemented');
    }

    /**
     * Test attribute "engagerType"
     *
     * @group unit
     * @small
     */
    public function testPropertyEngagerType(): void
    {
        $this->markTestSkipped('Test for property engagerType not implemented');
    }

    /**
     * Test attribute "campaignId"
     *
     * @group unit
     * @small
     */
    public function testPropertyCampaignId(): void
    {
        $this->markTestSkipped('Test for property campaignId not implemented');
    }

    /**
     * Test attribute "adId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdId(): void
    {
        $this->markTestSkipped('Test for property adId not implemented');
    }

    /**
     * Test attribute "objectiveType"
     *
     * @group unit
     * @small
     */
    public function testPropertyObjectiveType(): void
    {
        $this->markTestSkipped('Test for property objectiveType not implemented');
    }

    /**
     * Test attribute "adAccountId"
     *
     * @group unit
     * @small
     */
    public function testPropertyAdAccountId(): void
    {
        $this->markTestSkipped('Test for property adAccountId not implemented');
    }
}
