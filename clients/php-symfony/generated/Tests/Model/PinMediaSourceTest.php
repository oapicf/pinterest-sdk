<?php
/**
 * PinMediaSourceTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\PinMediaSource;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * PinMediaSourceTest Class Doc Comment
 *
 * @category    Class
 * @description Pin media source.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\PinMediaSource
 */
class PinMediaSourceTest extends TestCase
{
    protected PinMediaSource|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(PinMediaSource::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(PinMediaSource::class));
        $this->assertInstanceOf(PinMediaSource::class, $this->object);
    }

    /**
     * Test attribute "sourceType"
     *
     * @group unit
     * @small
     */
    public function testPropertySourceType(): void
    {
        $this->markTestSkipped('Test for property sourceType not implemented');
    }

    /**
     * Test attribute "contentType"
     *
     * @group unit
     * @small
     */
    public function testPropertyContentType(): void
    {
        $this->markTestSkipped('Test for property contentType not implemented');
    }

    /**
     * Test attribute "data"
     *
     * @group unit
     * @small
     */
    public function testPropertyData(): void
    {
        $this->markTestSkipped('Test for property data not implemented');
    }

    /**
     * Test attribute "isStandard"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsStandard(): void
    {
        $this->markTestSkipped('Test for property isStandard not implemented');
    }

    /**
     * Test attribute "url"
     *
     * @group unit
     * @small
     */
    public function testPropertyUrl(): void
    {
        $this->markTestSkipped('Test for property url not implemented');
    }

    /**
     * Test attribute "coverImageUrl"
     *
     * @group unit
     * @small
     */
    public function testPropertyCoverImageUrl(): void
    {
        $this->markTestSkipped('Test for property coverImageUrl not implemented');
    }

    /**
     * Test attribute "coverImageContentType"
     *
     * @group unit
     * @small
     */
    public function testPropertyCoverImageContentType(): void
    {
        $this->markTestSkipped('Test for property coverImageContentType not implemented');
    }

    /**
     * Test attribute "coverImageData"
     *
     * @group unit
     * @small
     */
    public function testPropertyCoverImageData(): void
    {
        $this->markTestSkipped('Test for property coverImageData not implemented');
    }

    /**
     * Test attribute "mediaId"
     *
     * @group unit
     * @small
     */
    public function testPropertyMediaId(): void
    {
        $this->markTestSkipped('Test for property mediaId not implemented');
    }

    /**
     * Test attribute "items"
     *
     * @group unit
     * @small
     */
    public function testPropertyItems(): void
    {
        $this->markTestSkipped('Test for property items not implemented');
    }

    /**
     * Test attribute "index"
     *
     * @group unit
     * @small
     */
    public function testPropertyIndex(): void
    {
        $this->markTestSkipped('Test for property index not implemented');
    }

    /**
     * Test attribute "isAffiliateLink"
     *
     * @group unit
     * @small
     */
    public function testPropertyIsAffiliateLink(): void
    {
        $this->markTestSkipped('Test for property isAffiliateLink not implemented');
    }
}
