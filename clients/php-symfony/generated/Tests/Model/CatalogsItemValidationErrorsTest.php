<?php
/**
 * CatalogsItemValidationErrorsTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CatalogsItemValidationErrors;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CatalogsItemValidationErrorsTest Class Doc Comment
 *
 * @category    Class
 * @description CatalogsItemValidationErrors
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CatalogsItemValidationErrors
 */
class CatalogsItemValidationErrorsTest extends TestCase
{
    protected CatalogsItemValidationErrors|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CatalogsItemValidationErrors::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CatalogsItemValidationErrors::class));
        $this->assertInstanceOf(CatalogsItemValidationErrors::class, $this->object);
    }

    /**
     * Test attribute "aDULTINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyADULTINVALID(): void
    {
        $this->markTestSkipped('Test for property aDULTINVALID not implemented');
    }

    /**
     * Test attribute "aDWORDSFORMATINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyADWORDSFORMATINVALID(): void
    {
        $this->markTestSkipped('Test for property aDWORDSFORMATINVALID not implemented');
    }

    /**
     * Test attribute "aVAILABILITYINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyAVAILABILITYINVALID(): void
    {
        $this->markTestSkipped('Test for property aVAILABILITYINVALID not implemented');
    }

    /**
     * Test attribute "bLOCKLISTEDIMAGESIGNATURE"
     *
     * @group unit
     * @small
     */
    public function testPropertyBLOCKLISTEDIMAGESIGNATURE(): void
    {
        $this->markTestSkipped('Test for property bLOCKLISTEDIMAGESIGNATURE not implemented');
    }

    /**
     * Test attribute "dESCRIPTIONMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyDESCRIPTIONMISSING(): void
    {
        $this->markTestSkipped('Test for property dESCRIPTIONMISSING not implemented');
    }

    /**
     * Test attribute "dUPLICATEPRODUCTS"
     *
     * @group unit
     * @small
     */
    public function testPropertyDUPLICATEPRODUCTS(): void
    {
        $this->markTestSkipped('Test for property dUPLICATEPRODUCTS not implemented');
    }

    /**
     * Test attribute "iMAGELINKINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyIMAGELINKINVALID(): void
    {
        $this->markTestSkipped('Test for property iMAGELINKINVALID not implemented');
    }

    /**
     * Test attribute "iMAGELINKLENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyIMAGELINKLENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property iMAGELINKLENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "iMAGELINKMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyIMAGELINKMISSING(): void
    {
        $this->markTestSkipped('Test for property iMAGELINKMISSING not implemented');
    }

    /**
     * Test attribute "iNVALIDDOMAIN"
     *
     * @group unit
     * @small
     */
    public function testPropertyINVALIDDOMAIN(): void
    {
        $this->markTestSkipped('Test for property iNVALIDDOMAIN not implemented');
    }

    /**
     * Test attribute "iTEMIDMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyITEMIDMISSING(): void
    {
        $this->markTestSkipped('Test for property iTEMIDMISSING not implemented');
    }

    /**
     * Test attribute "iTEMMAINIMAGEDOWNLOADFAILURE"
     *
     * @group unit
     * @small
     */
    public function testPropertyITEMMAINIMAGEDOWNLOADFAILURE(): void
    {
        $this->markTestSkipped('Test for property iTEMMAINIMAGEDOWNLOADFAILURE not implemented');
    }

    /**
     * Test attribute "lINKFORMATINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyLINKFORMATINVALID(): void
    {
        $this->markTestSkipped('Test for property lINKFORMATINVALID not implemented');
    }

    /**
     * Test attribute "lINKLENGTHTOOLONG"
     *
     * @group unit
     * @small
     */
    public function testPropertyLINKLENGTHTOOLONG(): void
    {
        $this->markTestSkipped('Test for property lINKLENGTHTOOLONG not implemented');
    }

    /**
     * Test attribute "lISTPRICEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyLISTPRICEINVALID(): void
    {
        $this->markTestSkipped('Test for property lISTPRICEINVALID not implemented');
    }

    /**
     * Test attribute "mAXITEMSPERITEMGROUPEXCEEDED"
     *
     * @group unit
     * @small
     */
    public function testPropertyMAXITEMSPERITEMGROUPEXCEEDED(): void
    {
        $this->markTestSkipped('Test for property mAXITEMSPERITEMGROUPEXCEEDED not implemented');
    }

    /**
     * Test attribute "pARSELINEERROR"
     *
     * @group unit
     * @small
     */
    public function testPropertyPARSELINEERROR(): void
    {
        $this->markTestSkipped('Test for property pARSELINEERROR not implemented');
    }

    /**
     * Test attribute "pINJOINCONTENTUNSAFE"
     *
     * @group unit
     * @small
     */
    public function testPropertyPINJOINCONTENTUNSAFE(): void
    {
        $this->markTestSkipped('Test for property pINJOINCONTENTUNSAFE not implemented');
    }

    /**
     * Test attribute "pRICECANNOTBEDETERMINED"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRICECANNOTBEDETERMINED(): void
    {
        $this->markTestSkipped('Test for property pRICECANNOTBEDETERMINED not implemented');
    }

    /**
     * Test attribute "pRICEMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRICEMISSING(): void
    {
        $this->markTestSkipped('Test for property pRICEMISSING not implemented');
    }

    /**
     * Test attribute "pRODUCTLINKMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTLINKMISSING(): void
    {
        $this->markTestSkipped('Test for property pRODUCTLINKMISSING not implemented');
    }

    /**
     * Test attribute "pRODUCTPRICEINVALID"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTPRICEINVALID(): void
    {
        $this->markTestSkipped('Test for property pRODUCTPRICEINVALID not implemented');
    }

    /**
     * Test attribute "tITLEMISSING"
     *
     * @group unit
     * @small
     */
    public function testPropertyTITLEMISSING(): void
    {
        $this->markTestSkipped('Test for property tITLEMISSING not implemented');
    }
}
