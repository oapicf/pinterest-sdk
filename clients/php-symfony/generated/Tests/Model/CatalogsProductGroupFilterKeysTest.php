<?php
/**
 * CatalogsProductGroupFilterKeysTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Pinterest REST API
 *
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\CatalogsProductGroupFilterKeys;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * CatalogsProductGroupFilterKeysTest Class Doc Comment
 *
 * @category    Class
 * @description CatalogsProductGroupFilterKeys
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\CatalogsProductGroupFilterKeys
 */
class CatalogsProductGroupFilterKeysTest extends TestCase
{
    protected CatalogsProductGroupFilterKeys|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(CatalogsProductGroupFilterKeys::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(CatalogsProductGroupFilterKeys::class));
        $this->assertInstanceOf(CatalogsProductGroupFilterKeys::class, $this->object);
    }

    /**
     * Test attribute "mINPRICE"
     *
     * @group unit
     * @small
     */
    public function testPropertyMINPRICE(): void
    {
        $this->markTestSkipped('Test for property mINPRICE not implemented');
    }

    /**
     * Test attribute "mAXPRICE"
     *
     * @group unit
     * @small
     */
    public function testPropertyMAXPRICE(): void
    {
        $this->markTestSkipped('Test for property mAXPRICE not implemented');
    }

    /**
     * Test attribute "cURRENCY"
     *
     * @group unit
     * @small
     */
    public function testPropertyCURRENCY(): void
    {
        $this->markTestSkipped('Test for property cURRENCY not implemented');
    }

    /**
     * Test attribute "iTEMID"
     *
     * @group unit
     * @small
     */
    public function testPropertyITEMID(): void
    {
        $this->markTestSkipped('Test for property iTEMID not implemented');
    }

    /**
     * Test attribute "aVAILABILITY"
     *
     * @group unit
     * @small
     */
    public function testPropertyAVAILABILITY(): void
    {
        $this->markTestSkipped('Test for property aVAILABILITY not implemented');
    }

    /**
     * Test attribute "bRAND"
     *
     * @group unit
     * @small
     */
    public function testPropertyBRAND(): void
    {
        $this->markTestSkipped('Test for property bRAND not implemented');
    }

    /**
     * Test attribute "cONDITION"
     *
     * @group unit
     * @small
     */
    public function testPropertyCONDITION(): void
    {
        $this->markTestSkipped('Test for property cONDITION not implemented');
    }

    /**
     * Test attribute "cUSTOMLABEL0"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABEL0(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABEL0 not implemented');
    }

    /**
     * Test attribute "cUSTOMLABEL1"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABEL1(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABEL1 not implemented');
    }

    /**
     * Test attribute "cUSTOMLABEL2"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABEL2(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABEL2 not implemented');
    }

    /**
     * Test attribute "cUSTOMLABEL3"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABEL3(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABEL3 not implemented');
    }

    /**
     * Test attribute "cUSTOMLABEL4"
     *
     * @group unit
     * @small
     */
    public function testPropertyCUSTOMLABEL4(): void
    {
        $this->markTestSkipped('Test for property cUSTOMLABEL4 not implemented');
    }

    /**
     * Test attribute "iTEMGROUPID"
     *
     * @group unit
     * @small
     */
    public function testPropertyITEMGROUPID(): void
    {
        $this->markTestSkipped('Test for property iTEMGROUPID not implemented');
    }

    /**
     * Test attribute "gENDER"
     *
     * @group unit
     * @small
     */
    public function testPropertyGENDER(): void
    {
        $this->markTestSkipped('Test for property gENDER not implemented');
    }

    /**
     * Test attribute "mEDIATYPE"
     *
     * @group unit
     * @small
     */
    public function testPropertyMEDIATYPE(): void
    {
        $this->markTestSkipped('Test for property mEDIATYPE not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPE4"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPE4(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPE4 not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPE3"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPE3(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPE3 not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPE2"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPE2(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPE2 not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPE1"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPE1(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPE1 not implemented');
    }

    /**
     * Test attribute "pRODUCTTYPE0"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTTYPE0(): void
    {
        $this->markTestSkipped('Test for property pRODUCTTYPE0 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY6"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY6(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY6 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY5"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY5(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY5 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY4"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY4(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY4 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY3"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY3(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY3 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY2"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY2(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY2 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY1"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY1(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY1 not implemented');
    }

    /**
     * Test attribute "gOOGLEPRODUCTCATEGORY0"
     *
     * @group unit
     * @small
     */
    public function testPropertyGOOGLEPRODUCTCATEGORY0(): void
    {
        $this->markTestSkipped('Test for property gOOGLEPRODUCTCATEGORY0 not implemented');
    }

    /**
     * Test attribute "pRODUCTGROUP"
     *
     * @group unit
     * @small
     */
    public function testPropertyPRODUCTGROUP(): void
    {
        $this->markTestSkipped('Test for property pRODUCTGROUP not implemented');
    }
}
