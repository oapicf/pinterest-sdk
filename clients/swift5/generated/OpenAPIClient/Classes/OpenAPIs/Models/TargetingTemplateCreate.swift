//
// TargetingTemplateCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TargetingTemplateCreate: Codable, JSONEncodable, Hashable {

    /** Name of targeting template. */
    public var name: String
    /** Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    public var autoTargetingEnabled: Bool? = true
    public var targetingAttributes: TargetingSpec
    public var placementGroup: PlacementGroupType?
    public var keywords: [TargetingTemplateKeyword]?
    public var trackingUrls: TrackingUrls?

    public init(name: String, autoTargetingEnabled: Bool? = true, targetingAttributes: TargetingSpec, placementGroup: PlacementGroupType? = nil, keywords: [TargetingTemplateKeyword]? = nil, trackingUrls: TrackingUrls? = nil) {
        self.name = name
        self.autoTargetingEnabled = autoTargetingEnabled
        self.targetingAttributes = targetingAttributes
        self.placementGroup = placementGroup
        self.keywords = keywords
        self.trackingUrls = trackingUrls
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case autoTargetingEnabled = "auto_targeting_enabled"
        case targetingAttributes = "targeting_attributes"
        case placementGroup = "placement_group"
        case keywords
        case trackingUrls = "tracking_urls"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(autoTargetingEnabled, forKey: .autoTargetingEnabled)
        try container.encode(targetingAttributes, forKey: .targetingAttributes)
        try container.encodeIfPresent(placementGroup, forKey: .placementGroup)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        try container.encodeIfPresent(trackingUrls, forKey: .trackingUrls)
    }
}

