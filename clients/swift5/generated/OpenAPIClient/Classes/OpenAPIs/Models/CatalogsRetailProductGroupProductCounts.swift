//
// CatalogsRetailProductGroupProductCounts.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Product counts for a Retail CatalogsProductGroup */
public struct CatalogsRetailProductGroupProductCounts: Codable, JSONEncodable, Hashable {

    public enum CatalogType: String, Codable, CaseIterable {
        case retail = "RETAIL"
    }
    static let inStockRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let outOfStockRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let preorderRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let totalRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let videosRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var catalogType: CatalogType
    public var inStock: Double
    public var outOfStock: Double
    public var preorder: Double
    public var total: Double
    public var videos: Double?

    public init(catalogType: CatalogType, inStock: Double, outOfStock: Double, preorder: Double, total: Double, videos: Double? = nil) {
        self.catalogType = catalogType
        self.inStock = inStock
        self.outOfStock = outOfStock
        self.preorder = preorder
        self.total = total
        self.videos = videos
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case catalogType = "catalog_type"
        case inStock = "in_stock"
        case outOfStock = "out_of_stock"
        case preorder
        case total
        case videos
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(catalogType, forKey: .catalogType)
        try container.encode(inStock, forKey: .inStock)
        try container.encode(outOfStock, forKey: .outOfStock)
        try container.encode(preorder, forKey: .preorder)
        try container.encode(total, forKey: .total)
        try container.encodeIfPresent(videos, forKey: .videos)
    }
}

