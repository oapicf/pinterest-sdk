//
// ProductGroupPromotionResponseElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductGroupPromotionResponseElement: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let adGroupIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(AG)?\\d+$/")
    static let parentIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let catalogProductGroupIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let collectionsHeroPinIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** ID of the product group promotion. */
    public var id: String?
    /** ID of the ad group the product group belongs to. */
    public var adGroupId: String?
    /** The bid in micro currency. */
    public var bidInMicroCurrency: Int?
    /** True if the group is BIDDABLE, false if it should be EXCLUDED from serving ads. */
    public var included: Bool?
    /** The full product group definition path */
    public var definition: String?
    /** The definition of the product group, relative to its parent - an attribute name/value pair */
    public var relativeDefinition: String?
    /** The parent Product Group ID of this Product Group */
    public var parentId: String?
    /** Slideshow Collections Title */
    public var slideshowCollectionsTitle: String?
    /** Slideshow Collections Description */
    public var slideshowCollectionsDescription: String?
    /** If set to true products promoted in this product group will use the Mobile Deep Link specified in your catalog */
    public var isMdl: Bool?
    public var status: EntityStatus?
    /** Tracking template for proudct group promotions. 4000 limit */
    public var trackingUrl: String?
    /** ID of the catalogs product group that this product group promotion references */
    public var catalogProductGroupId: String?
    /** Catalogs product group name */
    public var catalogProductGroupName: String?
    /** Hero Pin ID if this PG is promoted as a Collection */
    public var collectionsHeroPinId: String?
    /** Collections Hero Destination Url */
    public var collectionsHeroDestinationUrl: String?
    public var gridClickType: GridClickType?
    public var creativeType: CreativeType?

    public init(id: String? = nil, adGroupId: String? = nil, bidInMicroCurrency: Int? = nil, included: Bool? = nil, definition: String? = nil, relativeDefinition: String? = nil, parentId: String? = nil, slideshowCollectionsTitle: String? = nil, slideshowCollectionsDescription: String? = nil, isMdl: Bool? = nil, status: EntityStatus? = nil, trackingUrl: String? = nil, catalogProductGroupId: String? = nil, catalogProductGroupName: String? = nil, collectionsHeroPinId: String? = nil, collectionsHeroDestinationUrl: String? = nil, gridClickType: GridClickType? = nil, creativeType: CreativeType? = nil) {
        self.id = id
        self.adGroupId = adGroupId
        self.bidInMicroCurrency = bidInMicroCurrency
        self.included = included
        self.definition = definition
        self.relativeDefinition = relativeDefinition
        self.parentId = parentId
        self.slideshowCollectionsTitle = slideshowCollectionsTitle
        self.slideshowCollectionsDescription = slideshowCollectionsDescription
        self.isMdl = isMdl
        self.status = status
        self.trackingUrl = trackingUrl
        self.catalogProductGroupId = catalogProductGroupId
        self.catalogProductGroupName = catalogProductGroupName
        self.collectionsHeroPinId = collectionsHeroPinId
        self.collectionsHeroDestinationUrl = collectionsHeroDestinationUrl
        self.gridClickType = gridClickType
        self.creativeType = creativeType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case adGroupId = "ad_group_id"
        case bidInMicroCurrency = "bid_in_micro_currency"
        case included
        case definition
        case relativeDefinition = "relative_definition"
        case parentId = "parent_id"
        case slideshowCollectionsTitle = "slideshow_collections_title"
        case slideshowCollectionsDescription = "slideshow_collections_description"
        case isMdl = "is_mdl"
        case status
        case trackingUrl = "tracking_url"
        case catalogProductGroupId = "catalog_product_group_id"
        case catalogProductGroupName = "catalog_product_group_name"
        case collectionsHeroPinId = "collections_hero_pin_id"
        case collectionsHeroDestinationUrl = "collections_hero_destination_url"
        case gridClickType = "grid_click_type"
        case creativeType = "creative_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(adGroupId, forKey: .adGroupId)
        try container.encodeIfPresent(bidInMicroCurrency, forKey: .bidInMicroCurrency)
        try container.encodeIfPresent(included, forKey: .included)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(relativeDefinition, forKey: .relativeDefinition)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(slideshowCollectionsTitle, forKey: .slideshowCollectionsTitle)
        try container.encodeIfPresent(slideshowCollectionsDescription, forKey: .slideshowCollectionsDescription)
        try container.encodeIfPresent(isMdl, forKey: .isMdl)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(trackingUrl, forKey: .trackingUrl)
        try container.encodeIfPresent(catalogProductGroupId, forKey: .catalogProductGroupId)
        try container.encodeIfPresent(catalogProductGroupName, forKey: .catalogProductGroupName)
        try container.encodeIfPresent(collectionsHeroPinId, forKey: .collectionsHeroPinId)
        try container.encodeIfPresent(collectionsHeroDestinationUrl, forKey: .collectionsHeroDestinationUrl)
        try container.encodeIfPresent(gridClickType, forKey: .gridClickType)
        try container.encodeIfPresent(creativeType, forKey: .creativeType)
    }
}

