//
// UpdateAssetGroupBodyAssetGroupsToUpdateInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateAssetGroupBodyAssetGroupsToUpdateInner: Codable, JSONEncodable, Hashable {

    /** Unique identifier of the asset group to update. */
    public var assetGroupId: String
    /** Asset Group name */
    public var name: String?
    /** Asset group description */
    public var description: String?
    /** Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group. */
    public var assetGroupTypes: [AssetGroupType]?
    /** A list of asset ids to add to the asset group. */
    public var assetsToAdd: [String]?
    /** A list of asset ids to remove from the asset group. */
    public var assetsToRemove: [String]?

    public init(assetGroupId: String, name: String? = nil, description: String? = nil, assetGroupTypes: [AssetGroupType]? = nil, assetsToAdd: [String]? = nil, assetsToRemove: [String]? = nil) {
        self.assetGroupId = assetGroupId
        self.name = name
        self.description = description
        self.assetGroupTypes = assetGroupTypes
        self.assetsToAdd = assetsToAdd
        self.assetsToRemove = assetsToRemove
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assetGroupId = "asset_group_id"
        case name
        case description
        case assetGroupTypes = "asset_group_types"
        case assetsToAdd = "assets_to_add"
        case assetsToRemove = "assets_to_remove"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(assetGroupId, forKey: .assetGroupId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(assetGroupTypes, forKey: .assetGroupTypes)
        try container.encodeIfPresent(assetsToAdd, forKey: .assetsToAdd)
        try container.encodeIfPresent(assetsToRemove, forKey: .assetsToRemove)
    }
}

