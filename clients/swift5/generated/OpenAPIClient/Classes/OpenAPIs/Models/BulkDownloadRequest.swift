//
// BulkDownloadRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Ad entities to get in bulk request. */
public struct BulkDownloadRequest: Codable, JSONEncodable, Hashable {

    static let entityTypesRule = ArrayRule(minItems: 1, maxItems: 5, uniqueItems: false)
    static let updatedSinceRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** All entity types specified will be downloaded. Fewer types result in faster downloads. */
    public var entityTypes: [BulkEntityType]?
    /** All entities specified by these IDs as well as their children and grandchildren will be downloaded if the entity type is one of the types requested to be downloaded. */
    public var entityIds: [String]?
    /** Unix UTC timestamp to retrieve all entities that have changed since this time. */
    public var updatedSince: String?
    public var campaignFilter: BulkDownloadRequestCampaignFilter?
    public var outputFormat: BulkOutputFormat? = "JSON"

    public init(entityTypes: [BulkEntityType]? = nil, entityIds: [String]? = nil, updatedSince: String? = nil, campaignFilter: BulkDownloadRequestCampaignFilter? = nil, outputFormat: BulkOutputFormat? = "JSON") {
        self.entityTypes = entityTypes
        self.entityIds = entityIds
        self.updatedSince = updatedSince
        self.campaignFilter = campaignFilter
        self.outputFormat = outputFormat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case entityTypes = "entity_types"
        case entityIds = "entity_ids"
        case updatedSince = "updated_since"
        case campaignFilter = "campaign_filter"
        case outputFormat = "output_format"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(entityTypes, forKey: .entityTypes)
        try container.encodeIfPresent(entityIds, forKey: .entityIds)
        try container.encodeIfPresent(updatedSince, forKey: .updatedSince)
        try container.encodeIfPresent(campaignFilter, forKey: .campaignFilter)
        try container.encodeIfPresent(outputFormat, forKey: .outputFormat)
    }
}

