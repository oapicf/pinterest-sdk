//
// TargetingTemplateGetResponseData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TargetingTemplateGetResponseData: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case deleted = "DELETED"
    }
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let adAccountIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** targeting template name */
    public var name: String?
    /** Enable auto-targeting for ad group. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    public var autoTargetingEnabled: Bool? = true
    public var targetingAttributes: TargetingSpec?
    public var placementGroup: PlacementGroupType?
    public var keywords: [TargetingTemplateKeyword]?
    public var trackingUrls: TrackingUrls?
    /** Targeting template ID. */
    public var id: String?
    /** Targeting template created time. Unix timestamp in seconds. */
    public var createdTime: Int?
    /** Targeting template updated time.Unix timestamp in seconds. */
    public var updatedTime: Int?
    /** The ID of the advertiser that this targeting template belongs to. */
    public var adAccountId: String?
    /** Indicate targeting template is active or Deleted */
    public var status: Status? = .active
    public var sizing: TargetingTemplateAudienceSizing?
    /** Inform if the targeting template is valid (ex. would be false if has revoked audience) */
    public var valid: Bool?

    public init(name: String? = nil, autoTargetingEnabled: Bool? = true, targetingAttributes: TargetingSpec? = nil, placementGroup: PlacementGroupType? = nil, keywords: [TargetingTemplateKeyword]? = nil, trackingUrls: TrackingUrls? = nil, id: String? = nil, createdTime: Int? = nil, updatedTime: Int? = nil, adAccountId: String? = nil, status: Status? = .active, sizing: TargetingTemplateAudienceSizing? = nil, valid: Bool? = nil) {
        self.name = name
        self.autoTargetingEnabled = autoTargetingEnabled
        self.targetingAttributes = targetingAttributes
        self.placementGroup = placementGroup
        self.keywords = keywords
        self.trackingUrls = trackingUrls
        self.id = id
        self.createdTime = createdTime
        self.updatedTime = updatedTime
        self.adAccountId = adAccountId
        self.status = status
        self.sizing = sizing
        self.valid = valid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case autoTargetingEnabled = "auto_targeting_enabled"
        case targetingAttributes = "targeting_attributes"
        case placementGroup = "placement_group"
        case keywords
        case trackingUrls = "tracking_urls"
        case id
        case createdTime = "created_time"
        case updatedTime = "updated_time"
        case adAccountId = "ad_account_id"
        case status
        case sizing
        case valid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(autoTargetingEnabled, forKey: .autoTargetingEnabled)
        try container.encodeIfPresent(targetingAttributes, forKey: .targetingAttributes)
        try container.encodeIfPresent(placementGroup, forKey: .placementGroup)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        try container.encodeIfPresent(trackingUrls, forKey: .trackingUrls)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(updatedTime, forKey: .updatedTime)
        try container.encodeIfPresent(adAccountId, forKey: .adAccountId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(sizing, forKey: .sizing)
        try container.encodeIfPresent(valid, forKey: .valid)
    }
}

