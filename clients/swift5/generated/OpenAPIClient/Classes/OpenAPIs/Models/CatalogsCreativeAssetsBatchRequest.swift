//
// CatalogsCreativeAssetsBatchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request object to update catalogs creative assets items */
public struct CatalogsCreativeAssetsBatchRequest: Codable, JSONEncodable, Hashable {

    public enum CatalogType: String, Codable, CaseIterable {
        case creativeAssets = "CREATIVE_ASSETS"
    }
    static let itemsRule = ArrayRule(minItems: 1, maxItems: 1000, uniqueItems: false)
    static let catalogIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var catalogType: CatalogType
    public var country: Country
    public var language: CatalogsItemsRequestLanguage
    /** Array with creative assets item operations */
    public var items: [CatalogsCreativeAssetsBatchItem]
    /** Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog */
    public var catalogId: String?

    public init(catalogType: CatalogType, country: Country, language: CatalogsItemsRequestLanguage, items: [CatalogsCreativeAssetsBatchItem], catalogId: String? = nil) {
        self.catalogType = catalogType
        self.country = country
        self.language = language
        self.items = items
        self.catalogId = catalogId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case catalogType = "catalog_type"
        case country
        case language
        case items
        case catalogId = "catalog_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(catalogType, forKey: .catalogType)
        try container.encode(country, forKey: .country)
        try container.encode(language, forKey: .language)
        try container.encode(items, forKey: .items)
        try container.encodeIfPresent(catalogId, forKey: .catalogId)
    }
}

