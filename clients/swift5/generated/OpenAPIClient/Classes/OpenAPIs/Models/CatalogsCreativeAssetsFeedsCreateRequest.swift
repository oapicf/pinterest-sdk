//
// CatalogsCreativeAssetsFeedsCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request object for creating a feed. */
public struct CatalogsCreativeAssetsFeedsCreateRequest: Codable, JSONEncodable, Hashable {

    static let locationRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(http|https|ftp|sftp):\/\//")
    static let catalogIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var defaultCurrency: NullableCurrency?
    /** A human-friendly name associated to a given feed. */
    public var name: String
    public var format: CatalogsFormat
    public var defaultLocale: CatalogsFeedsCreateRequestDefaultLocale
    public var defaultCountry: Country
    public var credentials: CatalogsFeedCredentials?
    /** The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */
    public var location: String
    public var preferredProcessingSchedule: CatalogsFeedProcessingSchedule?
    public var catalogType: CatalogsType
    /** Catalog id pertaining to the feed. If not provided, feed will use a default catalog based on type. At the moment a catalog can not have multiple creative assets feeds but this will change in the future. */
    public var catalogId: String?
    public var status: CatalogsStatus?

    public init(defaultCurrency: NullableCurrency? = nil, name: String, format: CatalogsFormat, defaultLocale: CatalogsFeedsCreateRequestDefaultLocale, defaultCountry: Country, credentials: CatalogsFeedCredentials? = nil, location: String, preferredProcessingSchedule: CatalogsFeedProcessingSchedule? = nil, catalogType: CatalogsType, catalogId: String? = nil, status: CatalogsStatus? = nil) {
        self.defaultCurrency = defaultCurrency
        self.name = name
        self.format = format
        self.defaultLocale = defaultLocale
        self.defaultCountry = defaultCountry
        self.credentials = credentials
        self.location = location
        self.preferredProcessingSchedule = preferredProcessingSchedule
        self.catalogType = catalogType
        self.catalogId = catalogId
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case defaultCurrency = "default_currency"
        case name
        case format
        case defaultLocale = "default_locale"
        case defaultCountry = "default_country"
        case credentials
        case location
        case preferredProcessingSchedule = "preferred_processing_schedule"
        case catalogType = "catalog_type"
        case catalogId = "catalog_id"
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(defaultCurrency, forKey: .defaultCurrency)
        try container.encode(name, forKey: .name)
        try container.encode(format, forKey: .format)
        try container.encode(defaultLocale, forKey: .defaultLocale)
        try container.encode(defaultCountry, forKey: .defaultCountry)
        try container.encodeIfPresent(credentials, forKey: .credentials)
        try container.encode(location, forKey: .location)
        try container.encodeIfPresent(preferredProcessingSchedule, forKey: .preferredProcessingSchedule)
        try container.encode(catalogType, forKey: .catalogType)
        try container.encodeIfPresent(catalogId, forKey: .catalogId)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

