//
// ConversionEventsUserDataAnyOf2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConversionEventsUserDataAnyOf2: Codable, JSONEncodable, Hashable {

    /** Sha256 hashes of lowercase version of user's email addresses. Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format. */
    public var em: [String]?
    /** Sha256 hashes of user's \"Google Advertising IDs\" (GAIDs) or \"Apple's Identifier for Advertisers\" (IDFAs). Used for matching. We highly recommend this on checkout events at least. It may improve reporting performance such as ROAS/CPA. The string should be in the UTF-8 format. */
    public var hashedMaids: [String]?
    /** The user's IP address, which can be either in IPv4 or IPv6 format. Used for matching. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */
    public var clientIpAddress: String
    /** The user agent string of the user's web browser. We highly recommend this for all events. It may improve reporting performance such as ROAS/CPA. */
    public var clientUserAgent: String

    public init(em: [String]? = nil, hashedMaids: [String]? = nil, clientIpAddress: String, clientUserAgent: String) {
        self.em = em
        self.hashedMaids = hashedMaids
        self.clientIpAddress = clientIpAddress
        self.clientUserAgent = clientUserAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case em
        case hashedMaids = "hashed_maids"
        case clientIpAddress = "client_ip_address"
        case clientUserAgent = "client_user_agent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(em, forKey: .em)
        try container.encodeIfPresent(hashedMaids, forKey: .hashedMaids)
        try container.encode(clientIpAddress, forKey: .clientIpAddress)
        try container.encode(clientUserAgent, forKey: .clientUserAgent)
    }
}

