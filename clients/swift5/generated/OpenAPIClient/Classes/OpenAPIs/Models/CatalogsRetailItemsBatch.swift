//
// CatalogsRetailItemsBatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object describing the catalogs retail items batch */
public struct CatalogsRetailItemsBatch: Codable, JSONEncodable, Hashable {

    /** Id of the catalogs items batch */
    public var batchId: String?
    /** Date and time (UTC) of the batch creation: YYYY-MM-DD'T'hh:mm:ss */
    public var createdTime: Date?
    /** Date and time (UTC) of the batch completion: YYYY-MM-DD'T'hh:mm:ss */
    public var completedTime: Date?
    public var status: BatchOperationStatus?
    public var catalogType: CatalogsType
    /** Array with the catalogs items processing records part of the catalogs items batch */
    public var items: [ItemProcessingRecord]?

    public init(batchId: String? = nil, createdTime: Date? = nil, completedTime: Date? = nil, status: BatchOperationStatus? = nil, catalogType: CatalogsType, items: [ItemProcessingRecord]? = nil) {
        self.batchId = batchId
        self.createdTime = createdTime
        self.completedTime = completedTime
        self.status = status
        self.catalogType = catalogType
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchId = "batch_id"
        case createdTime = "created_time"
        case completedTime = "completed_time"
        case status
        case catalogType = "catalog_type"
        case items
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(completedTime, forKey: .completedTime)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encode(catalogType, forKey: .catalogType)
        try container.encodeIfPresent(items, forKey: .items)
    }
}

