//
// AdsCreditDiscountsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdsCreditDiscountsResponse: Codable, JSONEncodable, Hashable {

    public enum DiscountType: String, Codable, CaseIterable {
        case coupon = "COUPON"
        case credit = "CREDIT"
        case couponApplied = "COUPON_APPLIED"
        case creditApplied = "CREDIT_APPLIED"
        case marketingOfferCredit = "MARKETING_OFFER_CREDIT"
        case marketingOfferCreditApplied = "MARKETING_OFFER_CREDIT_APPLIED"
        case goodwillCredit = "GOODWILL_CREDIT"
        case goodwillCreditApplied = "GOODWILL_CREDIT_APPLIED"
        case internalCredit = "INTERNAL_CREDIT"
        case internalCreditApplied = "INTERNAL_CREDIT_APPLIED"
        case prepaidCredit = "PREPAID_CREDIT"
        case prepaidCreditApplied = "PREPAID_CREDIT_APPLIED"
        case salesIncentiveCredit = "SALES_INCENTIVE_CREDIT"
        case salesIncentiveCreditApplied = "SALES_INCENTIVE_CREDIT_APPLIED"
        case creditExpired = "CREDIT_EXPIRED"
        case futureCredit = "FUTURE_CREDIT"
        case referralCredit = "REFERRAL_CREDIT"
        case invoiceSalesIncentiveCredit = "INVOICE_SALES_INCENTIVE_CREDIT"
        case invoiceSalesIncentiveCreditApplied = "INVOICE_SALES_INCENTIVE_CREDIT_APPLIED"
        case prepaidCreditRefund = "PREPAID_CREDIT_REFUND"
    }
    static let advertiserIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** True if the offer code is currently active. */
    public var active: Bool?
    /** Advertiser ID the offer was applied to. */
    public var advertiserId: String?
    /** The type of discount of this credit */
    public var discountType: DiscountType?
    /** The discount applied in the offerâ€™s currency value. */
    public var discountInMicroCurrency: Double?
    /** Currency value for the discount. */
    public var discountCurrency: String?
    /** Human readable title of the offer code. */
    public var title: String?
    /** The credits left to spend. */
    public var remainingDiscountInMicroCurrency: Double?

    public init(active: Bool? = nil, advertiserId: String? = nil, discountType: DiscountType? = nil, discountInMicroCurrency: Double? = nil, discountCurrency: String? = nil, title: String? = nil, remainingDiscountInMicroCurrency: Double? = nil) {
        self.active = active
        self.advertiserId = advertiserId
        self.discountType = discountType
        self.discountInMicroCurrency = discountInMicroCurrency
        self.discountCurrency = discountCurrency
        self.title = title
        self.remainingDiscountInMicroCurrency = remainingDiscountInMicroCurrency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case advertiserId = "advertiser_id"
        case discountType
        case discountInMicroCurrency
        case discountCurrency
        case title
        case remainingDiscountInMicroCurrency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(advertiserId, forKey: .advertiserId)
        try container.encodeIfPresent(discountType, forKey: .discountType)
        try container.encodeIfPresent(discountInMicroCurrency, forKey: .discountInMicroCurrency)
        try container.encodeIfPresent(discountCurrency, forKey: .discountCurrency)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(remainingDiscountInMicroCurrency, forKey: .remainingDiscountInMicroCurrency)
    }
}

