//
// UserBusinessRoleBinding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserBusinessRoleBinding: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var assetsSummary: BusinessMemberAssetsSummary?
    /** The access level a user has on the business. This can be EMPLOYEE, BIZ_ADMIN, or PARTNER. */
    public var businessRoles: [String]?
    /** Metadata for the business that created the business relationship. */
    public var createdByBusiness: BusinessAccessUserSummary?
    /** Metadata for the user that created the business relationship. */
    public var createdByUser: BusinessAccessUserSummary?
    /** The time the business relationship was created. Returned in milliseconds. */
    public var createdTime: Int?
    /** Unique identifier of the business member/business partner/employer. */
    public var id: String?
    /** This field is only relevant when business_role=\"PARTNER\". <br>If is_shared_partner=FALSE, the partner can access your business assets. If assets_summary is not empty, the assets listed are your business assets the partner has access to. <br>If is_shared_partner=TRUE, you can access the partner's business asset. If assets_summary is not empty, the assets listed are the partner's business assets you have access to. */
    public var isSharedPartner: Bool?
    /** Metadata for the business member/business partner/employer. */
    public var user: BusinessAccessUserSummary?

    public init(assetsSummary: BusinessMemberAssetsSummary? = nil, businessRoles: [String]? = nil, createdByBusiness: BusinessAccessUserSummary? = nil, createdByUser: BusinessAccessUserSummary? = nil, createdTime: Int? = nil, id: String? = nil, isSharedPartner: Bool? = nil, user: BusinessAccessUserSummary? = nil) {
        self.assetsSummary = assetsSummary
        self.businessRoles = businessRoles
        self.createdByBusiness = createdByBusiness
        self.createdByUser = createdByUser
        self.createdTime = createdTime
        self.id = id
        self.isSharedPartner = isSharedPartner
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assetsSummary = "assets_summary"
        case businessRoles = "business_roles"
        case createdByBusiness = "created_by_business"
        case createdByUser = "created_by_user"
        case createdTime = "created_time"
        case id
        case isSharedPartner = "is_shared_partner"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(assetsSummary, forKey: .assetsSummary)
        try container.encodeIfPresent(businessRoles, forKey: .businessRoles)
        try container.encodeIfPresent(createdByBusiness, forKey: .createdByBusiness)
        try container.encodeIfPresent(createdByUser, forKey: .createdByUser)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isSharedPartner, forKey: .isSharedPartner)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

