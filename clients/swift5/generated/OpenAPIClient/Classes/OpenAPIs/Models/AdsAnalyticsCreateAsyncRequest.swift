//
// AdsAnalyticsCreateAsyncRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdsAnalyticsCreateAsyncRequest: Codable, JSONEncodable, Hashable {

    public enum PrimarySort: String, Codable, CaseIterable {
        case id = "BY_ID"
        case date = "BY_DATE"
    }
    static let startDateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(\\d{4})-(\\d{2})-(\\d{2})$/")
    static let endDateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(\\d{4})-(\\d{2})-(\\d{2})$/")
    static let campaignIdsRule = ArrayRule(minItems: 1, maxItems: 500, uniqueItems: false)
    static let campaignStatusesRule = ArrayRule(minItems: 1, maxItems: 6, uniqueItems: false)
    static let campaignObjectiveTypesRule = ArrayRule(minItems: 1, maxItems: 7, uniqueItems: false)
    static let adGroupIdsRule = ArrayRule(minItems: 1, maxItems: 500, uniqueItems: false)
    static let adGroupStatusesRule = ArrayRule(minItems: 1, maxItems: 6, uniqueItems: false)
    static let adIdsRule = ArrayRule(minItems: 1, maxItems: 500, uniqueItems: false)
    static let adStatusesRule = ArrayRule(minItems: 1, maxItems: 6, uniqueItems: false)
    static let productGroupIdsRule = ArrayRule(minItems: 1, maxItems: 500, uniqueItems: false)
    static let productGroupStatusesRule = ArrayRule(minItems: 1, maxItems: 6, uniqueItems: false)
    static let productItemIdsRule = ArrayRule(minItems: 1, maxItems: 500, uniqueItems: false)
    static let targetingTypesRule = ArrayRule(minItems: 1, maxItems: 5, uniqueItems: false)
    static let metricsFiltersRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    static let startHourRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 23, exclusiveMaximum: false, multipleOf: nil)
    static let endHourRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 23, exclusiveMaximum: false, multipleOf: nil)
    /** Metric report start date (UTC). Format: YYYY-MM-DD */
    public var startDate: String
    /** Metric report end date (UTC). Format: YYYY-MM-DD */
    public var endDate: String
    /** TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly */
    public var granularity: Granularity
    /** Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    public var clickWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__30
    /** Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days. */
    public var engagementWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__30
    /** Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day. */
    public var viewWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__1
    /** The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. */
    public var conversionReportTime: ConversionReportTimeType? = "TIME_OF_AD_ACTION"
    /** List of types of attribution for the conversion report */
    public var attributionTypes: [ConversionReportAttributionType]?
    /** List of campaign ids */
    public var campaignIds: [String]?
    /** List of status values for filtering */
    public var campaignStatuses: [CampaignSummaryStatus]?
    /** List of values for filtering. [\"WEB_SESSIONS\"] in BETA. */
    public var campaignObjectiveTypes: [ObjectiveType]?
    /** List of ad group ids */
    public var adGroupIds: [String]?
    /** List of values for filtering */
    public var adGroupStatuses: [AdGroupSummaryStatus]?
    /** List of ad ids [This parameter is no supported for Product Item Level Reports] */
    public var adIds: [String]?
    /** List of values for filtering [This parameter is not supported for Product Item Level Reports] */
    public var adStatuses: [PinPromotionSummaryStatus]?
    /** List of product group ids */
    public var productGroupIds: [String]?
    /** List of values for filtering */
    public var productGroupStatuses: [ProductGroupSummaryStatus]?
    /** List of product item ids */
    public var productItemIds: [String]?
    /** List of targeting types. Requires `level` to be a value ending in `_TARGETING`. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users. */
    public var targetingTypes: [AdsAnalyticsTargetingType]?
    /** List of metrics filters */
    public var metricsFilters: [AdsAnalyticsMetricsFilter]?
    /** Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports. */
    public var columns: [ReportingColumnAsync]
    /** Level of the report */
    public var level: MetricsReportingLevel
    /** Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0. */
    public var reportFormat: DataOutputFormat? = "JSON"
    /** Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests. */
    public var primarySort: PrimarySort?
    /** Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports. */
    public var startHour: Int?
    /** Which hour of the end date to stop the report (inclusive). For example, with an end_date of '2020-01-01' and end_hour of '15', the report will contain metrics up to '2020-01-01 14:59:59'. The entire day will be included if no end hour is provided. Only allowed for hourly reports. */
    public var endHour: Int?

    public init(startDate: String, endDate: String, granularity: Granularity, clickWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__30, engagementWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__30, viewWindowDays: ConversionAttributionWindowDays? = ConversionAttributionWindowDays__1, conversionReportTime: ConversionReportTimeType? = "TIME_OF_AD_ACTION", attributionTypes: [ConversionReportAttributionType]? = nil, campaignIds: [String]? = nil, campaignStatuses: [CampaignSummaryStatus]? = nil, campaignObjectiveTypes: [ObjectiveType]? = nil, adGroupIds: [String]? = nil, adGroupStatuses: [AdGroupSummaryStatus]? = nil, adIds: [String]? = nil, adStatuses: [PinPromotionSummaryStatus]? = nil, productGroupIds: [String]? = nil, productGroupStatuses: [ProductGroupSummaryStatus]? = nil, productItemIds: [String]? = nil, targetingTypes: [AdsAnalyticsTargetingType]? = nil, metricsFilters: [AdsAnalyticsMetricsFilter]? = nil, columns: [ReportingColumnAsync], level: MetricsReportingLevel, reportFormat: DataOutputFormat? = "JSON", primarySort: PrimarySort? = nil, startHour: Int? = nil, endHour: Int? = nil) {
        self.startDate = startDate
        self.endDate = endDate
        self.granularity = granularity
        self.clickWindowDays = clickWindowDays
        self.engagementWindowDays = engagementWindowDays
        self.viewWindowDays = viewWindowDays
        self.conversionReportTime = conversionReportTime
        self.attributionTypes = attributionTypes
        self.campaignIds = campaignIds
        self.campaignStatuses = campaignStatuses
        self.campaignObjectiveTypes = campaignObjectiveTypes
        self.adGroupIds = adGroupIds
        self.adGroupStatuses = adGroupStatuses
        self.adIds = adIds
        self.adStatuses = adStatuses
        self.productGroupIds = productGroupIds
        self.productGroupStatuses = productGroupStatuses
        self.productItemIds = productItemIds
        self.targetingTypes = targetingTypes
        self.metricsFilters = metricsFilters
        self.columns = columns
        self.level = level
        self.reportFormat = reportFormat
        self.primarySort = primarySort
        self.startHour = startHour
        self.endHour = endHour
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startDate = "start_date"
        case endDate = "end_date"
        case granularity
        case clickWindowDays = "click_window_days"
        case engagementWindowDays = "engagement_window_days"
        case viewWindowDays = "view_window_days"
        case conversionReportTime = "conversion_report_time"
        case attributionTypes = "attribution_types"
        case campaignIds = "campaign_ids"
        case campaignStatuses = "campaign_statuses"
        case campaignObjectiveTypes = "campaign_objective_types"
        case adGroupIds = "ad_group_ids"
        case adGroupStatuses = "ad_group_statuses"
        case adIds = "ad_ids"
        case adStatuses = "ad_statuses"
        case productGroupIds = "product_group_ids"
        case productGroupStatuses = "product_group_statuses"
        case productItemIds = "product_item_ids"
        case targetingTypes = "targeting_types"
        case metricsFilters = "metrics_filters"
        case columns
        case level
        case reportFormat = "report_format"
        case primarySort = "primary_sort"
        case startHour = "start_hour"
        case endHour = "end_hour"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(startDate, forKey: .startDate)
        try container.encode(endDate, forKey: .endDate)
        try container.encode(granularity, forKey: .granularity)
        try container.encodeIfPresent(clickWindowDays, forKey: .clickWindowDays)
        try container.encodeIfPresent(engagementWindowDays, forKey: .engagementWindowDays)
        try container.encodeIfPresent(viewWindowDays, forKey: .viewWindowDays)
        try container.encodeIfPresent(conversionReportTime, forKey: .conversionReportTime)
        try container.encodeIfPresent(attributionTypes, forKey: .attributionTypes)
        try container.encodeIfPresent(campaignIds, forKey: .campaignIds)
        try container.encodeIfPresent(campaignStatuses, forKey: .campaignStatuses)
        try container.encodeIfPresent(campaignObjectiveTypes, forKey: .campaignObjectiveTypes)
        try container.encodeIfPresent(adGroupIds, forKey: .adGroupIds)
        try container.encodeIfPresent(adGroupStatuses, forKey: .adGroupStatuses)
        try container.encodeIfPresent(adIds, forKey: .adIds)
        try container.encodeIfPresent(adStatuses, forKey: .adStatuses)
        try container.encodeIfPresent(productGroupIds, forKey: .productGroupIds)
        try container.encodeIfPresent(productGroupStatuses, forKey: .productGroupStatuses)
        try container.encodeIfPresent(productItemIds, forKey: .productItemIds)
        try container.encodeIfPresent(targetingTypes, forKey: .targetingTypes)
        try container.encodeIfPresent(metricsFilters, forKey: .metricsFilters)
        try container.encode(columns, forKey: .columns)
        try container.encode(level, forKey: .level)
        try container.encodeIfPresent(reportFormat, forKey: .reportFormat)
        try container.encodeIfPresent(primarySort, forKey: .primarySort)
        try container.encodeIfPresent(startHour, forKey: .startHour)
        try container.encodeIfPresent(endHour, forKey: .endHour)
    }
}

