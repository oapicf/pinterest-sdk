//
// OptimizationGoalMetadataConversionTagV3GoalMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OptimizationGoalMetadataConversionTagV3GoalMetadata: Codable, JSONEncodable, Hashable {

    public enum ConversionEvent: String, Codable, CaseIterable {
        case pageVisit = "PAGE_VISIT"
        case signup = "SIGNUP"
        case checkout = "CHECKOUT"
        case custom = "CUSTOM"
        case viewCategory = "VIEW_CATEGORY"
        case search = "SEARCH"
        case addToCart = "ADD_TO_CART"
        case watchVideo = "WATCH_VIDEO"
        case lead = "LEAD"
        case appInstall = "APP_INSTALL"
    }
    public enum LearningModeType: String, Codable, CaseIterable {
        case notActive = "NOT_ACTIVE"
        case active = "ACTIVE"
    }
    static let conversionTagIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]+$/")
    static let cpaGoalValueInMicroCurrencyRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]+$/")
    public var attributionWindows: OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows?
    public var conversionEvent: ConversionEvent?
    public var conversionTagId: String?
    public var cpaGoalValueInMicroCurrency: String?
    /** ROAS optimization is not supported */
    public var isRoasOptimized: Bool?
    /** Conversion learning model type */
    public var learningModeType: LearningModeType?

    public init(attributionWindows: OptimizationGoalMetadataConversionTagV3GoalMetadataAttributionWindows? = nil, conversionEvent: ConversionEvent? = nil, conversionTagId: String? = nil, cpaGoalValueInMicroCurrency: String? = nil, isRoasOptimized: Bool? = nil, learningModeType: LearningModeType? = nil) {
        self.attributionWindows = attributionWindows
        self.conversionEvent = conversionEvent
        self.conversionTagId = conversionTagId
        self.cpaGoalValueInMicroCurrency = cpaGoalValueInMicroCurrency
        self.isRoasOptimized = isRoasOptimized
        self.learningModeType = learningModeType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attributionWindows = "attribution_windows"
        case conversionEvent = "conversion_event"
        case conversionTagId = "conversion_tag_id"
        case cpaGoalValueInMicroCurrency = "cpa_goal_value_in_micro_currency"
        case isRoasOptimized = "is_roas_optimized"
        case learningModeType = "learning_mode_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attributionWindows, forKey: .attributionWindows)
        try container.encodeIfPresent(conversionEvent, forKey: .conversionEvent)
        try container.encodeIfPresent(conversionTagId, forKey: .conversionTagId)
        try container.encodeIfPresent(cpaGoalValueInMicroCurrency, forKey: .cpaGoalValueInMicroCurrency)
        try container.encodeIfPresent(isRoasOptimized, forKey: .isRoasOptimized)
        try container.encodeIfPresent(learningModeType, forKey: .learningModeType)
    }
}

