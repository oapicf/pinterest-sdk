//
// CatalogsCreativeAssetsFeedsUpdateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request object for updating a feed. */
public struct CatalogsCreativeAssetsFeedsUpdateRequest: Codable, JSONEncodable, Hashable {

    static let locationRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(http|https|ftp|sftp):\/\//")
    public var defaultCurrency: NullableCurrency?
    /** A human-friendly name associated to a given feed. */
    public var name: String?
    public var format: CatalogsFormat?
    public var credentials: CatalogsFeedCredentials?
    /** The URL where a feed is available for download. This URL is what Pinterest will use to download a feed for processing. */
    public var location: String?
    public var preferredProcessingSchedule: CatalogsFeedProcessingSchedule?
    public var status: CatalogsStatus?
    public var catalogType: CatalogsType

    public init(defaultCurrency: NullableCurrency? = nil, name: String? = nil, format: CatalogsFormat? = nil, credentials: CatalogsFeedCredentials? = nil, location: String? = nil, preferredProcessingSchedule: CatalogsFeedProcessingSchedule? = nil, status: CatalogsStatus? = nil, catalogType: CatalogsType) {
        self.defaultCurrency = defaultCurrency
        self.name = name
        self.format = format
        self.credentials = credentials
        self.location = location
        self.preferredProcessingSchedule = preferredProcessingSchedule
        self.status = status
        self.catalogType = catalogType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case defaultCurrency = "default_currency"
        case name
        case format
        case credentials
        case location
        case preferredProcessingSchedule = "preferred_processing_schedule"
        case status
        case catalogType = "catalog_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(defaultCurrency, forKey: .defaultCurrency)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(credentials, forKey: .credentials)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(preferredProcessingSchedule, forKey: .preferredProcessingSchedule)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encode(catalogType, forKey: .catalogType)
    }
}

