//
// OauthAccessTokenRequestRefresh.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A request to exchange a refresh token for a new access token. */
public struct OauthAccessTokenRequestRefresh: Codable, JSONEncodable, Hashable {

    public enum GrantType: String, Codable, CaseIterable {
        case authorizationCode = "authorization_code"
        case refreshToken = "refresh_token"
        case clientCredentials = "client_credentials"
    }
    public var grantType: GrantType
    public var refreshToken: String
    public var scope: String?
    /** Setting this field to <code>true</code> will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \"everlasting_refresh\". */
    public var refreshOn: Bool?

    public init(grantType: GrantType, refreshToken: String, scope: String? = nil, refreshOn: Bool? = nil) {
        self.grantType = grantType
        self.refreshToken = refreshToken
        self.scope = scope
        self.refreshOn = refreshOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case grantType = "grant_type"
        case refreshToken = "refresh_token"
        case scope
        case refreshOn = "refresh_on"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(grantType, forKey: .grantType)
        try container.encode(refreshToken, forKey: .refreshToken)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(refreshOn, forKey: .refreshOn)
    }
}

