//
// PinMediaSourceImagesBase64.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Multiple Base64-encoded images media source */
public struct PinMediaSourceImagesBase64: Codable, JSONEncodable, Hashable {

    public enum SourceType: String, Codable, CaseIterable {
        case multipleImageBase64 = "multiple_image_base64"
    }
    static let itemsRule = ArrayRule(minItems: 2, maxItems: 5, uniqueItems: false)
    static let indexRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var sourceType: SourceType?
    /** Array with image objects. */
    public var items: [PinMediaSourceImagesBase64ItemsInner]
    public var index: Int?

    public init(sourceType: SourceType? = nil, items: [PinMediaSourceImagesBase64ItemsInner], index: Int? = nil) {
        self.sourceType = sourceType
        self.items = items
        self.index = index
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceType = "source_type"
        case items
        case index
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sourceType, forKey: .sourceType)
        try container.encode(items, forKey: .items)
        try container.encodeIfPresent(index, forKey: .index)
    }
}

