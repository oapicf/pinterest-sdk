//
// CatalogsReportDistributionStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogsReportDistributionStats: Codable, JSONEncodable, Hashable {

    public enum ReportType: String, Codable, CaseIterable {
        case distributionIssues = "DISTRIBUTION_ISSUES"
    }
    static let catalogIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    public var reportType: ReportType?
    /** ID of the catalog entity. */
    public var catalogId: String?
    /** The event code that a diagnostics aggregated number references */
    public var code: Int?
    /** A human-friendly label for the event code (e.g, 'SPAM') */
    public var codeLabel: String?
    /** Title message describing the diagnostic issue */
    public var message: String?
    /** Number of occurrences of the issue */
    public var occurrences: Int?
    /** Indicates if issue makes items ineligible for ads distribution */
    public var ineligibleForAds: Bool?
    /** Indicates if issue makes items ineligible for organic distribution */
    public var ineligibleForOrganic: Bool?

    public init(reportType: ReportType? = nil, catalogId: String? = nil, code: Int? = nil, codeLabel: String? = nil, message: String? = nil, occurrences: Int? = nil, ineligibleForAds: Bool? = nil, ineligibleForOrganic: Bool? = nil) {
        self.reportType = reportType
        self.catalogId = catalogId
        self.code = code
        self.codeLabel = codeLabel
        self.message = message
        self.occurrences = occurrences
        self.ineligibleForAds = ineligibleForAds
        self.ineligibleForOrganic = ineligibleForOrganic
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case reportType = "report_type"
        case catalogId = "catalog_id"
        case code
        case codeLabel = "code_label"
        case message
        case occurrences
        case ineligibleForAds = "ineligible_for_ads"
        case ineligibleForOrganic = "ineligible_for_organic"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(reportType, forKey: .reportType)
        try container.encodeIfPresent(catalogId, forKey: .catalogId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(codeLabel, forKey: .codeLabel)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(occurrences, forKey: .occurrences)
        try container.encodeIfPresent(ineligibleForAds, forKey: .ineligibleForAds)
        try container.encodeIfPresent(ineligibleForOrganic, forKey: .ineligibleForOrganic)
    }
}

