//
// UpdatePartnerAssetsResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An object containing the permissions a business partner has on the asset. */
public struct UpdatePartnerAssetsResult: Codable, JSONEncodable, Hashable {

    static let assetIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let partnerIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** Unique identifier of a business asset. */
    public var assetId: String?
    /** Type of asset. Currently we only support AD_ACCOUNT and PROFILE, and ASSET_GROUP. */
    public var assetType: String?
    /** Unique identifier of a business partner. */
    public var partnerId: String?
    /** Permission levels member or partner has on an asset. */
    public var permissions: [String]?

    public init(assetId: String? = nil, assetType: String? = nil, partnerId: String? = nil, permissions: [String]? = nil) {
        self.assetId = assetId
        self.assetType = assetType
        self.partnerId = partnerId
        self.permissions = permissions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assetId = "asset_id"
        case assetType = "asset_type"
        case partnerId = "partner_id"
        case permissions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(assetId, forKey: .assetId)
        try container.encodeIfPresent(assetType, forKey: .assetType)
        try container.encodeIfPresent(partnerId, forKey: .partnerId)
        try container.encodeIfPresent(permissions, forKey: .permissions)
    }
}

