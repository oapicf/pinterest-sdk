//
// BaseInviteDataResponseInviteData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Metadata for the invite/request. */
public struct BaseInviteDataResponseInviteData: Codable, JSONEncodable, Hashable {

    /** The date and time when the invite/request will expire. Returned in milliseconds. */
    public var inviteExpiration: Int?
    /** The current status of the invite. The invite can be in one of the following states PENDING, ACCEPTED, DECLINED, CANCELLED, EXPIRED. */
    public var inviteStatus: String?
    /** The type of invite. <br>'MEMBER_INVITE' is to invite a member to access your business assets. <br>'PARTNER_INVITE' is to invite a partner to access your business assets. <br>'PARTNER_REQUEST' is to request access a partner's business assets. */
    public var inviteType: String?
    /** The date and time the invite/request was last updated. Returned in milliseconds. */
    public var lastUpdatedTime: Int?
    /** The date and time the invite/request was sent/created. Returned in milliseconds. */
    public var sentAt: Int?

    public init(inviteExpiration: Int? = nil, inviteStatus: String? = nil, inviteType: String? = nil, lastUpdatedTime: Int? = nil, sentAt: Int? = nil) {
        self.inviteExpiration = inviteExpiration
        self.inviteStatus = inviteStatus
        self.inviteType = inviteType
        self.lastUpdatedTime = lastUpdatedTime
        self.sentAt = sentAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inviteExpiration = "invite_expiration"
        case inviteStatus = "invite_status"
        case inviteType = "invite_type"
        case lastUpdatedTime = "last_updated_time"
        case sentAt = "sent_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(inviteExpiration, forKey: .inviteExpiration)
        try container.encodeIfPresent(inviteStatus, forKey: .inviteStatus)
        try container.encodeIfPresent(inviteType, forKey: .inviteType)
        try container.encodeIfPresent(lastUpdatedTime, forKey: .lastUpdatedTime)
        try container.encodeIfPresent(sentAt, forKey: .sentAt)
    }
}

