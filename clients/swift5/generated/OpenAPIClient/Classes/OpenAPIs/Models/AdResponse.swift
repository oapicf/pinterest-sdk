//
// AdResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdResponse: Codable, JSONEncodable, Hashable {

    public enum CustomizableCtaType: String, Codable, CaseIterable {
        case getOffer = "GET_OFFER"
        case learnMore = "LEARN_MORE"
        case orderNow = "ORDER_NOW"
        case shopNow = "SHOP_NOW"
        case signUp = "SIGN_UP"
        case subscribe = "SUBSCRIBE"
        case buyNow = "BUY_NOW"
        case contactUs = "CONTACT_US"
        case getQuote = "GET_QUOTE"
        case visitSite = "VISIT_SITE"
        case applyNow = "APPLY_NOW"
        case bookNow = "BOOK_NOW"
        case requestDemo = "REQUEST_DEMO"
        case registerNow = "REGISTER_NOW"
        case findADealer = "FIND_A_DEALER"
        case addToCart = "ADD_TO_CART"
        case watchNow = "WATCH_NOW"
        case readMore = "READ_MORE"
    }
    public enum RejectedReasons: String, Codable, CaseIterable {
        case hashtags = "HASHTAGS"
        case promotionsAndPrices = "PROMOTIONS_AND_PRICES"
        case targeting = "TARGETING"
        case landingPage = "LANDING_PAGE"
        case capsAndSymbols = "CAPS_AND_SYMBOLS"
        case shocking = "SHOCKING"
        case weightLoss = "WEIGHT_LOSS"
        case prohibitedProduct = "PROHIBITED_PRODUCT"
        case authenticity = "AUTHENTICITY"
        case nudity = "NUDITY"
        case confusingDesign = "CONFUSING_DESIGN"
        case urgency = "URGENCY"
        case ratings = "RATINGS"
        case app = "APP"
        case alcohol = "ALCOHOL"
        case contests = "CONTESTS"
        case political = "POLITICAL"
        case other = "OTHER"
        case image = "IMAGE"
        case nar = "NAR"
        case inconsistent = "INCONSISTENT"
        case clickbait = "CLICKBAIT"
        case noDescription = "NO_DESCRIPTION"
        case lowQuality = "LOW_QUALITY"
        case exaggeratedClaims = "EXAGGERATED_CLAIMS"
        case pinterestBrand = "PINTEREST_BRAND"
        case alcoholNoSale = "ALCOHOL_NO_SALE"
        case landingPageSpeed = "LANDING_PAGE_SPEED"
        case landingPageHardwall = "LANDING_PAGE_HARDWALL"
        case landingPageBroken = "LANDING_PAGE_BROKEN"
        case landingPageQuality = "LANDING_PAGE_QUALITY"
        case outOfStock = "OUT_OF_STOCK"
        case imageLowQuality = "IMAGE_LOW_QUALITY"
        case imageBusy = "IMAGE_BUSY"
        case imagePoorlyEdited = "IMAGE_POORLY_EDITED"
        case imageBeforeAfter = "IMAGE_BEFORE_AFTER"
        case ugc = "UGC"
        case fakeButtons = "FAKE_BUTTONS"
        case weapons = "WEAPONS"
        case sensitive = "SENSITIVE"
        case unacceptableBusiness = "UNACCEPTABLE_BUSINESS"
        case suspiciousClaims = "SUSPICIOUS_CLAIMS"
        case pharma = "PHARMA"
        case suspiciousSupplements = "SUSPICIOUS_SUPPLEMENTS"
        case illegalRecreationalDrug = "ILLEGAL_RECREATIONAL_DRUG"
        case lowQualityLandingPage = "LOW_QUALITY_LANDING_PAGE"
        case restrictedHealthcare = "RESTRICTED_HEALTHCARE"
        case inconsistentLangFr = "INCONSISTENT_LANG_FR"
    }
    public enum ReviewStatus: String, Codable, CaseIterable {
        case other = "OTHER"
        case pending = "PENDING"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }
    static let adGroupIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(AG)?\\d+$/")
    static let leadFormIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(AG)?\\d+$/")
    static let pinIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let adAccountIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let campaignIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\d+$/")
    /** ID of the ad group that contains the ad. */
    public var adGroupId: String?
    /** Deep link URL for Android devices. */
    public var androidDeepLink: String?
    /** Comma-separated deep links for the carousel pin on Android. */
    public var carouselAndroidDeepLinks: [String]?
    /** Comma-separated destination URLs for the carousel pin to promote. */
    public var carouselDestinationUrls: [String]?
    /** Comma-separated deep links for the carousel pin on iOS. */
    public var carouselIosDeepLinks: [String]?
    /** Tracking url for the ad clicks. */
    public var clickTrackingUrl: String?
    public var creativeType: CreativeType?
    /** Destination URL. */
    public var destinationUrl: String?
    /** Deep link URL for iOS devices. */
    public var iosDeepLink: String?
    /** Is original pin deleted? */
    public var isPinDeleted: Bool?
    /** Is pin repinnable? */
    public var isRemovable: Bool?
    /** Name of the ad - 255 chars max. */
    public var name: String?
    public var status: EntityStatus?
    public var trackingUrls: TrackingUrls?
    /** Tracking URL for ad impressions. */
    public var viewTrackingUrl: String?
    /** Lead form ID for lead ad generation. */
    public var leadFormId: String?
    public var gridClickType: GridClickType?
    /** Select a call to action (CTA) to display below your ad. Available only for ads with direct links enabled. CTA options for consideration and conversion campaigns are LEARN_MORE, SHOP_NOW, BOOK_NOW, SIGN_UP, VISIT_SITE, BUY_NOW, GET_OFFER, ORDER_NOW, ADD_TO_CART (for conversion campaigns with add to cart conversion events only) */
    public var customizableCtaType: CustomizableCtaType?
    /** Before creating a quiz ad, you must create an organic Pin using POST/Create Pin for each result in the quiz. Quiz ads cannot be saved by a Pinner. Quiz ad results can be saved. */
    public var quizPinData: QuizPinData?
    /** Pin ID. */
    public var pinId: String?
    /** The ID of the advertiser that this ad belongs to. */
    public var adAccountId: String?
    /** ID of the ad campaign that contains this ad. */
    public var campaignId: String?
    /** Destination URL template for all items within a collections drawer. */
    public var collectionItemsDestinationUrlTemplate: String?
    /** Pin creation time. Unix timestamp in seconds. */
    public var createdTime: Int?
    /** The ID of this ad. */
    public var id: String?
    /** Enum reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\". */
    public var rejectedReasons: [RejectedReasons]?
    /** Text reason why the pin was rejected. Returned if <code>review_status</code> is \"REJECTED\". */
    public var rejectionLabels: [String]?
    /** Ad review status */
    public var reviewStatus: ReviewStatus?
    /** Always \"ad\". */
    public var type: String?
    /** Last update time. Unix timestamp in seconds. */
    public var updatedTime: Int?
    /** Ad summary status */
    public var summaryStatus: PinPromotionSummaryStatus?

    public init(adGroupId: String? = nil, androidDeepLink: String? = nil, carouselAndroidDeepLinks: [String]? = nil, carouselDestinationUrls: [String]? = nil, carouselIosDeepLinks: [String]? = nil, clickTrackingUrl: String? = nil, creativeType: CreativeType? = nil, destinationUrl: String? = nil, iosDeepLink: String? = nil, isPinDeleted: Bool? = nil, isRemovable: Bool? = nil, name: String? = nil, status: EntityStatus? = nil, trackingUrls: TrackingUrls? = nil, viewTrackingUrl: String? = nil, leadFormId: String? = nil, gridClickType: GridClickType? = nil, customizableCtaType: CustomizableCtaType? = nil, quizPinData: QuizPinData? = nil, pinId: String? = nil, adAccountId: String? = nil, campaignId: String? = nil, collectionItemsDestinationUrlTemplate: String? = nil, createdTime: Int? = nil, id: String? = nil, rejectedReasons: [RejectedReasons]? = nil, rejectionLabels: [String]? = nil, reviewStatus: ReviewStatus? = nil, type: String? = nil, updatedTime: Int? = nil, summaryStatus: PinPromotionSummaryStatus? = nil) {
        self.adGroupId = adGroupId
        self.androidDeepLink = androidDeepLink
        self.carouselAndroidDeepLinks = carouselAndroidDeepLinks
        self.carouselDestinationUrls = carouselDestinationUrls
        self.carouselIosDeepLinks = carouselIosDeepLinks
        self.clickTrackingUrl = clickTrackingUrl
        self.creativeType = creativeType
        self.destinationUrl = destinationUrl
        self.iosDeepLink = iosDeepLink
        self.isPinDeleted = isPinDeleted
        self.isRemovable = isRemovable
        self.name = name
        self.status = status
        self.trackingUrls = trackingUrls
        self.viewTrackingUrl = viewTrackingUrl
        self.leadFormId = leadFormId
        self.gridClickType = gridClickType
        self.customizableCtaType = customizableCtaType
        self.quizPinData = quizPinData
        self.pinId = pinId
        self.adAccountId = adAccountId
        self.campaignId = campaignId
        self.collectionItemsDestinationUrlTemplate = collectionItemsDestinationUrlTemplate
        self.createdTime = createdTime
        self.id = id
        self.rejectedReasons = rejectedReasons
        self.rejectionLabels = rejectionLabels
        self.reviewStatus = reviewStatus
        self.type = type
        self.updatedTime = updatedTime
        self.summaryStatus = summaryStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case adGroupId = "ad_group_id"
        case androidDeepLink = "android_deep_link"
        case carouselAndroidDeepLinks = "carousel_android_deep_links"
        case carouselDestinationUrls = "carousel_destination_urls"
        case carouselIosDeepLinks = "carousel_ios_deep_links"
        case clickTrackingUrl = "click_tracking_url"
        case creativeType = "creative_type"
        case destinationUrl = "destination_url"
        case iosDeepLink = "ios_deep_link"
        case isPinDeleted = "is_pin_deleted"
        case isRemovable = "is_removable"
        case name
        case status
        case trackingUrls = "tracking_urls"
        case viewTrackingUrl = "view_tracking_url"
        case leadFormId = "lead_form_id"
        case gridClickType = "grid_click_type"
        case customizableCtaType = "customizable_cta_type"
        case quizPinData = "quiz_pin_data"
        case pinId = "pin_id"
        case adAccountId = "ad_account_id"
        case campaignId = "campaign_id"
        case collectionItemsDestinationUrlTemplate = "collection_items_destination_url_template"
        case createdTime = "created_time"
        case id
        case rejectedReasons = "rejected_reasons"
        case rejectionLabels = "rejection_labels"
        case reviewStatus = "review_status"
        case type
        case updatedTime = "updated_time"
        case summaryStatus = "summary_status"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(adGroupId, forKey: .adGroupId)
        try container.encodeIfPresent(androidDeepLink, forKey: .androidDeepLink)
        try container.encodeIfPresent(carouselAndroidDeepLinks, forKey: .carouselAndroidDeepLinks)
        try container.encodeIfPresent(carouselDestinationUrls, forKey: .carouselDestinationUrls)
        try container.encodeIfPresent(carouselIosDeepLinks, forKey: .carouselIosDeepLinks)
        try container.encodeIfPresent(clickTrackingUrl, forKey: .clickTrackingUrl)
        try container.encodeIfPresent(creativeType, forKey: .creativeType)
        try container.encodeIfPresent(destinationUrl, forKey: .destinationUrl)
        try container.encodeIfPresent(iosDeepLink, forKey: .iosDeepLink)
        try container.encodeIfPresent(isPinDeleted, forKey: .isPinDeleted)
        try container.encodeIfPresent(isRemovable, forKey: .isRemovable)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(trackingUrls, forKey: .trackingUrls)
        try container.encodeIfPresent(viewTrackingUrl, forKey: .viewTrackingUrl)
        try container.encodeIfPresent(leadFormId, forKey: .leadFormId)
        try container.encodeIfPresent(gridClickType, forKey: .gridClickType)
        try container.encodeIfPresent(customizableCtaType, forKey: .customizableCtaType)
        try container.encodeIfPresent(quizPinData, forKey: .quizPinData)
        try container.encodeIfPresent(pinId, forKey: .pinId)
        try container.encodeIfPresent(adAccountId, forKey: .adAccountId)
        try container.encodeIfPresent(campaignId, forKey: .campaignId)
        try container.encodeIfPresent(collectionItemsDestinationUrlTemplate, forKey: .collectionItemsDestinationUrlTemplate)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(rejectedReasons, forKey: .rejectedReasons)
        try container.encodeIfPresent(rejectionLabels, forKey: .rejectionLabels)
        try container.encodeIfPresent(reviewStatus, forKey: .reviewStatus)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updatedTime, forKey: .updatedTime)
        try container.encodeIfPresent(summaryStatus, forKey: .summaryStatus)
    }
}

