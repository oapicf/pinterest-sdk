//
// AdGroupCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AdGroupCreateRequest: Codable, JSONEncodable, Hashable {

    public enum BidStrategyType: String, Codable, CaseIterable {
        case automaticBid = "AUTOMATIC_BID"
        case maxBid = "MAX_BID"
        case targetAvg = "TARGET_AVG"
    }
    static let campaignIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[C]?\\d+$/")
    static let targetingTemplateIdsRule = ArrayRule(minItems: nil, maxItems: 1, uniqueItems: false)
    /** Ad group name. */
    public var name: String
    /** Ad group/entity status. */
    public var status: EntityStatus?
    /** Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups. */
    public var budgetInMicroCurrency: Int?
    /** Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC. */
    public var bidInMicroCurrency: Int?
    /** Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `\"WEB_CONVERSION\"`. */
    public var optimizationGoalMetadata: OptimizationGoalMetadata?
    public var budgetType: BudgetType? = "DAILY"
    /** Ad group start time. Unix timestamp in seconds. Defaults to current time. */
    public var startTime: Int?
    /** Ad group end time. Unix timestamp in seconds. */
    public var endTime: Int?
    public var targetingSpec: TargetingSpec?
    /** Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=\"/docs/redoc/#section/Billable-event\">billable_event</a> value. This field **REQUIRES** the `end_time` field. */
    public var lifetimeFrequencyCap: Int?
    /** Third-party tracking URLs.<br> JSON object with the format: {\"<a href=\"/docs/redoc/#section/Tracking-URL-event\">Tracking event enum</a>\":[URL string array],...}<br> For example: {\"impression\": [\"URL1\", \"URL2\"], \"click\": [\"URL1\", \"URL2\", \"URL3\"]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=\"https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking\" target=\"_blank\">Third-party and dynamic tracking</a>. */
    public var trackingUrls: TrackingUrls?
    /** Enable auto-targeting for ad group.Default value is True. Also known as <a href=\"https://help.pinterest.com/en/business/article/expanded-targeting\" target=\"_blank\">\"expanded targeting\"</a>. */
    public var autoTargetingEnabled: Bool?
    /** <a href=\"/docs/redoc/#section/Placement-group\">Placement group</a>. */
    public var placementGroup: PlacementGroupType?
    public var pacingDeliveryType: PacingDeliveryType? = "STANDARD"
    /** Campaign ID of the ad group. */
    public var campaignId: String
    public var billableEvent: ActionType
    /** Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID. */
    public var bidStrategyType: BidStrategyType?
    /** Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0']. */
    public var targetingTemplateIds: [String]?

    public init(name: String, status: EntityStatus? = nil, budgetInMicroCurrency: Int? = nil, bidInMicroCurrency: Int? = nil, optimizationGoalMetadata: OptimizationGoalMetadata? = nil, budgetType: BudgetType? = "DAILY", startTime: Int? = nil, endTime: Int? = nil, targetingSpec: TargetingSpec? = nil, lifetimeFrequencyCap: Int? = nil, trackingUrls: TrackingUrls? = nil, autoTargetingEnabled: Bool? = nil, placementGroup: PlacementGroupType? = nil, pacingDeliveryType: PacingDeliveryType? = "STANDARD", campaignId: String, billableEvent: ActionType, bidStrategyType: BidStrategyType? = nil, targetingTemplateIds: [String]? = nil) {
        self.name = name
        self.status = status
        self.budgetInMicroCurrency = budgetInMicroCurrency
        self.bidInMicroCurrency = bidInMicroCurrency
        self.optimizationGoalMetadata = optimizationGoalMetadata
        self.budgetType = budgetType
        self.startTime = startTime
        self.endTime = endTime
        self.targetingSpec = targetingSpec
        self.lifetimeFrequencyCap = lifetimeFrequencyCap
        self.trackingUrls = trackingUrls
        self.autoTargetingEnabled = autoTargetingEnabled
        self.placementGroup = placementGroup
        self.pacingDeliveryType = pacingDeliveryType
        self.campaignId = campaignId
        self.billableEvent = billableEvent
        self.bidStrategyType = bidStrategyType
        self.targetingTemplateIds = targetingTemplateIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case status
        case budgetInMicroCurrency = "budget_in_micro_currency"
        case bidInMicroCurrency = "bid_in_micro_currency"
        case optimizationGoalMetadata = "optimization_goal_metadata"
        case budgetType = "budget_type"
        case startTime = "start_time"
        case endTime = "end_time"
        case targetingSpec = "targeting_spec"
        case lifetimeFrequencyCap = "lifetime_frequency_cap"
        case trackingUrls = "tracking_urls"
        case autoTargetingEnabled = "auto_targeting_enabled"
        case placementGroup = "placement_group"
        case pacingDeliveryType = "pacing_delivery_type"
        case campaignId = "campaign_id"
        case billableEvent = "billable_event"
        case bidStrategyType = "bid_strategy_type"
        case targetingTemplateIds = "targeting_template_ids"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(budgetInMicroCurrency, forKey: .budgetInMicroCurrency)
        try container.encodeIfPresent(bidInMicroCurrency, forKey: .bidInMicroCurrency)
        try container.encodeIfPresent(optimizationGoalMetadata, forKey: .optimizationGoalMetadata)
        try container.encodeIfPresent(budgetType, forKey: .budgetType)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(targetingSpec, forKey: .targetingSpec)
        try container.encodeIfPresent(lifetimeFrequencyCap, forKey: .lifetimeFrequencyCap)
        try container.encodeIfPresent(trackingUrls, forKey: .trackingUrls)
        try container.encodeIfPresent(autoTargetingEnabled, forKey: .autoTargetingEnabled)
        try container.encodeIfPresent(placementGroup, forKey: .placementGroup)
        try container.encodeIfPresent(pacingDeliveryType, forKey: .pacingDeliveryType)
        try container.encode(campaignId, forKey: .campaignId)
        try container.encode(billableEvent, forKey: .billableEvent)
        try container.encodeIfPresent(bidStrategyType, forKey: .bidStrategyType)
        try container.encodeIfPresent(targetingTemplateIds, forKey: .targetingTemplateIds)
    }
}

