//
// CreateMembershipOrPartnershipInvitesBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Body to be used on path to send Members or Partners Invite or Request */
public struct CreateMembershipOrPartnershipInvitesBody: Codable, JSONEncodable, Hashable {

    public enum BusinessRole: String, Codable, CaseIterable {
        case employee = "EMPLOYEE"
        case bizAdmin = "BIZ_ADMIN"
        case partner = "PARTNER"
    }
    static let membersRule = ArrayRule(minItems: 1, maxItems: 50, uniqueItems: false)
    static let partnersRule = ArrayRule(minItems: 1, maxItems: 50, uniqueItems: false)
    /** The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you. */
    public var businessRole: BusinessRole
    public var inviteType: InviteType
    /** A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE */
    public var members: [String]?
    /** A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST */
    public var partners: [String]?

    public init(businessRole: BusinessRole, inviteType: InviteType, members: [String]? = nil, partners: [String]? = nil) {
        self.businessRole = businessRole
        self.inviteType = inviteType
        self.members = members
        self.partners = partners
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case businessRole = "business_role"
        case inviteType = "invite_type"
        case members
        case partners
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(businessRole, forKey: .businessRole)
        try container.encode(inviteType, forKey: .inviteType)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(partners, forKey: .partners)
    }
}

