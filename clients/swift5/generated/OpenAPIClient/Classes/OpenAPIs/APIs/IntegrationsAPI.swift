//
// IntegrationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IntegrationsAPI {

    /**
     Delete commerce integration
     
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsCommerceDel(externalBusinessId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsCommerceDelWithRequestBuilder(externalBusinessId: externalBusinessId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete commerce integration
     - DELETE /integrations/commerce/{external_business_id}
     - Delete commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - returns: RequestBuilder<Void> 
     */
    open class func integrationsCommerceDelWithRequestBuilder(externalBusinessId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/integrations/commerce/{external_business_id}"
        let externalBusinessIdPreEscape = "\(APIHelper.mapValueToPathItem(externalBusinessId))"
        let externalBusinessIdPostEscape = externalBusinessIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{external_business_id}", with: externalBusinessIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get commerce integration
     
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsCommerceGet(externalBusinessId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationMetadata?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsCommerceGetWithRequestBuilder(externalBusinessId: externalBusinessId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get commerce integration
     - GET /integrations/commerce/{external_business_id}
     - Get commerce integration metadata associated with the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - returns: RequestBuilder<IntegrationMetadata> 
     */
    open class func integrationsCommerceGetWithRequestBuilder(externalBusinessId: String) -> RequestBuilder<IntegrationMetadata> {
        var localVariablePath = "/integrations/commerce/{external_business_id}"
        let externalBusinessIdPreEscape = "\(APIHelper.mapValueToPathItem(externalBusinessId))"
        let externalBusinessIdPostEscape = externalBusinessIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{external_business_id}", with: externalBusinessIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update commerce integration
     
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - parameter integrationRequestPatch: (body) Parameters to get create/update the Integration Metadata (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsCommercePatch(externalBusinessId: String, integrationRequestPatch: IntegrationRequestPatch? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationMetadata?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsCommercePatchWithRequestBuilder(externalBusinessId: externalBusinessId, integrationRequestPatch: integrationRequestPatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update commerce integration
     - PATCH /integrations/commerce/{external_business_id}
     - Update commerce integration metadata for the given external business ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter externalBusinessId: (path) External business ID for the integration. 
     - parameter integrationRequestPatch: (body) Parameters to get create/update the Integration Metadata (optional)
     - returns: RequestBuilder<IntegrationMetadata> 
     */
    open class func integrationsCommercePatchWithRequestBuilder(externalBusinessId: String, integrationRequestPatch: IntegrationRequestPatch? = nil) -> RequestBuilder<IntegrationMetadata> {
        var localVariablePath = "/integrations/commerce/{external_business_id}"
        let externalBusinessIdPreEscape = "\(APIHelper.mapValueToPathItem(externalBusinessId))"
        let externalBusinessIdPostEscape = externalBusinessIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{external_business_id}", with: externalBusinessIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: integrationRequestPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create commerce integration
     
     - parameter integrationRequest: (body) Parameters to get create/update the Integration Metadata (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsCommercePost(integrationRequest: IntegrationRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationMetadata?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsCommercePostWithRequestBuilder(integrationRequest: integrationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create commerce integration
     - POST /integrations/commerce
     - Create commerce integration metadata to link an external business ID with a Pinterest merchant & ad account. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter integrationRequest: (body) Parameters to get create/update the Integration Metadata (optional)
     - returns: RequestBuilder<IntegrationMetadata> 
     */
    open class func integrationsCommercePostWithRequestBuilder(integrationRequest: IntegrationRequest? = nil) -> RequestBuilder<IntegrationMetadata> {
        let localVariablePath = "/integrations/commerce"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: integrationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get integration metadata
     
     - parameter id: (path) Integration ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsGetById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationRecord?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsGetByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get integration metadata
     - GET /integrations/{id}
     - Get integration metadata by ID. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter id: (path) Integration ID. 
     - returns: RequestBuilder<IntegrationRecord> 
     */
    open class func integrationsGetByIdWithRequestBuilder(id: String) -> RequestBuilder<IntegrationRecord> {
        var localVariablePath = "/integrations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationRecord>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get integration metadata list
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsGetList(bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationsGetList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsGetListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get integration metadata list
     - GET /integrations
     - Get integration metadata list. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<IntegrationsGetList200Response> 
     */
    open class func integrationsGetListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<IntegrationsGetList200Response> {
        let localVariablePath = "/integrations"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationsGetList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Receives batched logs from integration applications.
     
     - parameter integrationLogsRequest: (body) Ingest log information from external integration application. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func integrationsLogsPost(integrationLogsRequest: IntegrationLogsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegrationLogsSuccessResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return integrationsLogsPostWithRequestBuilder(integrationLogsRequest: integrationLogsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Receives batched logs from integration applications.
     - POST /integrations/logs
     - This endpoint receives batched logs from integration applications on partner platforms. Note: If you're interested in joining the beta, please reach out to your Pinterest account manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter integrationLogsRequest: (body) Ingest log information from external integration application. 
     - returns: RequestBuilder<IntegrationLogsSuccessResponse> 
     */
    open class func integrationsLogsPostWithRequestBuilder(integrationLogsRequest: IntegrationLogsRequest) -> RequestBuilder<IntegrationLogsSuccessResponse> {
        let localVariablePath = "/integrations/logs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: integrationLogsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegrationLogsSuccessResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
