//
// AudiencesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AudiencesAPI {

    /**
     Create audience
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceCreateRequest: (body) List of ads to create, size limit [1, 30] 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func audiencesCreate(adAccountId: String, audienceCreateRequest: AudienceCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Audience?, _ error: Error?) -> Void)) -> RequestTask {
        return audiencesCreateWithRequestBuilder(adAccountId: adAccountId, audienceCreateRequest: audienceCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create audience
     - POST /ad_accounts/{ad_account_id}/audiences
     - Create an audience you can use in targeting for specific ad groups. Targeting combines customer information with the ways users interact with Pinterest to help you reach specific groups of users; you can include or exclude specific audience_ids when you create an ad group. <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceCreateRequest: (body) List of ads to create, size limit [1, 30] 
     - returns: RequestBuilder<Audience> 
     */
    open class func audiencesCreateWithRequestBuilder(adAccountId: String, audienceCreateRequest: AudienceCreateRequest) -> RequestBuilder<Audience> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/audiences"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: audienceCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Audience>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create custom audience
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceCreateCustomRequest: (body) Custom audience to create. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func audiencesCreateCustom(adAccountId: String, audienceCreateCustomRequest: AudienceCreateCustomRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Audience?, _ error: Error?) -> Void)) -> RequestTask {
        return audiencesCreateCustomWithRequestBuilder(adAccountId: adAccountId, audienceCreateCustomRequest: audienceCreateCustomRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create custom audience
     - POST /ad_accounts/{ad_account_id}/audiences/custom
     - Create a custom audience and find the audiences you want your ads to reach.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceCreateCustomRequest: (body) Custom audience to create. 
     - returns: RequestBuilder<Audience> 
     */
    open class func audiencesCreateCustomWithRequestBuilder(adAccountId: String, audienceCreateCustomRequest: AudienceCreateCustomRequest) -> RequestBuilder<Audience> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/audiences/custom"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: audienceCreateCustomRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Audience>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get audience
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceId: (path) Unique identifier of an audience 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func audiencesGet(adAccountId: String, audienceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Audience?, _ error: Error?) -> Void)) -> RequestTask {
        return audiencesGetWithRequestBuilder(adAccountId: adAccountId, audienceId: audienceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get audience
     - GET /ad_accounts/{ad_account_id}/audiences/{audience_id}
     - Get a specific audience given the audience ID.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceId: (path) Unique identifier of an audience 
     - returns: RequestBuilder<Audience> 
     */
    open class func audiencesGetWithRequestBuilder(adAccountId: String, audienceId: String) -> RequestBuilder<Audience> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/audiences/{audience_id}"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let audienceIdPreEscape = "\(APIHelper.mapValueToPathItem(audienceId))"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{audience_id}", with: audienceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Audience>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_audiencesList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     * enum for parameter ownershipType
     */
    public enum OwnershipType_audiencesList: String, CaseIterable {
        case owned = "OWNED"
        case received = "RECEIVED"
    }

    /**
     List audiences
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter ownershipType: (query) Filter audiences by ownership type. (optional, default to .owned)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func audiencesList(adAccountId: String, bookmark: String? = nil, order: Order_audiencesList? = nil, pageSize: Int? = nil, ownershipType: OwnershipType_audiencesList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AudiencesList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return audiencesListWithRequestBuilder(adAccountId: adAccountId, bookmark: bookmark, order: order, pageSize: pageSize, ownershipType: ownershipType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List audiences
     - GET /ad_accounts/{ad_account_id}/audiences
     - Get list of audiences for the ad account.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. For received audiences, it is sorted by sharing event time. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter ownershipType: (query) Filter audiences by ownership type. (optional, default to .owned)
     - returns: RequestBuilder<AudiencesList200Response> 
     */
    open class func audiencesListWithRequestBuilder(adAccountId: String, bookmark: String? = nil, order: Order_audiencesList? = nil, pageSize: Int? = nil, ownershipType: OwnershipType_audiencesList? = nil) -> RequestBuilder<AudiencesList200Response> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/audiences"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "ownership_type": (wrappedValue: ownershipType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AudiencesList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update audience
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceId: (path) Unique identifier of an audience 
     - parameter audienceUpdateRequest: (body) The audience to be updated. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func audiencesUpdate(adAccountId: String, audienceId: String, audienceUpdateRequest: AudienceUpdateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Audience?, _ error: Error?) -> Void)) -> RequestTask {
        return audiencesUpdateWithRequestBuilder(adAccountId: adAccountId, audienceId: audienceId, audienceUpdateRequest: audienceUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update audience
     - PATCH /ad_accounts/{ad_account_id}/audiences/{audience_id}
     - Update (edit or remove) an existing targeting audience.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter audienceId: (path) Unique identifier of an audience 
     - parameter audienceUpdateRequest: (body) The audience to be updated. (optional)
     - returns: RequestBuilder<Audience> 
     */
    open class func audiencesUpdateWithRequestBuilder(adAccountId: String, audienceId: String, audienceUpdateRequest: AudienceUpdateRequest? = nil) -> RequestBuilder<Audience> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/audiences/{audience_id}"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let audienceIdPreEscape = "\(APIHelper.mapValueToPathItem(audienceId))"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{audience_id}", with: audienceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: audienceUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Audience>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
