//
// AdsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdsAPI {

    /**
     Create ad preview with pin or image
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adPreviewRequest: (body) Create ad preview with pin or image. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adPreviewsCreate(adAccountId: String, adPreviewRequest: AdPreviewRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdPreviewURLResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adPreviewsCreateWithRequestBuilder(adAccountId: adAccountId, adPreviewRequest: adPreviewRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create ad preview with pin or image
     - POST /ad_accounts/{ad_account_id}/ad_previews
     - Create an ad preview given an ad account ID and either an existing organic pin ID or the URL for an image to be used to create the Pin and the ad. <p/> If you are creating a preview from an existing Pin, that Pin must be promotable: that is, it must have a clickthrough link and meet other requirements. (See <a href=\"https://help.pinterest.com/en/business/article/promoted-pins-overview\" target=\"_blank\">Ads Overview</a>.) <p/> You can view the returned preview URL on a webpage or iframe for 7 days, after which the URL expires. Collection ads are not currently supported ad preview.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adPreviewRequest: (body) Create ad preview with pin or image. 
     - returns: RequestBuilder<AdPreviewURLResponse> 
     */
    open class func adPreviewsCreateWithRequestBuilder(adAccountId: String, adPreviewRequest: AdPreviewRequest) -> RequestBuilder<AdPreviewURLResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ad_previews"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adPreviewRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdPreviewURLResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_adTargetingAnalyticsGet: String, CaseIterable {
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case paidImpression = "PAID_IMPRESSION"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ctr = "CTR"
        case ectr = "ECTR"
        case campaignName = "CAMPAIGN_NAME"
        case pinId = "PIN_ID"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case engagementRate = "ENGAGEMENT_RATE"
        case eengagementRate = "EENGAGEMENT_RATE"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case repinRate = "REPIN_RATE"
        case ctr2 = "CTR_2"
        case campaignId = "CAMPAIGN_ID"
        case advertiserId = "ADVERTISER_ID"
        case adAccountId = "AD_ACCOUNT_ID"
        case pinPromotionId = "PIN_PROMOTION_ID"
        case adId = "AD_ID"
        case adGroupId = "AD_GROUP_ID"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignObjectiveType = "CAMPAIGN_OBJECTIVE_TYPE"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case orderLineId = "ORDER_LINE_ID"
        case orderLineName = "ORDER_LINE_NAME"
        case clickthrough1 = "CLICKTHROUGH_1"
        case repin1 = "REPIN_1"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case clickthrough2 = "CLICKTHROUGH_2"
        case repin2 = "REPIN_2"
        case impression2 = "IMPRESSION_2"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalImpression = "TOTAL_IMPRESSION"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case costPerOutboundClickInDollar = "COST_PER_OUTBOUND_CLICK_IN_DOLLAR"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickAddToCart = "TOTAL_CLICK_ADD_TO_CART"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewAddToCart = "TOTAL_VIEW_ADD_TO_CART"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebSessions = "TOTAL_WEB_SESSIONS"
        case webSessions1 = "WEB_SESSIONS_1"
        case webSessions2 = "WEB_SESSIONS_2"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalSignup = "TOTAL_SIGNUP"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCustom = "TOTAL_CUSTOM"
        case totalLead = "TOTAL_LEAD"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalCustomValueInMicroDollar = "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case checkoutRoas = "CHECKOUT_ROAS"
        case customRoas = "CUSTOM_ROAS"
        case videoMrcViews1 = "VIDEO_MRC_VIEWS_1"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case paidVideoViewableRate = "PAID_VIDEO_VIEWABLE_RATE"
        case videoLength = "VIDEO_LENGTH"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case totalOfflineCheckout = "TOTAL_OFFLINE_CHECKOUT"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case leads = "LEADS"
        case costPerLead = "COST_PER_LEAD"
        case quizCompleted = "QUIZ_COMPLETED"
        case quizPinResultOpen = "QUIZ_PIN_RESULT_OPEN"
        case quizCompletionRate = "QUIZ_COMPLETION_RATE"
        case showcasePinClickthrough = "SHOWCASE_PIN_CLICKTHROUGH"
        case showcaseSubpageClickthrough = "SHOWCASE_SUBPAGE_CLICKTHROUGH"
        case showcaseSubpinClickthrough = "SHOWCASE_SUBPIN_CLICKTHROUGH"
        case showcaseSubpageImpression = "SHOWCASE_SUBPAGE_IMPRESSION"
        case showcaseSubpinImpression = "SHOWCASE_SUBPIN_IMPRESSION"
        case showcaseSubpageSwipeLeft = "SHOWCASE_SUBPAGE_SWIPE_LEFT"
        case showcaseSubpageSwipeRight = "SHOWCASE_SUBPAGE_SWIPE_RIGHT"
        case showcaseSubpinSwipeLeft = "SHOWCASE_SUBPIN_SWIPE_LEFT"
        case showcaseSubpinSwipeRight = "SHOWCASE_SUBPIN_SWIPE_RIGHT"
        case showcaseSubpageRepin = "SHOWCASE_SUBPAGE_REPIN"
        case showcaseSubpinRepin = "SHOWCASE_SUBPIN_REPIN"
        case showcaseSubpageCloseup = "SHOWCASE_SUBPAGE_CLOSEUP"
        case showcaseCardThumbnailSwipeForward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD"
        case showcaseCardThumbnailSwipeBackward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD"
        case showcaseAverageSubpageCloseupPerSession = "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION"
        case totalCheckoutConversionRate = "TOTAL_CHECKOUT_CONVERSION_RATE"
        case totalViewCategoryConversionRate = "TOTAL_VIEW_CATEGORY_CONVERSION_RATE"
        case totalAddToCartConversionRate = "TOTAL_ADD_TO_CART_CONVERSION_RATE"
        case totalSignupConversionRate = "TOTAL_SIGNUP_CONVERSION_RATE"
        case totalPageVisitConversionRate = "TOTAL_PAGE_VISIT_CONVERSION_RATE"
        case totalLeadConversionRate = "TOTAL_LEAD_CONVERSION_RATE"
        case totalSearchConversionRate = "TOTAL_SEARCH_CONVERSION_RATE"
        case totalWatchVideoConversionRate = "TOTAL_WATCH_VIDEO_CONVERSION_RATE"
        case totalUnknownConversionRate = "TOTAL_UNKNOWN_CONVERSION_RATE"
        case totalCustomConversionRate = "TOTAL_CUSTOM_CONVERSION_RATE"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adTargetingAnalyticsGet: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get targeting analytics for ads
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter targetingTypes: (query) Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter attributionTypes: (query) List of types of attribution for the conversion report (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adTargetingAnalyticsGet(adAccountId: String, adIds: [String], startDate: Date, endDate: Date, targetingTypes: [AdsAnalyticsAdTargetingType], columns: [Columns_adTargetingAnalyticsGet], granularity: Granularity, clickWindowDays: ClickWindowDays_adTargetingAnalyticsGet? = nil, engagementWindowDays: EngagementWindowDays_adTargetingAnalyticsGet? = nil, viewWindowDays: ViewWindowDays_adTargetingAnalyticsGet? = nil, conversionReportTime: ConversionReportTime_adTargetingAnalyticsGet? = nil, attributionTypes: ConversionReportAttributionType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MetricsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adTargetingAnalyticsGetWithRequestBuilder(adAccountId: adAccountId, adIds: adIds, startDate: startDate, endDate: endDate, targetingTypes: targetingTypes, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime, attributionTypes: attributionTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get targeting analytics for ads
     - GET /ad_accounts/{ad_account_id}/ads/targeting_analytics
     - Get targeting analytics for one or more ads. For the requested ad(s) and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter targetingTypes: (query) Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter attributionTypes: (query) List of types of attribution for the conversion report (optional)
     - returns: RequestBuilder<MetricsResponse> 
     */
    open class func adTargetingAnalyticsGetWithRequestBuilder(adAccountId: String, adIds: [String], startDate: Date, endDate: Date, targetingTypes: [AdsAnalyticsAdTargetingType], columns: [Columns_adTargetingAnalyticsGet], granularity: Granularity, clickWindowDays: ClickWindowDays_adTargetingAnalyticsGet? = nil, engagementWindowDays: EngagementWindowDays_adTargetingAnalyticsGet? = nil, viewWindowDays: ViewWindowDays_adTargetingAnalyticsGet? = nil, conversionReportTime: ConversionReportTime_adTargetingAnalyticsGet? = nil, attributionTypes: ConversionReportAttributionType? = nil) -> RequestBuilder<MetricsResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads/targeting_analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ad_ids": (wrappedValue: adIds.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "targeting_types": (wrappedValue: targetingTypes.encodeToJSON(), isExplode: false),
            "columns": (wrappedValue: columns.encodeToJSON(), isExplode: false),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: true),
            "click_window_days": (wrappedValue: clickWindowDays?.encodeToJSON(), isExplode: true),
            "engagement_window_days": (wrappedValue: engagementWindowDays?.encodeToJSON(), isExplode: true),
            "view_window_days": (wrappedValue: viewWindowDays?.encodeToJSON(), isExplode: true),
            "conversion_report_time": (wrappedValue: conversionReportTime?.encodeToJSON(), isExplode: true),
            "attribution_types": (wrappedValue: attributionTypes?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MetricsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_adsAnalytics: String, CaseIterable {
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case paidImpression = "PAID_IMPRESSION"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ctr = "CTR"
        case ectr = "ECTR"
        case campaignName = "CAMPAIGN_NAME"
        case pinId = "PIN_ID"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case engagementRate = "ENGAGEMENT_RATE"
        case eengagementRate = "EENGAGEMENT_RATE"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case repinRate = "REPIN_RATE"
        case ctr2 = "CTR_2"
        case campaignId = "CAMPAIGN_ID"
        case advertiserId = "ADVERTISER_ID"
        case adAccountId = "AD_ACCOUNT_ID"
        case pinPromotionId = "PIN_PROMOTION_ID"
        case adId = "AD_ID"
        case adGroupId = "AD_GROUP_ID"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignObjectiveType = "CAMPAIGN_OBJECTIVE_TYPE"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case orderLineId = "ORDER_LINE_ID"
        case orderLineName = "ORDER_LINE_NAME"
        case clickthrough1 = "CLICKTHROUGH_1"
        case repin1 = "REPIN_1"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case clickthrough2 = "CLICKTHROUGH_2"
        case repin2 = "REPIN_2"
        case impression2 = "IMPRESSION_2"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalImpression = "TOTAL_IMPRESSION"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case costPerOutboundClickInDollar = "COST_PER_OUTBOUND_CLICK_IN_DOLLAR"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickAddToCart = "TOTAL_CLICK_ADD_TO_CART"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewAddToCart = "TOTAL_VIEW_ADD_TO_CART"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebSessions = "TOTAL_WEB_SESSIONS"
        case webSessions1 = "WEB_SESSIONS_1"
        case webSessions2 = "WEB_SESSIONS_2"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalSignup = "TOTAL_SIGNUP"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCustom = "TOTAL_CUSTOM"
        case totalLead = "TOTAL_LEAD"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalCustomValueInMicroDollar = "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case checkoutRoas = "CHECKOUT_ROAS"
        case customRoas = "CUSTOM_ROAS"
        case videoMrcViews1 = "VIDEO_MRC_VIEWS_1"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case paidVideoViewableRate = "PAID_VIDEO_VIEWABLE_RATE"
        case videoLength = "VIDEO_LENGTH"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case totalOfflineCheckout = "TOTAL_OFFLINE_CHECKOUT"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case leads = "LEADS"
        case costPerLead = "COST_PER_LEAD"
        case quizCompleted = "QUIZ_COMPLETED"
        case quizPinResultOpen = "QUIZ_PIN_RESULT_OPEN"
        case quizCompletionRate = "QUIZ_COMPLETION_RATE"
        case showcasePinClickthrough = "SHOWCASE_PIN_CLICKTHROUGH"
        case showcaseSubpageClickthrough = "SHOWCASE_SUBPAGE_CLICKTHROUGH"
        case showcaseSubpinClickthrough = "SHOWCASE_SUBPIN_CLICKTHROUGH"
        case showcaseSubpageImpression = "SHOWCASE_SUBPAGE_IMPRESSION"
        case showcaseSubpinImpression = "SHOWCASE_SUBPIN_IMPRESSION"
        case showcaseSubpageSwipeLeft = "SHOWCASE_SUBPAGE_SWIPE_LEFT"
        case showcaseSubpageSwipeRight = "SHOWCASE_SUBPAGE_SWIPE_RIGHT"
        case showcaseSubpinSwipeLeft = "SHOWCASE_SUBPIN_SWIPE_LEFT"
        case showcaseSubpinSwipeRight = "SHOWCASE_SUBPIN_SWIPE_RIGHT"
        case showcaseSubpageRepin = "SHOWCASE_SUBPAGE_REPIN"
        case showcaseSubpinRepin = "SHOWCASE_SUBPIN_REPIN"
        case showcaseSubpageCloseup = "SHOWCASE_SUBPAGE_CLOSEUP"
        case showcaseCardThumbnailSwipeForward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD"
        case showcaseCardThumbnailSwipeBackward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD"
        case showcaseAverageSubpageCloseupPerSession = "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION"
        case totalCheckoutConversionRate = "TOTAL_CHECKOUT_CONVERSION_RATE"
        case totalViewCategoryConversionRate = "TOTAL_VIEW_CATEGORY_CONVERSION_RATE"
        case totalAddToCartConversionRate = "TOTAL_ADD_TO_CART_CONVERSION_RATE"
        case totalSignupConversionRate = "TOTAL_SIGNUP_CONVERSION_RATE"
        case totalPageVisitConversionRate = "TOTAL_PAGE_VISIT_CONVERSION_RATE"
        case totalLeadConversionRate = "TOTAL_LEAD_CONVERSION_RATE"
        case totalSearchConversionRate = "TOTAL_SEARCH_CONVERSION_RATE"
        case totalWatchVideoConversionRate = "TOTAL_WATCH_VIDEO_CONVERSION_RATE"
        case totalUnknownConversionRate = "TOTAL_UNKNOWN_CONVERSION_RATE"
        case totalCustomConversionRate = "TOTAL_CUSTOM_CONVERSION_RATE"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adsAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adsAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adsAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adsAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get ad analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter pinIds: (query) List of Pin IDs. (optional)
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsAnalytics(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adsAnalytics], granularity: Granularity, adIds: [String]? = nil, clickWindowDays: ClickWindowDays_adsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adsAnalytics? = nil, viewWindowDays: ViewWindowDays_adsAnalytics? = nil, conversionReportTime: ConversionReportTime_adsAnalytics? = nil, pinIds: [String]? = nil, campaignIds: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AdsAnalyticsResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return adsAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, columns: columns, granularity: granularity, adIds: adIds, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime, pinIds: pinIds, campaignIds: campaignIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad analytics
     - GET /ad_accounts/{ad_account_id}/ads/analytics
     - Get analytics for the specified ads in the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - The request must contain either ad_ids or both campaign_ids and pin_ids. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter pinIds: (query) List of Pin IDs. (optional)
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - returns: RequestBuilder<[AdsAnalyticsResponseInner]> 
     */
    open class func adsAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adsAnalytics], granularity: Granularity, adIds: [String]? = nil, clickWindowDays: ClickWindowDays_adsAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adsAnalytics? = nil, viewWindowDays: ViewWindowDays_adsAnalytics? = nil, conversionReportTime: ConversionReportTime_adsAnalytics? = nil, pinIds: [String]? = nil, campaignIds: [String]? = nil) -> RequestBuilder<[AdsAnalyticsResponseInner]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "ad_ids": (wrappedValue: adIds?.encodeToJSON(), isExplode: true),
            "columns": (wrappedValue: columns.encodeToJSON(), isExplode: false),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: true),
            "click_window_days": (wrappedValue: clickWindowDays?.encodeToJSON(), isExplode: true),
            "engagement_window_days": (wrappedValue: engagementWindowDays?.encodeToJSON(), isExplode: true),
            "view_window_days": (wrappedValue: viewWindowDays?.encodeToJSON(), isExplode: true),
            "conversion_report_time": (wrappedValue: conversionReportTime?.encodeToJSON(), isExplode: true),
            "pin_ids": (wrappedValue: pinIds?.encodeToJSON(), isExplode: true),
            "campaign_ids": (wrappedValue: campaignIds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AdsAnalyticsResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create ads
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adCreateRequest: (body) List of ads to create, size limit [1, 30]. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsCreate(adAccountId: String, adCreateRequest: [AdCreateRequest], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdArrayResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adsCreateWithRequestBuilder(adAccountId: adAccountId, adCreateRequest: adCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create ads
     - POST /ad_accounts/{ad_account_id}/ads
     - Create multiple new ads. Request must contain ad_group_id, creative_type, and the source Pin pin_id.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adCreateRequest: (body) List of ads to create, size limit [1, 30]. 
     - returns: RequestBuilder<AdArrayResponse> 
     */
    open class func adsCreateWithRequestBuilder(adAccountId: String, adCreateRequest: [AdCreateRequest]) -> RequestBuilder<AdArrayResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdArrayResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get ad
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adId: (path) Unique identifier of an ad. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsGet(adAccountId: String, adId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adsGetWithRequestBuilder(adAccountId: adAccountId, adId: adId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad
     - GET /ad_accounts/{ad_account_id}/ads/{ad_id}
     - Get a specific ad given the ad ID. If your pin is rejected, rejected_reasons will contain additional information from the Ad Review process. For more information about our policies and rejection reasons see the <a href=\"https://www.pinterest.com/_/_/policy/advertising-guidelines/\" target=\"_blank\">Pinterest advertising standards</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adId: (path) Unique identifier of an ad. 
     - returns: RequestBuilder<AdResponse> 
     */
    open class func adsGetWithRequestBuilder(adAccountId: String, adId: String) -> RequestBuilder<AdResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads/{ad_id}"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let adIdPreEscape = "\(APIHelper.mapValueToPathItem(adId))"
        let adIdPostEscape = adIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_id}", with: adIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter entityStatuses
     */
    public enum EntityStatuses_adsList: String, CaseIterable {
        case active = "ACTIVE"
        case paused = "PAUSED"
        case archived = "ARCHIVED"
        case draft = "DRAFT"
        case deletedDraft = "DELETED_DRAFT"
    }

    /**
     * enum for parameter order
     */
    public enum Order_adsList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     List ads
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsList(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, adIds: [String]? = nil, entityStatuses: [EntityStatuses_adsList]? = nil, pageSize: Int? = nil, order: Order_adsList? = nil, bookmark: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adsListWithRequestBuilder(adAccountId: adAccountId, campaignIds: campaignIds, adGroupIds: adGroupIds, adIds: adIds, entityStatuses: entityStatuses, pageSize: pageSize, order: order, bookmark: bookmark).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List ads
     - GET /ad_accounts/{ad_account_id}/ads
     - List ads that meet the filters provided:   - Listed campaign ids or ad group ids or ad ids   - Listed entity statuses <p/> If no filter is provided, all ads in the ad account are returned. <p/> <strong>Note:</strong><p/> Provide only campaign_id or ad_group_id or ad_id. Do not provide more than one type. <p/> Review status is provided for each ad; if review_status is REJECTED, the rejected_reasons field will contain additional information. For more, see <a href=\"https://policy.pinterest.com/en/advertising-guidelines\">Pinterest advertising standards</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter campaignIds: (query) List of Campaign Ids to use to filter the results. (optional)
     - parameter adGroupIds: (query) List of Ad group Ids to use to filter the results. (optional)
     - parameter adIds: (query) List of Ad Ids to use to filter the results. (optional)
     - parameter entityStatuses: (query) Entity status (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - returns: RequestBuilder<AdsList200Response> 
     */
    open class func adsListWithRequestBuilder(adAccountId: String, campaignIds: [String]? = nil, adGroupIds: [String]? = nil, adIds: [String]? = nil, entityStatuses: [EntityStatuses_adsList]? = nil, pageSize: Int? = nil, order: Order_adsList? = nil, bookmark: String? = nil) -> RequestBuilder<AdsList200Response> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "campaign_ids": (wrappedValue: campaignIds?.encodeToJSON(), isExplode: true),
            "ad_group_ids": (wrappedValue: adGroupIds?.encodeToJSON(), isExplode: true),
            "ad_ids": (wrappedValue: adIds?.encodeToJSON(), isExplode: true),
            "entity_statuses": (wrappedValue: entityStatuses?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update ads
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adUpdateRequest: (body) List of ads to update, size limit [1, 30] 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adsUpdate(adAccountId: String, adUpdateRequest: [AdUpdateRequest], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdArrayResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adsUpdateWithRequestBuilder(adAccountId: adAccountId, adUpdateRequest: adUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update ads
     - PATCH /ad_accounts/{ad_account_id}/ads
     - Update multiple existing ads
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adUpdateRequest: (body) List of ads to update, size limit [1, 30] 
     - returns: RequestBuilder<AdArrayResponse> 
     */
    open class func adsUpdateWithRequestBuilder(adAccountId: String, adUpdateRequest: [AdUpdateRequest]) -> RequestBuilder<AdArrayResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/ads"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdArrayResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
