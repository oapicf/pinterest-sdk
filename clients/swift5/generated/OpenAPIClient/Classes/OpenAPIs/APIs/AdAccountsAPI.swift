//
// AdAccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdAccountsAPI {

    /**
     * enum for parameter columns
     */
    public enum Columns_adAccountAnalytics: String, CaseIterable {
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case paidImpression = "PAID_IMPRESSION"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ctr = "CTR"
        case ectr = "ECTR"
        case campaignName = "CAMPAIGN_NAME"
        case pinId = "PIN_ID"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case engagementRate = "ENGAGEMENT_RATE"
        case eengagementRate = "EENGAGEMENT_RATE"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case repinRate = "REPIN_RATE"
        case ctr2 = "CTR_2"
        case campaignId = "CAMPAIGN_ID"
        case advertiserId = "ADVERTISER_ID"
        case adAccountId = "AD_ACCOUNT_ID"
        case pinPromotionId = "PIN_PROMOTION_ID"
        case adId = "AD_ID"
        case adGroupId = "AD_GROUP_ID"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignObjectiveType = "CAMPAIGN_OBJECTIVE_TYPE"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case orderLineId = "ORDER_LINE_ID"
        case orderLineName = "ORDER_LINE_NAME"
        case clickthrough1 = "CLICKTHROUGH_1"
        case repin1 = "REPIN_1"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case clickthrough2 = "CLICKTHROUGH_2"
        case repin2 = "REPIN_2"
        case impression2 = "IMPRESSION_2"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalImpression = "TOTAL_IMPRESSION"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case costPerOutboundClickInDollar = "COST_PER_OUTBOUND_CLICK_IN_DOLLAR"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickAddToCart = "TOTAL_CLICK_ADD_TO_CART"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewAddToCart = "TOTAL_VIEW_ADD_TO_CART"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebSessions = "TOTAL_WEB_SESSIONS"
        case webSessions1 = "WEB_SESSIONS_1"
        case webSessions2 = "WEB_SESSIONS_2"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalSignup = "TOTAL_SIGNUP"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCustom = "TOTAL_CUSTOM"
        case totalLead = "TOTAL_LEAD"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalCustomValueInMicroDollar = "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case checkoutRoas = "CHECKOUT_ROAS"
        case customRoas = "CUSTOM_ROAS"
        case videoMrcViews1 = "VIDEO_MRC_VIEWS_1"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case paidVideoViewableRate = "PAID_VIDEO_VIEWABLE_RATE"
        case videoLength = "VIDEO_LENGTH"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case totalOfflineCheckout = "TOTAL_OFFLINE_CHECKOUT"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case leads = "LEADS"
        case costPerLead = "COST_PER_LEAD"
        case quizCompleted = "QUIZ_COMPLETED"
        case quizPinResultOpen = "QUIZ_PIN_RESULT_OPEN"
        case quizCompletionRate = "QUIZ_COMPLETION_RATE"
        case showcasePinClickthrough = "SHOWCASE_PIN_CLICKTHROUGH"
        case showcaseSubpageClickthrough = "SHOWCASE_SUBPAGE_CLICKTHROUGH"
        case showcaseSubpinClickthrough = "SHOWCASE_SUBPIN_CLICKTHROUGH"
        case showcaseSubpageImpression = "SHOWCASE_SUBPAGE_IMPRESSION"
        case showcaseSubpinImpression = "SHOWCASE_SUBPIN_IMPRESSION"
        case showcaseSubpageSwipeLeft = "SHOWCASE_SUBPAGE_SWIPE_LEFT"
        case showcaseSubpageSwipeRight = "SHOWCASE_SUBPAGE_SWIPE_RIGHT"
        case showcaseSubpinSwipeLeft = "SHOWCASE_SUBPIN_SWIPE_LEFT"
        case showcaseSubpinSwipeRight = "SHOWCASE_SUBPIN_SWIPE_RIGHT"
        case showcaseSubpageRepin = "SHOWCASE_SUBPAGE_REPIN"
        case showcaseSubpinRepin = "SHOWCASE_SUBPIN_REPIN"
        case showcaseSubpageCloseup = "SHOWCASE_SUBPAGE_CLOSEUP"
        case showcaseCardThumbnailSwipeForward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD"
        case showcaseCardThumbnailSwipeBackward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD"
        case showcaseAverageSubpageCloseupPerSession = "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION"
        case totalCheckoutConversionRate = "TOTAL_CHECKOUT_CONVERSION_RATE"
        case totalViewCategoryConversionRate = "TOTAL_VIEW_CATEGORY_CONVERSION_RATE"
        case totalAddToCartConversionRate = "TOTAL_ADD_TO_CART_CONVERSION_RATE"
        case totalSignupConversionRate = "TOTAL_SIGNUP_CONVERSION_RATE"
        case totalPageVisitConversionRate = "TOTAL_PAGE_VISIT_CONVERSION_RATE"
        case totalLeadConversionRate = "TOTAL_LEAD_CONVERSION_RATE"
        case totalSearchConversionRate = "TOTAL_SEARCH_CONVERSION_RATE"
        case totalWatchVideoConversionRate = "TOTAL_WATCH_VIDEO_CONVERSION_RATE"
        case totalUnknownConversionRate = "TOTAL_UNKNOWN_CONVERSION_RATE"
        case totalCustomConversionRate = "TOTAL_CUSTOM_CONVERSION_RATE"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adAccountAnalytics: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adAccountAnalytics: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get ad account analytics
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountAnalytics(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adAccountAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adAccountAnalytics? = nil, viewWindowDays: ViewWindowDays_adAccountAnalytics? = nil, conversionReportTime: ConversionReportTime_adAccountAnalytics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AdAccountAnalyticsResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountAnalyticsWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad account analytics
     - GET /ad_accounts/{ad_account_id}/analytics
     - Get analytics for the specified <code>ad_account_id</code>, filtered by the specified options. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - returns: RequestBuilder<[AdAccountAnalyticsResponseInner]> 
     */
    open class func adAccountAnalyticsWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, columns: [Columns_adAccountAnalytics], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountAnalytics? = nil, engagementWindowDays: EngagementWindowDays_adAccountAnalytics? = nil, viewWindowDays: ViewWindowDays_adAccountAnalytics? = nil, conversionReportTime: ConversionReportTime_adAccountAnalytics? = nil) -> RequestBuilder<[AdAccountAnalyticsResponseInner]> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "columns": (wrappedValue: columns.encodeToJSON(), isExplode: false),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: true),
            "click_window_days": (wrappedValue: clickWindowDays?.encodeToJSON(), isExplode: true),
            "engagement_window_days": (wrappedValue: engagementWindowDays?.encodeToJSON(), isExplode: true),
            "view_window_days": (wrappedValue: viewWindowDays?.encodeToJSON(), isExplode: true),
            "conversion_report_time": (wrappedValue: conversionReportTime?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AdAccountAnalyticsResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter columns
     */
    public enum Columns_adAccountTargetingAnalyticsGet: String, CaseIterable {
        case spendInMicroDollar = "SPEND_IN_MICRO_DOLLAR"
        case paidImpression = "PAID_IMPRESSION"
        case spendInDollar = "SPEND_IN_DOLLAR"
        case cpcInMicroDollar = "CPC_IN_MICRO_DOLLAR"
        case ecpcInMicroDollar = "ECPC_IN_MICRO_DOLLAR"
        case ecpcInDollar = "ECPC_IN_DOLLAR"
        case ctr = "CTR"
        case ectr = "ECTR"
        case campaignName = "CAMPAIGN_NAME"
        case pinId = "PIN_ID"
        case totalEngagement = "TOTAL_ENGAGEMENT"
        case engagement1 = "ENGAGEMENT_1"
        case engagement2 = "ENGAGEMENT_2"
        case ecpeInDollar = "ECPE_IN_DOLLAR"
        case engagementRate = "ENGAGEMENT_RATE"
        case eengagementRate = "EENGAGEMENT_RATE"
        case ecpmInMicroDollar = "ECPM_IN_MICRO_DOLLAR"
        case repinRate = "REPIN_RATE"
        case ctr2 = "CTR_2"
        case campaignId = "CAMPAIGN_ID"
        case advertiserId = "ADVERTISER_ID"
        case adAccountId = "AD_ACCOUNT_ID"
        case pinPromotionId = "PIN_PROMOTION_ID"
        case adId = "AD_ID"
        case adGroupId = "AD_GROUP_ID"
        case campaignEntityStatus = "CAMPAIGN_ENTITY_STATUS"
        case campaignObjectiveType = "CAMPAIGN_OBJECTIVE_TYPE"
        case cpmInMicroDollar = "CPM_IN_MICRO_DOLLAR"
        case cpmInDollar = "CPM_IN_DOLLAR"
        case adGroupEntityStatus = "AD_GROUP_ENTITY_STATUS"
        case orderLineId = "ORDER_LINE_ID"
        case orderLineName = "ORDER_LINE_NAME"
        case clickthrough1 = "CLICKTHROUGH_1"
        case repin1 = "REPIN_1"
        case impression1 = "IMPRESSION_1"
        case impression1Gross = "IMPRESSION_1_GROSS"
        case clickthrough1Gross = "CLICKTHROUGH_1_GROSS"
        case outboundClick1 = "OUTBOUND_CLICK_1"
        case clickthrough2 = "CLICKTHROUGH_2"
        case repin2 = "REPIN_2"
        case impression2 = "IMPRESSION_2"
        case outboundClick2 = "OUTBOUND_CLICK_2"
        case totalClickthrough = "TOTAL_CLICKTHROUGH"
        case totalImpression = "TOTAL_IMPRESSION"
        case totalImpressionUser = "TOTAL_IMPRESSION_USER"
        case totalImpressionFrequency = "TOTAL_IMPRESSION_FREQUENCY"
        case costPerOutboundClickInDollar = "COST_PER_OUTBOUND_CLICK_IN_DOLLAR"
        case totalEngagementSignup = "TOTAL_ENGAGEMENT_SIGNUP"
        case totalEngagementCheckout = "TOTAL_ENGAGEMENT_CHECKOUT"
        case totalEngagementLead = "TOTAL_ENGAGEMENT_LEAD"
        case totalClickSignup = "TOTAL_CLICK_SIGNUP"
        case totalClickCheckout = "TOTAL_CLICK_CHECKOUT"
        case totalClickAddToCart = "TOTAL_CLICK_ADD_TO_CART"
        case totalClickLead = "TOTAL_CLICK_LEAD"
        case totalViewSignup = "TOTAL_VIEW_SIGNUP"
        case totalViewCheckout = "TOTAL_VIEW_CHECKOUT"
        case totalViewAddToCart = "TOTAL_VIEW_ADD_TO_CART"
        case totalViewLead = "TOTAL_VIEW_LEAD"
        case totalConversions = "TOTAL_CONVERSIONS"
        case totalEngagementSignupValueInMicroDollar = "TOTAL_ENGAGEMENT_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalEngagementCheckoutValueInMicroDollar = "TOTAL_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalClickSignupValueInMicroDollar = "TOTAL_CLICK_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalClickCheckoutValueInMicroDollar = "TOTAL_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalViewSignupValueInMicroDollar = "TOTAL_VIEW_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalViewCheckoutValueInMicroDollar = "TOTAL_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebSessions = "TOTAL_WEB_SESSIONS"
        case webSessions1 = "WEB_SESSIONS_1"
        case webSessions2 = "WEB_SESSIONS_2"
        case campaignLifetimeSpendCap = "CAMPAIGN_LIFETIME_SPEND_CAP"
        case campaignDailySpendCap = "CAMPAIGN_DAILY_SPEND_CAP"
        case totalPageVisit = "TOTAL_PAGE_VISIT"
        case totalSignup = "TOTAL_SIGNUP"
        case totalCheckout = "TOTAL_CHECKOUT"
        case totalCustom = "TOTAL_CUSTOM"
        case totalLead = "TOTAL_LEAD"
        case totalSignupValueInMicroDollar = "TOTAL_SIGNUP_VALUE_IN_MICRO_DOLLAR"
        case totalCheckoutValueInMicroDollar = "TOTAL_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalCustomValueInMicroDollar = "TOTAL_CUSTOM_VALUE_IN_MICRO_DOLLAR"
        case pageVisitCostPerAction = "PAGE_VISIT_COST_PER_ACTION"
        case pageVisitRoas = "PAGE_VISIT_ROAS"
        case checkoutRoas = "CHECKOUT_ROAS"
        case customRoas = "CUSTOM_ROAS"
        case videoMrcViews1 = "VIDEO_MRC_VIEWS_1"
        case video3secViews2 = "VIDEO_3SEC_VIEWS_2"
        case videoP100Complete2 = "VIDEO_P100_COMPLETE_2"
        case videoP0Combined2 = "VIDEO_P0_COMBINED_2"
        case videoP25Combined2 = "VIDEO_P25_COMBINED_2"
        case videoP50Combined2 = "VIDEO_P50_COMBINED_2"
        case videoP75Combined2 = "VIDEO_P75_COMBINED_2"
        case videoP95Combined2 = "VIDEO_P95_COMBINED_2"
        case videoMrcViews2 = "VIDEO_MRC_VIEWS_2"
        case paidVideoViewableRate = "PAID_VIDEO_VIEWABLE_RATE"
        case videoLength = "VIDEO_LENGTH"
        case ecpvInDollar = "ECPV_IN_DOLLAR"
        case ecpcvInDollar = "ECPCV_IN_DOLLAR"
        case ecpcvP95InDollar = "ECPCV_P95_IN_DOLLAR"
        case totalVideo3secViews = "TOTAL_VIDEO_3SEC_VIEWS"
        case totalVideoP100Complete = "TOTAL_VIDEO_P100_COMPLETE"
        case totalVideoP0Combined = "TOTAL_VIDEO_P0_COMBINED"
        case totalVideoP25Combined = "TOTAL_VIDEO_P25_COMBINED"
        case totalVideoP50Combined = "TOTAL_VIDEO_P50_COMBINED"
        case totalVideoP75Combined = "TOTAL_VIDEO_P75_COMBINED"
        case totalVideoP95Combined = "TOTAL_VIDEO_P95_COMBINED"
        case totalVideoMrcViews = "TOTAL_VIDEO_MRC_VIEWS"
        case totalVideoAvgWatchtimeInSecond = "TOTAL_VIDEO_AVG_WATCHTIME_IN_SECOND"
        case totalRepinRate = "TOTAL_REPIN_RATE"
        case webCheckoutCostPerAction = "WEB_CHECKOUT_COST_PER_ACTION"
        case webCheckoutRoas = "WEB_CHECKOUT_ROAS"
        case totalWebCheckout = "TOTAL_WEB_CHECKOUT"
        case totalWebCheckoutValueInMicroDollar = "TOTAL_WEB_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebClickCheckout = "TOTAL_WEB_CLICK_CHECKOUT"
        case totalWebClickCheckoutValueInMicroDollar = "TOTAL_WEB_CLICK_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebEngagementCheckout = "TOTAL_WEB_ENGAGEMENT_CHECKOUT"
        case totalWebEngagementCheckoutValueInMicroDollar = "TOTAL_WEB_ENGAGEMENT_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case totalWebViewCheckout = "TOTAL_WEB_VIEW_CHECKOUT"
        case totalWebViewCheckoutValueInMicroDollar = "TOTAL_WEB_VIEW_CHECKOUT_VALUE_IN_MICRO_DOLLAR"
        case inappCheckoutCostPerAction = "INAPP_CHECKOUT_COST_PER_ACTION"
        case totalOfflineCheckout = "TOTAL_OFFLINE_CHECKOUT"
        case ideaPinProductTagVisit1 = "IDEA_PIN_PRODUCT_TAG_VISIT_1"
        case ideaPinProductTagVisit2 = "IDEA_PIN_PRODUCT_TAG_VISIT_2"
        case totalIdeaPinProductTagVisit = "TOTAL_IDEA_PIN_PRODUCT_TAG_VISIT"
        case leads = "LEADS"
        case costPerLead = "COST_PER_LEAD"
        case quizCompleted = "QUIZ_COMPLETED"
        case quizPinResultOpen = "QUIZ_PIN_RESULT_OPEN"
        case quizCompletionRate = "QUIZ_COMPLETION_RATE"
        case showcasePinClickthrough = "SHOWCASE_PIN_CLICKTHROUGH"
        case showcaseSubpageClickthrough = "SHOWCASE_SUBPAGE_CLICKTHROUGH"
        case showcaseSubpinClickthrough = "SHOWCASE_SUBPIN_CLICKTHROUGH"
        case showcaseSubpageImpression = "SHOWCASE_SUBPAGE_IMPRESSION"
        case showcaseSubpinImpression = "SHOWCASE_SUBPIN_IMPRESSION"
        case showcaseSubpageSwipeLeft = "SHOWCASE_SUBPAGE_SWIPE_LEFT"
        case showcaseSubpageSwipeRight = "SHOWCASE_SUBPAGE_SWIPE_RIGHT"
        case showcaseSubpinSwipeLeft = "SHOWCASE_SUBPIN_SWIPE_LEFT"
        case showcaseSubpinSwipeRight = "SHOWCASE_SUBPIN_SWIPE_RIGHT"
        case showcaseSubpageRepin = "SHOWCASE_SUBPAGE_REPIN"
        case showcaseSubpinRepin = "SHOWCASE_SUBPIN_REPIN"
        case showcaseSubpageCloseup = "SHOWCASE_SUBPAGE_CLOSEUP"
        case showcaseCardThumbnailSwipeForward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_FORWARD"
        case showcaseCardThumbnailSwipeBackward = "SHOWCASE_CARD_THUMBNAIL_SWIPE_BACKWARD"
        case showcaseAverageSubpageCloseupPerSession = "SHOWCASE_AVERAGE_SUBPAGE_CLOSEUP_PER_SESSION"
        case totalCheckoutConversionRate = "TOTAL_CHECKOUT_CONVERSION_RATE"
        case totalViewCategoryConversionRate = "TOTAL_VIEW_CATEGORY_CONVERSION_RATE"
        case totalAddToCartConversionRate = "TOTAL_ADD_TO_CART_CONVERSION_RATE"
        case totalSignupConversionRate = "TOTAL_SIGNUP_CONVERSION_RATE"
        case totalPageVisitConversionRate = "TOTAL_PAGE_VISIT_CONVERSION_RATE"
        case totalLeadConversionRate = "TOTAL_LEAD_CONVERSION_RATE"
        case totalSearchConversionRate = "TOTAL_SEARCH_CONVERSION_RATE"
        case totalWatchVideoConversionRate = "TOTAL_WATCH_VIDEO_CONVERSION_RATE"
        case totalUnknownConversionRate = "TOTAL_UNKNOWN_CONVERSION_RATE"
        case totalCustomConversionRate = "TOTAL_CUSTOM_CONVERSION_RATE"
    }

    /**
     * enum for parameter clickWindowDays
     */
    public enum ClickWindowDays_adAccountTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter engagementWindowDays
     */
    public enum EngagementWindowDays_adAccountTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter viewWindowDays
     */
    public enum ViewWindowDays_adAccountTargetingAnalyticsGet: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _7 = 7
        case _14 = 14
        case _30 = 30
        case _60 = 60
    }

    /**
     * enum for parameter conversionReportTime
     */
    public enum ConversionReportTime_adAccountTargetingAnalyticsGet: String, CaseIterable {
        case adAction = "TIME_OF_AD_ACTION"
        case conversion = "TIME_OF_CONVERSION"
    }

    /**
     Get targeting analytics for an ad account
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter targetingTypes: (query) Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter attributionTypes: (query) List of types of attribution for the conversion report (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountTargetingAnalyticsGet(adAccountId: String, startDate: Date, endDate: Date, targetingTypes: [AdsAnalyticsTargetingType], columns: [Columns_adAccountTargetingAnalyticsGet], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountTargetingAnalyticsGet? = nil, engagementWindowDays: EngagementWindowDays_adAccountTargetingAnalyticsGet? = nil, viewWindowDays: ViewWindowDays_adAccountTargetingAnalyticsGet? = nil, conversionReportTime: ConversionReportTime_adAccountTargetingAnalyticsGet? = nil, attributionTypes: ConversionReportAttributionType? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MetricsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountTargetingAnalyticsGetWithRequestBuilder(adAccountId: adAccountId, startDate: startDate, endDate: endDate, targetingTypes: targetingTypes, columns: columns, granularity: granularity, clickWindowDays: clickWindowDays, engagementWindowDays: engagementWindowDays, viewWindowDays: viewWindowDays, conversionReportTime: conversionReportTime, attributionTypes: attributionTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get targeting analytics for an ad account
     - GET /ad_accounts/{ad_account_id}/targeting_analytics
     - Get targeting analytics for an ad account. For the requested account and metrics, the response will include the requested metric information (e.g. SPEND_IN_DOLLAR) for the requested target type (e.g. \"age_bucket\") for applicable values (e.g. \"45-49\"). <p/> - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 90 days before the current date in UTC time and the max time range supported is 90 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter targetingTypes: (query) Targeting type breakdowns for the report. The reporting per targeting type &lt;br&gt; is independent from each other. [\&quot;AGE_BUCKET_AND_GENDER\&quot;] is in BETA and not yet available to all users. 
     - parameter columns: (query) Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile&#39;s currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it&#39;s microdollars. Otherwise, it&#39;s in microunits of the advertiser&#39;s currency.&lt;br/&gt;For example, if the advertiser&#39;s currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).&lt;br/&gt;If a column has no value, it may not be returned 
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly 
     - parameter clickWindowDays: (query) Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter engagementWindowDays: (query) Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;30&#x60; days. (optional, default to ._30)
     - parameter viewWindowDays: (query) Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to &#x60;1&#x60; day. (optional, default to ._1)
     - parameter conversionReportTime: (query) The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event. (optional, default to .timeOfAdAction)
     - parameter attributionTypes: (query) List of types of attribution for the conversion report (optional)
     - returns: RequestBuilder<MetricsResponse> 
     */
    open class func adAccountTargetingAnalyticsGetWithRequestBuilder(adAccountId: String, startDate: Date, endDate: Date, targetingTypes: [AdsAnalyticsTargetingType], columns: [Columns_adAccountTargetingAnalyticsGet], granularity: Granularity, clickWindowDays: ClickWindowDays_adAccountTargetingAnalyticsGet? = nil, engagementWindowDays: EngagementWindowDays_adAccountTargetingAnalyticsGet? = nil, viewWindowDays: ViewWindowDays_adAccountTargetingAnalyticsGet? = nil, conversionReportTime: ConversionReportTime_adAccountTargetingAnalyticsGet? = nil, attributionTypes: ConversionReportAttributionType? = nil) -> RequestBuilder<MetricsResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/targeting_analytics"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "targeting_types": (wrappedValue: targetingTypes.encodeToJSON(), isExplode: false),
            "columns": (wrappedValue: columns.encodeToJSON(), isExplode: false),
            "granularity": (wrappedValue: granularity.encodeToJSON(), isExplode: true),
            "click_window_days": (wrappedValue: clickWindowDays?.encodeToJSON(), isExplode: true),
            "engagement_window_days": (wrappedValue: engagementWindowDays?.encodeToJSON(), isExplode: true),
            "view_window_days": (wrappedValue: viewWindowDays?.encodeToJSON(), isExplode: true),
            "conversion_report_time": (wrappedValue: conversionReportTime?.encodeToJSON(), isExplode: true),
            "attribution_types": (wrappedValue: attributionTypes?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MetricsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create ad account
     
     - parameter adAccountCreateRequest: (body) Ad account to create. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountsCreate(adAccountCreateRequest: AdAccountCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdAccount?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountsCreateWithRequestBuilder(adAccountCreateRequest: adAccountCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create ad account
     - POST /ad_accounts
     - Create a new ad account. Different ad accounts can support different currencies, payment methods, etc. An ad account is needed to create campaigns, ad groups, and ads; other accounts (your employees or partners) can be assigned business access and appropriate roles to access an ad account. <p/> You can set up up to 50 ad accounts per user. (The user must have a business account to create an ad account.) <p/> For more, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/create-an-advertiser-account\">Create an advertiser account</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountCreateRequest: (body) Ad account to create. 
     - returns: RequestBuilder<AdAccount> 
     */
    open class func adAccountsCreateWithRequestBuilder(adAccountCreateRequest: AdAccountCreateRequest) -> RequestBuilder<AdAccount> {
        let localVariablePath = "/ad_accounts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adAccountCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdAccount>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get ad account
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountsGet(adAccountId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdAccount?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountsGetWithRequestBuilder(adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad account
     - GET /ad_accounts/{ad_account_id}
     - Get an ad account
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - returns: RequestBuilder<AdAccount> 
     */
    open class func adAccountsGetWithRequestBuilder(adAccountId: String) -> RequestBuilder<AdAccount> {
        var localVariablePath = "/ad_accounts/{ad_account_id}"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdAccount>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List ad accounts
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter includeSharedAccounts: (query) Include shared ad accounts (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountsList(bookmark: String? = nil, pageSize: Int? = nil, includeSharedAccounts: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdAccountsList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountsListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize, includeSharedAccounts: includeSharedAccounts).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List ad accounts
     - GET /ad_accounts
     - Get a list of the ad_accounts that the \"operation user_account\" has access to. - This includes ad_accounts they own and ad_accounts that are owned by others who have granted them <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter includeSharedAccounts: (query) Include shared ad accounts (optional, default to true)
     - returns: RequestBuilder<AdAccountsList200Response> 
     */
    open class func adAccountsListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil, includeSharedAccounts: Bool? = nil) -> RequestBuilder<AdAccountsList200Response> {
        let localVariablePath = "/ad_accounts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "include_shared_accounts": (wrappedValue: includeSharedAccounts?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdAccountsList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a request for a Marketing Mix Modeling (MMM) report
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter createMMMReportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsCreateMmmReport(adAccountId: String, createMMMReportRequest: CreateMMMReportRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateMMMReportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsCreateMmmReportWithRequestBuilder(adAccountId: adAccountId, createMMMReportRequest: createMMMReportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a request for a Marketing Mix Modeling (MMM) report
     - POST /ad_accounts/{ad_account_id}/mmm_reports
     - This creates an asynchronous mmm report based on the given request. It returns a token that you can use to download the report when it is ready. NOTE: An additional limit of 5 queries per minute per advertiser applies to this endpoint while it's in beta release.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter createMMMReportRequest: (body)  
     - returns: RequestBuilder<CreateMMMReportResponse> 
     */
    open class func analyticsCreateMmmReportWithRequestBuilder(adAccountId: String, createMMMReportRequest: CreateMMMReportRequest) -> RequestBuilder<CreateMMMReportResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/mmm_reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMMMReportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateMMMReportResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create async request for an account analytics report
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adsAnalyticsCreateAsyncRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsCreateReport(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsAnalyticsCreateAsyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsCreateReportWithRequestBuilder(adAccountId: adAccountId, adsAnalyticsCreateAsyncRequest: adsAnalyticsCreateAsyncRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create async request for an account analytics report
     - POST /ad_accounts/{ad_account_id}/reports
     - This returns a token that you can use to download the report when it is ready. Note that this endpoint requires the parameters to be passed as JSON-formatted in the request body. This endpoint does not support URL query parameters. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager. - If granularity is not HOUR, the furthest back you can are allowed to pull data is 914 days before the current date in UTC time and the max time range supported is 186 days. - If granularity is HOUR, the furthest back you can are allowed to pull data is 8 days before the current date in UTC time and the max time range supported is 3 days. - If level is PRODUCT_ITEM, the furthest back you can are allowed to pull data is 92 days before the current date in UTC time and the max time range supported is 31 days. - If level is PRODUCT_ITEM, ad_ids and ad_statuses parameters are not allowed. Any columns related to pin promotion and ad is not allowed either.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter adsAnalyticsCreateAsyncRequest: (body)  
     - returns: RequestBuilder<AdsAnalyticsCreateAsyncResponse> 
     */
    open class func analyticsCreateReportWithRequestBuilder(adAccountId: String, adsAnalyticsCreateAsyncRequest: AdsAnalyticsCreateAsyncRequest) -> RequestBuilder<AdsAnalyticsCreateAsyncResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: adsAnalyticsCreateAsyncRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsAnalyticsCreateAsyncResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create async request for an analytics report using a template
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter templateId: (path) Unique identifier of a template. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years back from today. (optional)
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years past start date. (optional)
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsCreateTemplateReport(adAccountId: String, templateId: String, startDate: Date? = nil, endDate: Date? = nil, granularity: Granularity? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsAnalyticsCreateAsyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsCreateTemplateReportWithRequestBuilder(adAccountId: adAccountId, templateId: templateId, startDate: startDate, endDate: endDate, granularity: granularity).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create async request for an analytics report using a template
     - POST /ad_accounts/{ad_account_id}/templates/{template_id}/reports
     - This takes a template ID and an optional custom timeframe and constructs an asynchronous report based on the template. It returns a token that you can use to download the report when it is ready.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter templateId: (path) Unique identifier of a template. 
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years back from today. (optional)
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years past start date. (optional)
     - parameter granularity: (query) TOTAL - metrics are aggregated over the specified date range.&lt;br&gt; DAY - metrics are broken down daily.&lt;br&gt; HOUR - metrics are broken down hourly.&lt;br&gt;WEEKLY - metrics are broken down weekly.&lt;br&gt;MONTHLY - metrics are broken down monthly (optional)
     - returns: RequestBuilder<AdsAnalyticsCreateAsyncResponse> 
     */
    open class func analyticsCreateTemplateReportWithRequestBuilder(adAccountId: String, templateId: String, startDate: Date? = nil, endDate: Date? = nil, granularity: Granularity? = nil) -> RequestBuilder<AdsAnalyticsCreateAsyncResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/templates/{template_id}/reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{template_id}", with: templateIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "granularity": (wrappedValue: granularity?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsAnalyticsCreateAsyncResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get advertiser Marketing Mix Modeling (MMM) report.
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsGetMmmReport(adAccountId: String, token: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMMMReportResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsGetMmmReportWithRequestBuilder(adAccountId: adAccountId, token: token).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get advertiser Marketing Mix Modeling (MMM) report.
     - GET /ad_accounts/{ad_account_id}/mmm_reports
     - Get an mmm report for an ad account. This returns a URL to an mmm metrics report given a token returned from the create mmm report endpoint.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - returns: RequestBuilder<GetMMMReportResponse> 
     */
    open class func analyticsGetMmmReportWithRequestBuilder(adAccountId: String, token: String) -> RequestBuilder<GetMMMReportResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/mmm_reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMMMReportResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get the account analytics report created by the async call
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyticsGetReport(adAccountId: String, token: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdsAnalyticsGetAsyncResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return analyticsGetReportWithRequestBuilder(adAccountId: adAccountId, token: token).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the account analytics report created by the async call
     - GET /ad_accounts/{ad_account_id}/reports
     - This returns a URL to an analytics report given a token returned from the post request report creation call. You can use the URL to download the report. The link is valid for five minutes and the report is valid for one hour. - The token's user_account must either be the Owner of the specified ad account, or have one of the necessary roles granted to them via <a href=\"https://help.pinterest.com/en/business/article/share-and-manage-access-to-your-ad-accounts\">Business Access</a>: Admin, Analyst, Campaign Manager.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter token: (query) Token returned from the post request creation call 
     - returns: RequestBuilder<AdsAnalyticsGetAsyncResponse> 
     */
    open class func analyticsGetReportWithRequestBuilder(adAccountId: String, token: String) -> RequestBuilder<AdsAnalyticsGetAsyncResponse> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/reports"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": (wrappedValue: token.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdsAnalyticsGetAsyncResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete ads data for ad account in API Sandbox
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sandboxDelete(adAccountId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return sandboxDeleteWithRequestBuilder(adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete ads data for ad account in API Sandbox
     - DELETE /ad_accounts/{ad_account_id}/sandbox
     - Delete an ad account and all the ads data associated with that account. A string message is returned indicating the status of the delete operation.  Note: This endpoint is only allowed in the Pinterest API Sandbox (https://api-sandbox.pinterest.com/v5). Go to /docs/developer-tools/sandbox/ for more information.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - returns: RequestBuilder<String> 
     */
    open class func sandboxDeleteWithRequestBuilder(adAccountId: String) -> RequestBuilder<String> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/sandbox"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter order
     */
    public enum Order_templatesList: String, CaseIterable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     List templates
     
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func templatesList(adAccountId: String, pageSize: Int? = nil, order: Order_templatesList? = nil, bookmark: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TemplatesList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return templatesListWithRequestBuilder(adAccountId: adAccountId, pageSize: pageSize, order: order, bookmark: bookmark).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List templates
     - GET /ad_accounts/{ad_account_id}/templates
     - Gets all Templates associated with an ad account ID.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter adAccountId: (path) Unique identifier of an ad account. 
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter order: (query) The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items. (optional)
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - returns: RequestBuilder<TemplatesList200Response> 
     */
    open class func templatesListWithRequestBuilder(adAccountId: String, pageSize: Int? = nil, order: Order_templatesList? = nil, bookmark: String? = nil) -> RequestBuilder<TemplatesList200Response> {
        var localVariablePath = "/ad_accounts/{ad_account_id}/templates"
        let adAccountIdPreEscape = "\(APIHelper.mapValueToPathItem(adAccountId))"
        let adAccountIdPostEscape = adAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ad_account_id}", with: adAccountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TemplatesList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
