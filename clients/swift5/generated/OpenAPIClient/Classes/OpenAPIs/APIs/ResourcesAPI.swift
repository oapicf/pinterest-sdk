//
// ResourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ResourcesAPI {

    /**
     Get ad accounts countries
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func adAccountCountriesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdAccountsCountryResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return adAccountCountriesGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ad accounts countries
     - GET /resources/ad_account_countries
     - Get Ad Accounts countries
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - returns: RequestBuilder<AdAccountsCountryResponse> 
     */
    open class func adAccountCountriesGetWithRequestBuilder() -> RequestBuilder<AdAccountsCountryResponse> {
        let localVariablePath = "/resources/ad_account_countries"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdAccountsCountryResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter reportType
     */
    public enum ReportType_deliveryMetricsGet: String, CaseIterable {
        case sync = "SYNC"
        case async = "ASYNC"
    }

    /**
     Get available metrics' definitions
     
     - parameter reportType: (query) Report type. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deliveryMetricsGet(reportType: ReportType_deliveryMetricsGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeliveryMetricsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return deliveryMetricsGetWithRequestBuilder(reportType: reportType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get available metrics' definitions
     - GET /resources/delivery_metrics
     - Get the definitions for ads and organic metrics available across both synchronous and asynchronous report endpoints. The `display_name` attribute will match how the metric is named in our native tools like Ads Manager. See <a href='/docs/api-features/analytics-overview/'>Organic Analytics</a> and <a href='/docs/api-features/ads-reporting/'>Ads Analytics</a> for more information.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter reportType: (query) Report type. (optional)
     - returns: RequestBuilder<DeliveryMetricsResponse> 
     */
    open class func deliveryMetricsGetWithRequestBuilder(reportType: ReportType_deliveryMetricsGet? = nil) -> RequestBuilder<DeliveryMetricsResponse> {
        let localVariablePath = "/resources/delivery_metrics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "report_type": (wrappedValue: reportType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeliveryMetricsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get interest details
     
     - parameter interestId: (path) Unique identifier of an interest. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interestTargetingOptionsGet(interestId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SingleInterestTargetingOptionResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return interestTargetingOptionsGetWithRequestBuilder(interestId: interestId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get interest details
     - GET /resources/targeting/interests/{interest_id}
     - <p>Get details of a specific interest given interest ID.</p> <p>Click <a href=\"https://docs.google.com/spreadsheets/d/1HxL-0Z3p2fgxis9YBP2HWC3tvPrs1hAuHDRtH-NJTIM/edit#gid=118370875\" target=\"_blank\">here</a> for a spreadsheet listing interests and their IDs.</p>
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter interestId: (path) Unique identifier of an interest. 
     - returns: RequestBuilder<SingleInterestTargetingOptionResponse> 
     */
    open class func interestTargetingOptionsGetWithRequestBuilder(interestId: String) -> RequestBuilder<SingleInterestTargetingOptionResponse> {
        var localVariablePath = "/resources/targeting/interests/{interest_id}"
        let interestIdPreEscape = "\(APIHelper.mapValueToPathItem(interestId))"
        let interestIdPostEscape = interestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{interest_id}", with: interestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleInterestTargetingOptionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get lead form questions
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func leadFormQuestionsGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return leadFormQuestionsGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get lead form questions
     - GET /resources/lead_form_questions
     - Get a list of all lead form question type names. Some questions might not be used.  <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - returns: RequestBuilder<Void> 
     */
    open class func leadFormQuestionsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/resources/lead_form_questions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get metrics ready state
     
     - parameter date: (query) Analytics reports request date (UTC). Format: YYYY-MM-DD 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func metricsReadyStateGet(date: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BookClosedResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return metricsReadyStateGetWithRequestBuilder(date: date).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get metrics ready state
     - GET /resources/metrics_ready_state
     - Learn whether conversion or non-conversion metrics are finalized and ready to query.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter date: (query) Analytics reports request date (UTC). Format: YYYY-MM-DD 
     - returns: RequestBuilder<BookClosedResponse> 
     */
    open class func metricsReadyStateGetWithRequestBuilder(date: String) -> RequestBuilder<BookClosedResponse> {
        let localVariablePath = "/resources/metrics_ready_state"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date": (wrappedValue: date.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BookClosedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter targetingType
     */
    public enum TargetingType_targetingOptionsGet: String, CaseIterable {
        case apptype = "APPTYPE"
        case gender = "GENDER"
        case locale = "LOCALE"
        case ageBucket = "AGE_BUCKET"
        case location = "LOCATION"
        case geo = "GEO"
        case interest = "INTEREST"
        case keyword = "KEYWORD"
        case audienceInclude = "AUDIENCE_INCLUDE"
        case audienceExclude = "AUDIENCE_EXCLUDE"
    }

    /**
     Get targeting options
     
     - parameter targetingType: (path) Public targeting type. 
     - parameter clientId: (query) Client ID. (optional)
     - parameter oauthSignature: (query) Oauth signature (optional)
     - parameter timestamp: (query) Timestamp (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func targetingOptionsGet(targetingType: TargetingType_targetingOptionsGet, clientId: String? = nil, oauthSignature: String? = nil, timestamp: String? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AnyCodable]?, _ error: Error?) -> Void)) -> RequestTask {
        return targetingOptionsGetWithRequestBuilder(targetingType: targetingType, clientId: clientId, oauthSignature: oauthSignature, timestamp: timestamp, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get targeting options
     - GET /resources/targeting/{targeting_type}
     - <p>You can use targeting values in ads placement to define your intended audience. </p> <p>Targeting metrics are organized around targeting specifications.</p> <p>For more information on ads targeting, see <a class=\"reference external\" href=\"https://help.pinterest.com/en/business/article/audience-targeting\" target=\"_blank\">Audience targeting</a>.</p> <p><b>Sample return:</b></p> <pre class=\"literal-block\"> [{&quot;36313&quot;: &quot;Australia: Moreton Bay - North&quot;, &quot;124735&quot;: &quot;Canada: North Battleford&quot;, &quot;36109&quot;: &quot;Australia: Murray&quot;, &quot;36108&quot;: &quot;Australia: Mid North Coast&quot;, &quot;36101&quot;: &quot;Australia: Capital Region&quot;, &quot;811&quot;: &quot;U.S.: Reno&quot;, &quot;36103&quot;: &quot;Australia: Central West&quot;, &quot;36102&quot;: &quot;Australia: Central Coast&quot;, &quot;36105&quot;: &quot;Australia: Far West and Orana&quot;, &quot;36104&quot;: &quot;Australia: Coffs Harbour - Grafton&quot;, &quot;36107&quot;: &quot;Australia: Illawarra&quot;, &quot;36106&quot;: &quot;Australia: Hunter Valley Exc Newcastle&quot;, &quot;554017&quot;: &quot;New Zealand: Wanganui&quot;, &quot;554016&quot;: &quot;New Zealand: Marlborough&quot;, &quot;554015&quot;: &quot;New Zealand: Gisborne&quot;, &quot;554014&quot;: &quot;New Zealand: Tararua&quot;, &quot;554013&quot;: &quot;New Zealand: Invercargill&quot;, &quot;GR&quot;: &quot;Greece&quot;, &quot;554011&quot;: &quot;New Zealand: Whangarei&quot;, &quot;554010&quot;: &quot;New Zealand: Far North&quot;, &quot;717&quot;: &quot;U.S.: Quincy-Hannibal-Keokuk&quot;, &quot;716&quot;: &quot;U.S.: Baton Rouge&quot;,...}] </pre>
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter targetingType: (path) Public targeting type. 
     - parameter clientId: (query) Client ID. (optional)
     - parameter oauthSignature: (query) Oauth signature (optional)
     - parameter timestamp: (query) Timestamp (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<[AnyCodable]> 
     */
    open class func targetingOptionsGetWithRequestBuilder(targetingType: TargetingType_targetingOptionsGet, clientId: String? = nil, oauthSignature: String? = nil, timestamp: String? = nil, adAccountId: String? = nil) -> RequestBuilder<[AnyCodable]> {
        var localVariablePath = "/resources/targeting/{targeting_type}"
        let targetingTypePreEscape = "\(targetingType.rawValue)"
        let targetingTypePostEscape = targetingTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{targeting_type}", with: targetingTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_id": (wrappedValue: clientId?.encodeToJSON(), isExplode: true),
            "oauth_signature": (wrappedValue: oauthSignature?.encodeToJSON(), isExplode: true),
            "timestamp": (wrappedValue: timestamp?.encodeToJSON(), isExplode: true),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AnyCodable]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
