//
// UserAccountAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserAccountAPI {

    /**
     List following boards
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter explicitFollowing: (query) Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func boardsUserFollowsList(bookmark: String? = nil, pageSize: Int? = nil, explicitFollowing: Bool? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BoardsUserFollowsList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return boardsUserFollowsListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize, explicitFollowing: explicitFollowing, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List following boards
     - GET /user_account/following/boards
     - Get a list of the boards a user follows. The request returns a board summary object array.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter explicitFollowing: (query) Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<BoardsUserFollowsList200Response> 
     */
    open class func boardsUserFollowsListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil, explicitFollowing: Bool? = nil, adAccountId: String? = nil) -> RequestBuilder<BoardsUserFollowsList200Response> {
        let localVariablePath = "/user_account/following/boards"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "explicit_following": (wrappedValue: explicitFollowing?.encodeToJSON(), isExplode: true),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoardsUserFollowsList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Follow user
     
     - parameter username: (path) A valid username 
     - parameter followUserRequest: (body) Follow a user. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func followUserUpdate(username: String, followUserRequest: FollowUserRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserSummary?, _ error: Error?) -> Void)) -> RequestTask {
        return followUserUpdateWithRequestBuilder(username: username, followUserRequest: followUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Follow user
     - POST /user_account/following/{username}
     - <strong>This endpoint is currently in beta and not available to all apps. <a href='/docs/getting-started/beta-and-advanced-access/'>Learn more</a>.</strong>  Use this request, as a signed-in user, to follow another user.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter username: (path) A valid username 
     - parameter followUserRequest: (body) Follow a user. 
     - returns: RequestBuilder<UserSummary> 
     */
    open class func followUserUpdateWithRequestBuilder(username: String, followUserRequest: FollowUserRequest) -> RequestBuilder<UserSummary> {
        var localVariablePath = "/user_account/following/{username}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: followUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserSummary>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List followers
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func followersList(bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FollowersList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return followersListWithRequestBuilder(bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List followers
     - GET /user_account/followers
     - Get a list of your followers.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<FollowersList200Response> 
     */
    open class func followersListWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<FollowersList200Response> {
        let localVariablePath = "/user_account/followers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FollowersList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List linked businesses
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func linkedBusinessAccountsGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LinkedBusiness]?, _ error: Error?) -> Void)) -> RequestTask {
        return linkedBusinessAccountsGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List linked businesses
     - GET /user_account/businesses
     - Get a list of your linked business accounts.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - returns: RequestBuilder<[LinkedBusiness]> 
     */
    open class func linkedBusinessAccountsGetWithRequestBuilder() -> RequestBuilder<[LinkedBusiness]> {
        let localVariablePath = "/user_account/businesses"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LinkedBusiness]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Unverify website
     
     - parameter website: (query) Website with path or domain only 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unverifyWebsiteDelete(website: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unverifyWebsiteDeleteWithRequestBuilder(website: website).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unverify website
     - DELETE /user_account/websites
     - Unverifu a website verified by the signed-in user.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter website: (query) Website with path or domain only 
     - returns: RequestBuilder<Void> 
     */
    open class func unverifyWebsiteDeleteWithRequestBuilder(website: String) -> RequestBuilder<Void> {
        let localVariablePath = "/user_account/websites"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "website": (wrappedValue: website.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fromClaimedContent
     */
    public enum FromClaimedContent_userAccountAnalytics: String, CaseIterable {
        case other = "OTHER"
        case claimed = "CLAIMED"
        case both = "BOTH"
    }

    /**
     * enum for parameter pinFormat
     */
    public enum PinFormat_userAccountAnalytics: String, CaseIterable {
        case all = "ALL"
        case organicImage = "ORGANIC_IMAGE"
        case organicProduct = "ORGANIC_PRODUCT"
        case organicVideo = "ORGANIC_VIDEO"
        case adsStandard = "ADS_STANDARD"
        case adsProduct = "ADS_PRODUCT"
        case adsVideo = "ADS_VIDEO"
        case adsIdea = "ADS_IDEA"
    }

    /**
     * enum for parameter appTypes
     */
    public enum AppTypes_userAccountAnalytics: String, CaseIterable {
        case all = "ALL"
        case mobile = "MOBILE"
        case tablet = "TABLET"
        case web = "WEB"
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_userAccountAnalytics: String, CaseIterable {
        case all = "ALL"
        case paid = "PAID"
        case organic = "ORGANIC"
    }

    /**
     * enum for parameter source
     */
    public enum Source_userAccountAnalytics: String, CaseIterable {
        case all = "ALL"
        case yourPins = "YOUR_PINS"
        case otherPins = "OTHER_PINS"
    }

    /**
     * enum for parameter metricTypes
     */
    public enum MetricTypes_userAccountAnalytics: String, CaseIterable {
        case engagement = "ENGAGEMENT"
        case engagementRate = "ENGAGEMENT_RATE"
        case impression = "IMPRESSION"
        case outboundClick = "OUTBOUND_CLICK"
        case outboundClickRate = "OUTBOUND_CLICK_RATE"
        case pinClick = "PIN_CLICK"
        case pinClickRate = "PIN_CLICK_RATE"
        case save = "SAVE"
        case saveRate = "SAVE_RATE"
    }

    /**
     * enum for parameter splitField
     */
    public enum SplitField_userAccountAnalytics: String, CaseIterable {
        case noSplit = "NO_SPLIT"
        case appType = "APP_TYPE"
        case ownedContent = "OWNED_CONTENT"
        case source = "SOURCE"
        case pinFormat = "PIN_FORMAT"
    }

    /**
     Get user account analytics
     
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get data for, default is all.  (optional)
     - parameter splitField: (query) How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to .noSplit)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userAccountAnalytics(startDate: Date, endDate: Date, fromClaimedContent: FromClaimedContent_userAccountAnalytics? = nil, pinFormat: PinFormat_userAccountAnalytics? = nil, appTypes: AppTypes_userAccountAnalytics? = nil, contentType: ContentType_userAccountAnalytics? = nil, source: Source_userAccountAnalytics? = nil, metricTypes: [MetricTypes_userAccountAnalytics]? = nil, splitField: SplitField_userAccountAnalytics? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String: AnalyticsMetricsResponse]?, _ error: Error?) -> Void)) -> RequestTask {
        return userAccountAnalyticsWithRequestBuilder(startDate: startDate, endDate: endDate, fromClaimedContent: fromClaimedContent, pinFormat: pinFormat, appTypes: appTypes, contentType: contentType, source: source, metricTypes: metricTypes, splitField: splitField, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user account analytics
     - GET /user_account/analytics
     - Get analytics for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get data for, default is all.  (optional)
     - parameter splitField: (query) How to split the data into groups. Not including this param means data won&#39;t be split. (optional, default to .noSplit)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<[String: AnalyticsMetricsResponse]> 
     */
    open class func userAccountAnalyticsWithRequestBuilder(startDate: Date, endDate: Date, fromClaimedContent: FromClaimedContent_userAccountAnalytics? = nil, pinFormat: PinFormat_userAccountAnalytics? = nil, appTypes: AppTypes_userAccountAnalytics? = nil, contentType: ContentType_userAccountAnalytics? = nil, source: Source_userAccountAnalytics? = nil, metricTypes: [MetricTypes_userAccountAnalytics]? = nil, splitField: SplitField_userAccountAnalytics? = nil, adAccountId: String? = nil) -> RequestBuilder<[String: AnalyticsMetricsResponse]> {
        let localVariablePath = "/user_account/analytics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "from_claimed_content": (wrappedValue: fromClaimedContent?.encodeToJSON(), isExplode: true),
            "pin_format": (wrappedValue: pinFormat?.encodeToJSON(), isExplode: true),
            "app_types": (wrappedValue: appTypes?.encodeToJSON(), isExplode: true),
            "content_type": (wrappedValue: contentType?.encodeToJSON(), isExplode: true),
            "source": (wrappedValue: source?.encodeToJSON(), isExplode: true),
            "metric_types": (wrappedValue: metricTypes?.encodeToJSON(), isExplode: false),
            "split_field": (wrappedValue: splitField?.encodeToJSON(), isExplode: false),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnalyticsMetricsResponse]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_userAccountAnalyticsTopPins: String, CaseIterable {
        case engagement = "ENGAGEMENT"
        case impression = "IMPRESSION"
        case outboundClick = "OUTBOUND_CLICK"
        case pinClick = "PIN_CLICK"
        case save = "SAVE"
    }

    /**
     * enum for parameter fromClaimedContent
     */
    public enum FromClaimedContent_userAccountAnalyticsTopPins: String, CaseIterable {
        case other = "OTHER"
        case claimed = "CLAIMED"
        case both = "BOTH"
    }

    /**
     * enum for parameter pinFormat
     */
    public enum PinFormat_userAccountAnalyticsTopPins: String, CaseIterable {
        case all = "ALL"
        case organicImage = "ORGANIC_IMAGE"
        case organicProduct = "ORGANIC_PRODUCT"
        case organicVideo = "ORGANIC_VIDEO"
        case adsStandard = "ADS_STANDARD"
        case adsProduct = "ADS_PRODUCT"
        case adsVideo = "ADS_VIDEO"
        case adsIdea = "ADS_IDEA"
    }

    /**
     * enum for parameter appTypes
     */
    public enum AppTypes_userAccountAnalyticsTopPins: String, CaseIterable {
        case all = "ALL"
        case mobile = "MOBILE"
        case tablet = "TABLET"
        case web = "WEB"
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_userAccountAnalyticsTopPins: String, CaseIterable {
        case all = "ALL"
        case paid = "PAID"
        case organic = "ORGANIC"
    }

    /**
     * enum for parameter source
     */
    public enum Source_userAccountAnalyticsTopPins: String, CaseIterable {
        case all = "ALL"
        case yourPins = "YOUR_PINS"
        case otherPins = "OTHER_PINS"
    }

    /**
     * enum for parameter metricTypes
     */
    public enum MetricTypes_userAccountAnalyticsTopPins: String, CaseIterable {
        case engagement = "ENGAGEMENT"
        case engagementRate = "ENGAGEMENT_RATE"
        case impression = "IMPRESSION"
        case outboundClick = "OUTBOUND_CLICK"
        case outboundClickRate = "OUTBOUND_CLICK_RATE"
        case pinClick = "PIN_CLICK"
        case pinClickRate = "PIN_CLICK_RATE"
        case save = "SAVE"
        case saveRate = "SAVE_RATE"
    }

    /**
     * enum for parameter createdInLastNDays
     */
    public enum CreatedInLastNDays_userAccountAnalyticsTopPins: Int, CaseIterable {
        case _30 = 30
    }

    /**
     Get user account top pins analytics
     
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter sortBy: (query) Specify sorting order for metrics 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get data for, default is all.  (optional)
     - parameter numOfPins: (query) Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     - parameter createdInLastNDays: (query) Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userAccountAnalyticsTopPins(startDate: Date, endDate: Date, sortBy: SortBy_userAccountAnalyticsTopPins, fromClaimedContent: FromClaimedContent_userAccountAnalyticsTopPins? = nil, pinFormat: PinFormat_userAccountAnalyticsTopPins? = nil, appTypes: AppTypes_userAccountAnalyticsTopPins? = nil, contentType: ContentType_userAccountAnalyticsTopPins? = nil, source: Source_userAccountAnalyticsTopPins? = nil, metricTypes: [MetricTypes_userAccountAnalyticsTopPins]? = nil, numOfPins: Int? = nil, createdInLastNDays: CreatedInLastNDays_userAccountAnalyticsTopPins? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TopPinsAnalyticsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userAccountAnalyticsTopPinsWithRequestBuilder(startDate: startDate, endDate: endDate, sortBy: sortBy, fromClaimedContent: fromClaimedContent, pinFormat: pinFormat, appTypes: appTypes, contentType: contentType, source: source, metricTypes: metricTypes, numOfPins: numOfPins, createdInLastNDays: createdInLastNDays, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user account top pins analytics
     - GET /user_account/analytics/top_pins
     - Gets analytics data about a user's top pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter sortBy: (query) Specify sorting order for metrics 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get data for, default is all.  (optional)
     - parameter numOfPins: (query) Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     - parameter createdInLastNDays: (query) Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<TopPinsAnalyticsResponse> 
     */
    open class func userAccountAnalyticsTopPinsWithRequestBuilder(startDate: Date, endDate: Date, sortBy: SortBy_userAccountAnalyticsTopPins, fromClaimedContent: FromClaimedContent_userAccountAnalyticsTopPins? = nil, pinFormat: PinFormat_userAccountAnalyticsTopPins? = nil, appTypes: AppTypes_userAccountAnalyticsTopPins? = nil, contentType: ContentType_userAccountAnalyticsTopPins? = nil, source: Source_userAccountAnalyticsTopPins? = nil, metricTypes: [MetricTypes_userAccountAnalyticsTopPins]? = nil, numOfPins: Int? = nil, createdInLastNDays: CreatedInLastNDays_userAccountAnalyticsTopPins? = nil, adAccountId: String? = nil) -> RequestBuilder<TopPinsAnalyticsResponse> {
        let localVariablePath = "/user_account/analytics/top_pins"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy.encodeToJSON(), isExplode: false),
            "from_claimed_content": (wrappedValue: fromClaimedContent?.encodeToJSON(), isExplode: true),
            "pin_format": (wrappedValue: pinFormat?.encodeToJSON(), isExplode: true),
            "app_types": (wrappedValue: appTypes?.encodeToJSON(), isExplode: true),
            "content_type": (wrappedValue: contentType?.encodeToJSON(), isExplode: true),
            "source": (wrappedValue: source?.encodeToJSON(), isExplode: true),
            "metric_types": (wrappedValue: metricTypes?.encodeToJSON(), isExplode: false),
            "num_of_pins": (wrappedValue: numOfPins?.encodeToJSON(), isExplode: true),
            "created_in_last_n_days": (wrappedValue: createdInLastNDays?.encodeToJSON(), isExplode: true),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TopPinsAnalyticsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortBy_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case impression = "IMPRESSION"
        case save = "SAVE"
        case outboundClick = "OUTBOUND_CLICK"
        case videoMrcView = "VIDEO_MRC_VIEW"
        case videoAvgWatchTime = "VIDEO_AVG_WATCH_TIME"
        case videoV50WatchTime = "VIDEO_V50_WATCH_TIME"
        case quartile95PercentView = "QUARTILE_95_PERCENT_VIEW"
        case video10sView = "VIDEO_10S_VIEW"
        case videoStart = "VIDEO_START"
    }

    /**
     * enum for parameter fromClaimedContent
     */
    public enum FromClaimedContent_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case other = "OTHER"
        case claimed = "CLAIMED"
        case both = "BOTH"
    }

    /**
     * enum for parameter pinFormat
     */
    public enum PinFormat_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case all = "ALL"
        case organicImage = "ORGANIC_IMAGE"
        case organicProduct = "ORGANIC_PRODUCT"
        case organicVideo = "ORGANIC_VIDEO"
        case adsStandard = "ADS_STANDARD"
        case adsProduct = "ADS_PRODUCT"
        case adsVideo = "ADS_VIDEO"
        case adsIdea = "ADS_IDEA"
    }

    /**
     * enum for parameter appTypes
     */
    public enum AppTypes_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case all = "ALL"
        case mobile = "MOBILE"
        case tablet = "TABLET"
        case web = "WEB"
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case all = "ALL"
        case paid = "PAID"
        case organic = "ORGANIC"
    }

    /**
     * enum for parameter source
     */
    public enum Source_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case all = "ALL"
        case yourPins = "YOUR_PINS"
        case otherPins = "OTHER_PINS"
    }

    /**
     * enum for parameter metricTypes
     */
    public enum MetricTypes_userAccountAnalyticsTopVideoPins: String, CaseIterable {
        case impression = "IMPRESSION"
        case save = "SAVE"
        case videoMrcView = "VIDEO_MRC_VIEW"
        case videoAvgWatchTime = "VIDEO_AVG_WATCH_TIME"
        case videoV50WatchTime = "VIDEO_V50_WATCH_TIME"
        case quartile95PercentView = "QUARTILE_95_PERCENT_VIEW"
        case video10sView = "VIDEO_10S_VIEW"
        case videoStart = "VIDEO_START"
        case outboundClick = "OUTBOUND_CLICK"
    }

    /**
     * enum for parameter createdInLastNDays
     */
    public enum CreatedInLastNDays_userAccountAnalyticsTopVideoPins: Int, CaseIterable {
        case _30 = 30
    }

    /**
     Get user account top video pins analytics
     
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter sortBy: (query) Specify sorting order for video metrics 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get video data for, default is all.  (optional)
     - parameter numOfPins: (query) Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     - parameter createdInLastNDays: (query) Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userAccountAnalyticsTopVideoPins(startDate: Date, endDate: Date, sortBy: SortBy_userAccountAnalyticsTopVideoPins, fromClaimedContent: FromClaimedContent_userAccountAnalyticsTopVideoPins? = nil, pinFormat: PinFormat_userAccountAnalyticsTopVideoPins? = nil, appTypes: AppTypes_userAccountAnalyticsTopVideoPins? = nil, contentType: ContentType_userAccountAnalyticsTopVideoPins? = nil, source: Source_userAccountAnalyticsTopVideoPins? = nil, metricTypes: [MetricTypes_userAccountAnalyticsTopVideoPins]? = nil, numOfPins: Int? = nil, createdInLastNDays: CreatedInLastNDays_userAccountAnalyticsTopVideoPins? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TopVideoPinsAnalyticsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userAccountAnalyticsTopVideoPinsWithRequestBuilder(startDate: startDate, endDate: endDate, sortBy: sortBy, fromClaimedContent: fromClaimedContent, pinFormat: pinFormat, appTypes: appTypes, contentType: contentType, source: source, metricTypes: metricTypes, numOfPins: numOfPins, createdInLastNDays: createdInLastNDays, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user account top video pins analytics
     - GET /user_account/analytics/top_video_pins
     - Gets analytics data about a user's top video pins (limited to the top 50). - By default, the \"operation user_account\" is the token user_account.  Optional: Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\".
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter startDate: (query) Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today. 
     - parameter endDate: (query) Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date. 
     - parameter sortBy: (query) Specify sorting order for video metrics 
     - parameter fromClaimedContent: (query) Filter on Pins that match your claimed domain. (optional, default to .both)
     - parameter pinFormat: (query) Pin formats to get data for, default is all. (optional, default to .all)
     - parameter appTypes: (query) Apps or devices to get data for, default is all. (optional, default to .all)
     - parameter contentType: (query) Filter to paid or organic data. Default is all. (optional, default to .all)
     - parameter source: (query) Filter to activity from Pins created and saved by your, or activity created and saved by others from your claimed accounts (optional, default to .all)
     - parameter metricTypes: (query) Metric types to get video data for, default is all.  (optional)
     - parameter numOfPins: (query) Number of pins to include, default is 10. Max is 50. (optional, default to 10)
     - parameter createdInLastNDays: (query) Get metrics for pins created in the last \&quot;n\&quot; days. (optional)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<TopVideoPinsAnalyticsResponse> 
     */
    open class func userAccountAnalyticsTopVideoPinsWithRequestBuilder(startDate: Date, endDate: Date, sortBy: SortBy_userAccountAnalyticsTopVideoPins, fromClaimedContent: FromClaimedContent_userAccountAnalyticsTopVideoPins? = nil, pinFormat: PinFormat_userAccountAnalyticsTopVideoPins? = nil, appTypes: AppTypes_userAccountAnalyticsTopVideoPins? = nil, contentType: ContentType_userAccountAnalyticsTopVideoPins? = nil, source: Source_userAccountAnalyticsTopVideoPins? = nil, metricTypes: [MetricTypes_userAccountAnalyticsTopVideoPins]? = nil, numOfPins: Int? = nil, createdInLastNDays: CreatedInLastNDays_userAccountAnalyticsTopVideoPins? = nil, adAccountId: String? = nil) -> RequestBuilder<TopVideoPinsAnalyticsResponse> {
        let localVariablePath = "/user_account/analytics/top_video_pins"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy.encodeToJSON(), isExplode: false),
            "from_claimed_content": (wrappedValue: fromClaimedContent?.encodeToJSON(), isExplode: true),
            "pin_format": (wrappedValue: pinFormat?.encodeToJSON(), isExplode: true),
            "app_types": (wrappedValue: appTypes?.encodeToJSON(), isExplode: true),
            "content_type": (wrappedValue: contentType?.encodeToJSON(), isExplode: true),
            "source": (wrappedValue: source?.encodeToJSON(), isExplode: true),
            "metric_types": (wrappedValue: metricTypes?.encodeToJSON(), isExplode: false),
            "num_of_pins": (wrappedValue: numOfPins?.encodeToJSON(), isExplode: true),
            "created_in_last_n_days": (wrappedValue: createdInLastNDays?.encodeToJSON(), isExplode: true),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TopVideoPinsAnalyticsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List following interests
     
     - parameter username: (path) A valid username 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userAccountFollowedInterests(username: String, bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserAccountFollowedInterests200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return userAccountFollowedInterestsWithRequestBuilder(username: username, bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List following interests
     - GET /users/{username}/interests/follow
     - Get a list of a user's following interests in one place.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter username: (path) A valid username 
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<UserAccountFollowedInterests200Response> 
     */
    open class func userAccountFollowedInterestsWithRequestBuilder(username: String, bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<UserAccountFollowedInterests200Response> {
        var localVariablePath = "/users/{username}/interests/follow"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAccountFollowedInterests200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get user account
     
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userAccountGet(adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Account?, _ error: Error?) -> Void)) -> RequestTask {
        return userAccountGetWithRequestBuilder(adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user account
     - GET /user_account
     - Get account information for the \"operation user_account\" - By default, the \"operation user_account\" is the token user_account.  If using Business Access: Specify an ad_account_id to use the owner of that ad_account as the \"operation user_account\". See <a href='/docs/getting-started/using-business-access/'>Understanding Business Access</a> for more information.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<Account> 
     */
    open class func userAccountGetWithRequestBuilder(adAccountId: String? = nil) -> RequestBuilder<Account> {
        let localVariablePath = "/user_account"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List following
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter feedType: (query) Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)
     - parameter explicitFollowing: (query) Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowingGet(bookmark: String? = nil, pageSize: Int? = nil, feedType: UserFollowingFeedType? = nil, explicitFollowing: Bool? = nil, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFollowingGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowingGetWithRequestBuilder(bookmark: bookmark, pageSize: pageSize, feedType: feedType, explicitFollowing: explicitFollowing, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List following
     - GET /user_account/following
     - Get a list of who a certain user follows.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter feedType: (query) Thrift param specifying what type of followees will be kept. Default to include all followees. (optional)
     - parameter explicitFollowing: (query) Whether or not to include implicit user follows, which means followees with board follows. When explicit_following is True, it means we only want explicit user follows. (optional, default to false)
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<UserFollowingGet200Response> 
     */
    open class func userFollowingGetWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil, feedType: UserFollowingFeedType? = nil, explicitFollowing: Bool? = nil, adAccountId: String? = nil) -> RequestBuilder<UserFollowingGet200Response> {
        let localVariablePath = "/user_account/following"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "feed_type": (wrappedValue: feedType?.encodeToJSON(), isExplode: true),
            "explicit_following": (wrappedValue: explicitFollowing?.encodeToJSON(), isExplode: true),
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFollowingGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get user websites
     
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userWebsitesGet(bookmark: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWebsitesGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return userWebsitesGetWithRequestBuilder(bookmark: bookmark, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user websites
     - GET /user_account/websites
     - Get user websites, claimed or not
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter bookmark: (query) Cursor used to fetch the next page of items (optional)
     - parameter pageSize: (query) Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     - returns: RequestBuilder<UserWebsitesGet200Response> 
     */
    open class func userWebsitesGetWithRequestBuilder(bookmark: String? = nil, pageSize: Int? = nil) -> RequestBuilder<UserWebsitesGet200Response> {
        let localVariablePath = "/user_account/websites"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bookmark": (wrappedValue: bookmark?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWebsitesGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Verify website
     
     - parameter userWebsiteVerifyRequest: (body) Verify a website. 
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyWebsiteUpdate(userWebsiteVerifyRequest: UserWebsiteVerifyRequest, adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWebsiteSummary?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyWebsiteUpdateWithRequestBuilder(userWebsiteVerifyRequest: userWebsiteVerifyRequest, adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Verify website
     - POST /user_account/websites
     - Verify a website as a signed-in user.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - parameter userWebsiteVerifyRequest: (body) Verify a website. 
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<UserWebsiteSummary> 
     */
    open class func verifyWebsiteUpdateWithRequestBuilder(userWebsiteVerifyRequest: UserWebsiteVerifyRequest, adAccountId: String? = nil) -> RequestBuilder<UserWebsiteSummary> {
        let localVariablePath = "/user_account/websites"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userWebsiteVerifyRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWebsiteSummary>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get user verification code for website claiming
     
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func websiteVerificationGet(adAccountId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserWebsiteVerificationCode?, _ error: Error?) -> Void)) -> RequestTask {
        return websiteVerificationGetWithRequestBuilder(adAccountId: adAccountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user verification code for website claiming
     - GET /user_account/websites/verification
     - Get verification code for user to install on the website to claim it.
     - OAuth:
       - type: oauth2
       - name: pinterest_oauth2
     - OAuth:
       - type: oauth2
       - name: client_credentials
     - parameter adAccountId: (query) Unique identifier of an ad account. (optional)
     - returns: RequestBuilder<UserWebsiteVerificationCode> 
     */
    open class func websiteVerificationGetWithRequestBuilder(adAccountId: String? = nil) -> RequestBuilder<UserWebsiteVerificationCode> {
        let localVariablePath = "/user_account/websites/verification"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ad_account_id": (wrappedValue: adAccountId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserWebsiteVerificationCode>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
