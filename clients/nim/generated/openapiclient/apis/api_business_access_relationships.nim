#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_delete_partners_request
import ../models/model_delete_partners_response
import ../models/model_deleted_members_response
import ../models/model_error
import ../models/model_member_business_role
import ../models/model_members_to_delete_body
import ../models/model_partner_type
import ../models/model_update_member_business_role_body
import ../models/model_update_member_results_response_array
import ../models/model_get_business_employers_200_response
import ../models/model_get_business_members_200_response
import ../models/model_get_business_partners_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc deleteBusinessMembership*(httpClient: HttpClient, businessId: string, membersToDeleteBody: MembersToDeleteBody): (Option[DeletedMembersResponse], Response) =
  ## Terminate business memberships
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.delete(basepath & fmt"/businesses/{business_id}/members", $(%membersToDeleteBody))
  constructResult[DeletedMembersResponse](response)


proc deleteBusinessPartners*(httpClient: HttpClient, businessId: string, deletePartnersRequest: DeletePartnersRequest): (Option[DeletePartnersResponse], Response) =
  ## Terminate business partnerships
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.delete(basepath & fmt"/businesses/{business_id}/partners", $(%deletePartnersRequest))
  constructResult[DeletePartnersResponse](response)


proc getBusinessEmployers*(httpClient: HttpClient, pageSize: int, bookmark: string): (Option[get_business_employers_200_response], Response) =
  ## List business employers for user
  let query_for_api_call = encodeQuery([
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & "/businesses/employers" & "?" & query_for_api_call)
  constructResult[get_business_employers_200_response](response)


proc getBusinessMembers*(httpClient: HttpClient, businessId: string, assetsSummary: bool, businessRoles: seq[MemberBusinessRole], memberIds: string, startIndex: int, bookmark: string, pageSize: int): (Option[get_business_members_200_response], Response) =
  ## Get business members
  let query_for_api_call = encodeQuery([
    ("assets_summary", $assetsSummary), # Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
    ("business_roles", $businessRoles.join(",")), # A list of business roles to filter the members by. Only members whose roles are in the specified roles will be returned.
    ("member_ids", $memberIds), # A list of business members ids separated by comma.
    ("start_index", $startIndex), # An index to start fetching the results from. Only the results starting from this index will be returned.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & fmt"/businesses/{business_id}/members" & "?" & query_for_api_call)
  constructResult[get_business_members_200_response](response)


proc getBusinessPartners*(httpClient: HttpClient, businessId: string, assetsSummary: bool, partnerType: PartnerType, partnerIds: string, startIndex: int, pageSize: int, bookmark: string): (Option[get_business_partners_200_response], Response) =
  ## Get business partners
  let query_for_api_call = encodeQuery([
    ("assets_summary", $assetsSummary), # Include assets summary in the response if this is true.  The assets summary returns a dictionary representing a summary of the assets for the business user ID, with information like the ad accounts and profiles the user has permissions for and what those permissions are
    ("partner_type", $partnerType), # Specifies whether to fetch internal or external (shared) partners. If partner_type=INTERNAL, the asset being queried is for accesses the partner has to your business assets.<br> If partner_type=EXTERNAL, the asset being queried is for the accesses you have to the partner's business asset.
    ("partner_ids", $partnerIds), # A list of business partner ids separated by commas used to filter the results. Only partners with the specified ids will be returned.
    ("start_index", $startIndex), # An index to start fetching the results from. Only the results starting from this index will be returned.
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & fmt"/businesses/{business_id}/partners" & "?" & query_for_api_call)
  constructResult[get_business_partners_200_response](response)


proc updateBusinessMemberships*(httpClient: HttpClient, businessId: string, updateMemberBusinessRoleBody: seq[UpdateMemberBusinessRoleBody]): (Option[UpdateMemberResultsResponseArray], Response) =
  ## Update member's business role
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & fmt"/businesses/{business_id}/members", $(%updateMemberBusinessRoleBody))
  constructResult[UpdateMemberResultsResponseArray](response)

