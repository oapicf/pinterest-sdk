#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_detailed_error
import ../models/model_error
import ../models/model_integration_logs_request
import ../models/model_integration_logs_success_response
import ../models/model_integration_metadata
import ../models/model_integration_record
import ../models/model_integration_request
import ../models/model_integration_request_patch
import ../models/model_integrations_get_list_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc integrationsCommerceDel*(httpClient: HttpClient, externalBusinessId: string): Response =
  ## Delete commerce integration
  httpClient.delete(basepath & fmt"/integrations/commerce/{external_business_id}")


proc integrationsCommerceGet*(httpClient: HttpClient, externalBusinessId: string): (Option[IntegrationMetadata], Response) =
  ## Get commerce integration

  let response = httpClient.get(basepath & fmt"/integrations/commerce/{external_business_id}")
  constructResult[IntegrationMetadata](response)


proc integrationsCommercePatch*(httpClient: HttpClient, externalBusinessId: string, integrationRequestPatch: IntegrationRequestPatch): (Option[IntegrationMetadata], Response) =
  ## Update commerce integration
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & fmt"/integrations/commerce/{external_business_id}", $(%integrationRequestPatch))
  constructResult[IntegrationMetadata](response)


proc integrationsCommercePost*(httpClient: HttpClient, integrationRequest: IntegrationRequest): (Option[IntegrationMetadata], Response) =
  ## Create commerce integration
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/integrations/commerce", $(%integrationRequest))
  constructResult[IntegrationMetadata](response)


proc integrationsGetById*(httpClient: HttpClient, id: string): (Option[IntegrationRecord], Response) =
  ## Get integration metadata

  let response = httpClient.get(basepath & fmt"/integrations/{id}")
  constructResult[IntegrationRecord](response)


proc integrationsGetList*(httpClient: HttpClient, bookmark: string, pageSize: int): (Option[integrations_get_list_200_response], Response) =
  ## Get integration metadata list
  let query_for_api_call = encodeQuery([
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & "/integrations" & "?" & query_for_api_call)
  constructResult[integrations_get_list_200_response](response)


proc integrationsLogsPost*(httpClient: HttpClient, integrationLogsRequest: IntegrationLogsRequest): (Option[IntegrationLogsSuccessResponse], Response) =
  ## Receives batched logs from integration applications.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/integrations/logs", $(%integrationLogsRequest))
  constructResult[IntegrationLogsSuccessResponse](response)

