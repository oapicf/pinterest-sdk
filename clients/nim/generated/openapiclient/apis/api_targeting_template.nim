#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_targeting_template_create
import ../models/model_targeting_template_get_response_data
import ../models/model_targeting_template_update_request
import ../models/model_targeting_template_list_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc targetingTemplateCreate*(httpClient: HttpClient, adAccountId: string, targetingTemplateCreate: TargetingTemplateCreate): (Option[TargetingTemplateGetResponseData], Response) =
  ## Create targeting templates
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/ad_accounts/{ad_account_id}/targeting_templates", $(%targetingTemplateCreate))
  constructResult[TargetingTemplateGetResponseData](response)


proc targetingTemplateList*(httpClient: HttpClient, adAccountId: string, order: string, includeSizing: bool, searchQuery: string, pageSize: int, bookmark: string): (Option[targeting_template_list_200_response], Response) =
  ## List targeting templates
  let query_for_api_call = encodeQuery([
    ("order", $order), # The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
    ("include_sizing", $includeSizing), # Include audience sizing in result or not
    ("search_query", $searchQuery), # Search keyword for targeting templates
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/targeting_templates" & "?" & query_for_api_call)
  constructResult[targeting_template_list_200_response](response)


proc targetingTemplateUpdate*(httpClient: HttpClient, adAccountId: string, targetingTemplateUpdateRequest: TargetingTemplateUpdateRequest): Response =
  ## Update targeting templates
  httpClient.headers["Content-Type"] = "application/json"
  httpClient.patch(basepath & fmt"/ad_accounts/{ad_account_id}/targeting_templates", $(%targetingTemplateUpdateRequest))

