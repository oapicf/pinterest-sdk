#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_auth_respond_invites_body
import ../models/model_cancel_invites_body
import ../models/model_create_asset_access_request_body
import ../models/model_create_asset_access_request_response
import ../models/model_create_asset_invites_request
import ../models/model_create_invites_results_response_array
import ../models/model_create_membership_or_partnership_invites_body
import ../models/model_delete_invites_results_response_array
import ../models/model_error
import ../models/model_invite_type
import ../models/model_respond_to_invites_response_array
import ../models/model_update_invites_results_response_array
import ../models/model_get_invites_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc assetAccessRequestsCreate*(httpClient: HttpClient, businessId: string, createAssetAccessRequestBody: CreateAssetAccessRequestBody): (Option[CreateAssetAccessRequestResponse], Response) =
  ## Create a request to access an existing partner's assets.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{business_id}/requests/assets/access", $(%createAssetAccessRequestBody))
  constructResult[CreateAssetAccessRequestResponse](response)


proc cancelInvitesOrRequests*(httpClient: HttpClient, businessId: string, cancelInvitesBody: CancelInvitesBody): (Option[DeleteInvitesResultsResponseArray], Response) =
  ## Cancel invites/requests
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.delete(basepath & fmt"/businesses/{business_id}/invites", $(%cancelInvitesBody))
  constructResult[DeleteInvitesResultsResponseArray](response)


proc createAssetInvites*(httpClient: HttpClient, businessId: string, createAssetInvitesRequest: CreateAssetInvitesRequest): (Option[UpdateInvitesResultsResponseArray], Response) =
  ## Update invite/request with an asset permission
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{business_id}/invites/assets/access", $(%createAssetInvitesRequest))
  constructResult[UpdateInvitesResultsResponseArray](response)


proc createMembershipOrPartnershipInvites*(httpClient: HttpClient, businessId: string, createMembershipOrPartnershipInvitesBody: CreateMembershipOrPartnershipInvitesBody): (Option[CreateInvitesResultsResponseArray], Response) =
  ## Create invites or requests
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{business_id}/invites", $(%createMembershipOrPartnershipInvitesBody))
  constructResult[CreateInvitesResultsResponseArray](response)


proc getInvites*(httpClient: HttpClient, businessId: string, isMember: bool, inviteStatus: seq[InviteStatus], inviteType: InviteType, bookmark: string, pageSize: int): (Option[get_invites_200_response], Response) =
  ## Get invites/requests
  let query_for_api_call = encodeQuery([
    ("is_member", $isMember), # A boolean field to indicate whether the invite is to create a partnership or a membership.
    ("invite_status", $inviteStatus.join(",")), # A list of invite statuses to filter invites by. Only invites whose status is in the provided statuses will be returned.
    ("invite_type", $inviteType), # Invite type to filter invites by. Only invites of the specified type will be returned.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & fmt"/businesses/{business_id}/invites" & "?" & query_for_api_call)
  constructResult[get_invites_200_response](response)


proc respondBusinessAccessInvites*(httpClient: HttpClient, authRespondInvitesBody: AuthRespondInvitesBody): (Option[RespondToInvitesResponseArray], Response) =
  ## Accept or decline an invite/request
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & "/businesses/invites", $(%authRespondInvitesBody))
  constructResult[RespondToInvitesResponseArray](response)

