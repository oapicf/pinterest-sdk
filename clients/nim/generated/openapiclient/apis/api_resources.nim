#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_ad_accounts_country_response
import ../models/model_book_closed_response
import ../models/model_delivery_metrics_response
import ../models/model_error
import ../models/model_single_interest_targeting_option_response
import ../models/model_object

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc adAccountCountriesGet*(httpClient: HttpClient): (Option[AdAccountsCountryResponse], Response) =
  ## Get ad accounts countries

  let response = httpClient.get(basepath & "/resources/ad_account_countries")
  constructResult[AdAccountsCountryResponse](response)


proc deliveryMetricsGet*(httpClient: HttpClient, reportType: string): (Option[DeliveryMetricsResponse], Response) =
  ## Get available metrics' definitions
  let query_for_api_call = encodeQuery([
    ("report_type", $reportType), # Report type.
  ])

  let response = httpClient.get(basepath & "/resources/delivery_metrics" & "?" & query_for_api_call)
  constructResult[DeliveryMetricsResponse](response)


proc interestTargetingOptionsGet*(httpClient: HttpClient, interestId: string): (Option[SingleInterestTargetingOptionResponse], Response) =
  ## Get interest details

  let response = httpClient.get(basepath & fmt"/resources/targeting/interests/{interest_id}")
  constructResult[SingleInterestTargetingOptionResponse](response)


proc leadFormQuestionsGet*(httpClient: HttpClient): Response =
  ## Get lead form questions
  httpClient.get(basepath & "/resources/lead_form_questions")


proc metricsReadyStateGet*(httpClient: HttpClient, date: string): (Option[BookClosedResponse], Response) =
  ## Get metrics ready state
  let query_for_api_call = encodeQuery([
    ("date", $date), # Analytics reports request date (UTC). Format: YYYY-MM-DD
  ])

  let response = httpClient.get(basepath & "/resources/metrics_ready_state" & "?" & query_for_api_call)
  constructResult[BookClosedResponse](response)


proc targetingOptionsGet*(httpClient: HttpClient, targetingType: string, clientId: string, oauthSignature: string, timestamp: string, adAccountId: string): (Option[seq[object]], Response) =
  ## Get targeting options
  let query_for_api_call = encodeQuery([
    ("client_id", $clientId), # Client ID.
    ("oauth_signature", $oauthSignature), # Oauth signature
    ("timestamp", $timestamp), # Timestamp
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.get(basepath & fmt"/resources/targeting/{targeting_type}" & "?" & query_for_api_call)
  constructResult[seq[object]](response)

