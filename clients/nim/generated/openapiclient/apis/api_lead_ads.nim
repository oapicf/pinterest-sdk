#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_ad_account_create_subscription_request
import ../models/model_ad_account_create_subscription_response
import ../models/model_ad_account_get_subscription_response
import ../models/model_error
import ../models/model_ad_accounts_subscriptions_get_list_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc adAccountsSubscriptionsDelById*(httpClient: HttpClient, adAccountId: string, subscriptionId: string): Response =
  ## Delete lead ads subscription
  httpClient.delete(basepath & fmt"/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}")


proc adAccountsSubscriptionsGetById*(httpClient: HttpClient, adAccountId: string, subscriptionId: string): (Option[AdAccountGetSubscriptionResponse], Response) =
  ## Get lead ads subscription

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/leads/subscriptions/{subscription_id}")
  constructResult[AdAccountGetSubscriptionResponse](response)


proc adAccountsSubscriptionsGetList*(httpClient: HttpClient, adAccountId: string, pageSize: int, bookmark: string): (Option[ad_accounts_subscriptions_get_list_200_response], Response) =
  ## Get lead ads subscriptions
  let query_for_api_call = encodeQuery([
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/leads/subscriptions" & "?" & query_for_api_call)
  constructResult[ad_accounts_subscriptions_get_list_200_response](response)


proc adAccountsSubscriptionsPost*(httpClient: HttpClient, adAccountId: string, adAccountCreateSubscriptionRequest: AdAccountCreateSubscriptionRequest): (Option[AdAccountCreateSubscriptionResponse], Response) =
  ## Create lead ads subscription
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/ad_accounts/{ad_account_id}/leads/subscriptions", $(%adAccountCreateSubscriptionRequest))
  constructResult[AdAccountCreateSubscriptionResponse](response)

