#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_board
import ../models/model_board_section
import ../models/model_board_update
import ../models/model_error
import ../models/model_board_sections_list_200_response
import ../models/model_boards_list_200_response
import ../models/model_boards_list_pins_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc boardSectionsCreate*(httpClient: HttpClient, boardId: string, boardSection: BoardSection, adAccountId: string): (Option[BoardSection], Response) =
  ## Create board section
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.post(basepath & fmt"/boards/{board_id}/sections" & "?" & query_for_api_call, $(%boardSection))
  constructResult[BoardSection](response)


proc boardSectionsDelete*(httpClient: HttpClient, boardId: string, sectionId: string, adAccountId: string): Response =
  ## Delete board section
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])
  httpClient.delete(basepath & fmt"/boards/{board_id}/sections/{section_id}" & "?" & query_for_api_call)


proc boardSectionsList*(httpClient: HttpClient, boardId: string, adAccountId: string, bookmark: string, pageSize: int): (Option[board_sections_list_200_response], Response) =
  ## List board sections
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & fmt"/boards/{board_id}/sections" & "?" & query_for_api_call)
  constructResult[board_sections_list_200_response](response)


proc boardSectionsListPins*(httpClient: HttpClient, boardId: string, sectionId: string, adAccountId: string, bookmark: string, pageSize: int): (Option[boards_list_pins_200_response], Response) =
  ## List Pins on board section
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
  ])

  let response = httpClient.get(basepath & fmt"/boards/{board_id}/sections/{section_id}/pins" & "?" & query_for_api_call)
  constructResult[boards_list_pins_200_response](response)


proc boardSectionsUpdate*(httpClient: HttpClient, boardId: string, sectionId: string, boardSection: BoardSection, adAccountId: string): (Option[BoardSection], Response) =
  ## Update board section
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.patch(basepath & fmt"/boards/{board_id}/sections/{section_id}" & "?" & query_for_api_call, $(%boardSection))
  constructResult[BoardSection](response)


proc boardsCreate*(httpClient: HttpClient, board: Board, adAccountId: string): (Option[Board], Response) =
  ## Create board
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.post(basepath & "/boards" & "?" & query_for_api_call, $(%board))
  constructResult[Board](response)


proc boardsDelete*(httpClient: HttpClient, boardId: string, adAccountId: string): Response =
  ## Delete board
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])
  httpClient.delete(basepath & fmt"/boards/{board_id}" & "?" & query_for_api_call)


proc boardsGet*(httpClient: HttpClient, boardId: string, adAccountId: string): (Option[Board], Response) =
  ## Get board
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.get(basepath & fmt"/boards/{board_id}" & "?" & query_for_api_call)
  constructResult[Board](response)


proc boardsList*(httpClient: HttpClient, adAccountId: string, bookmark: string, pageSize: int, privacy: string): (Option[boards_list_200_response], Response) =
  ## List boards
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("privacy", $privacy), # Privacy setting for a board.
  ])

  let response = httpClient.get(basepath & "/boards" & "?" & query_for_api_call)
  constructResult[boards_list_200_response](response)


proc boardsListPins*(httpClient: HttpClient, boardId: string, bookmark: string, pageSize: int, creativeTypes: seq[CreativeTypes], adAccountId: string, pinMetrics: bool): (Option[boards_list_pins_200_response], Response) =
  ## List Pins on board
  let query_for_api_call = encodeQuery([
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("creative_types", $creativeTypes.join(",")), # Pin creative types filter. </p><strong>Note:</strong> SHOP_THE_PIN has been deprecated. Please use COLLECTION instead.
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
    ("pin_metrics", $pinMetrics), # Specify whether to return 90d and lifetime Pin metrics. Total comments and total reactions are only available with lifetime Pin metrics. If Pin was created before <code>2023-03-20</code> lifetime metrics will only be available for Video and Idea Pin formats. Lifetime metrics are available for all Pin formats since then.
  ])

  let response = httpClient.get(basepath & fmt"/boards/{board_id}/pins" & "?" & query_for_api_call)
  constructResult[boards_list_pins_200_response](response)


proc boardsUpdate*(httpClient: HttpClient, boardId: string, boardUpdate: BoardUpdate, adAccountId: string): (Option[Board], Response) =
  ## Update board
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("ad_account_id", $adAccountId), # Unique identifier of an ad account.
  ])

  let response = httpClient.patch(basepath & fmt"/boards/{board_id}" & "?" & query_for_api_call, $(%boardUpdate))
  constructResult[Board](response)

