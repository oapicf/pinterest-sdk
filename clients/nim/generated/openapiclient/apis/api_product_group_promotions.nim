#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_granularity
import ../models/model_product_group_analytics_response_inner
import ../models/model_product_group_promotion_create_request
import ../models/model_product_group_promotion_response
import ../models/model_product_group_promotion_update_request
import ../models/model_product_group_promotions_list_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc productGroupPromotionsCreate*(httpClient: HttpClient, adAccountId: string, productGroupPromotionCreateRequest: ProductGroupPromotionCreateRequest): (Option[ProductGroupPromotionResponse], Response) =
  ## Create product group promotions
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/ad_accounts/{ad_account_id}/product_group_promotions", $(%productGroupPromotionCreateRequest))
  constructResult[ProductGroupPromotionResponse](response)


proc productGroupPromotionsGet*(httpClient: HttpClient, adAccountId: string, productGroupPromotionId: string): (Option[ProductGroupPromotionResponse], Response) =
  ## Get a product group promotion by id

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/product_group_promotions/{product_group_promotion_id}")
  constructResult[ProductGroupPromotionResponse](response)


proc productGroupPromotionsList*(httpClient: HttpClient, adAccountId: string, productGroupPromotionIds: seq[string], entityStatuses: seq[EntityStatuses], adGroupId: string, pageSize: int, order: string, bookmark: string): (Option[product_group_promotions_list_200_response], Response) =
  ## Get product group promotions
  let query_for_api_call = encodeQuery([
    ("product_group_promotion_ids", $productGroupPromotionIds.join(",")), # List of Product group promotion Ids.
    ("entity_statuses", $entityStatuses.join(",")), # Entity status
    ("ad_group_id", $adGroupId), # Ad group Id.
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("order", $order), # The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/product_group_promotions" & "?" & query_for_api_call)
  constructResult[product_group_promotions_list_200_response](response)


proc productGroupPromotionsUpdate*(httpClient: HttpClient, adAccountId: string, productGroupPromotionUpdateRequest: ProductGroupPromotionUpdateRequest): (Option[ProductGroupPromotionResponse], Response) =
  ## Update product group promotions
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & fmt"/ad_accounts/{ad_account_id}/product_group_promotions", $(%productGroupPromotionUpdateRequest))
  constructResult[ProductGroupPromotionResponse](response)


proc productGroupsAnalytics*(httpClient: HttpClient, adAccountId: string, startDate: string, endDate: string, productGroupIds: seq[string], columns: seq[Columns], granularity: Granularity, clickWindowDays: ClickWindowDays, engagementWindowDays: EngagementWindowDays, viewWindowDays: ViewWindowDays, conversionReportTime: string): (Option[seq[ProductGroupAnalyticsResponse_inner]], Response) =
  ## Get product group analytics
  let query_for_api_call = encodeQuery([
    ("start_date", $startDate), # Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.
    ("end_date", $endDate), # Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.
    ("product_group_ids", $productGroupIds.join(",")), # List of Product group Ids to use to filter the results.
    ("columns", $columns.join(",")), # Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned
    ("granularity", $granularity), # TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
    ("click_window_days", $clickWindowDays), # Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    ("engagement_window_days", $engagementWindowDays), # Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
    ("view_window_days", $viewWindowDays), # Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
    ("conversion_report_time", $conversionReportTime), # The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/product_groups/analytics" & "?" & query_for_api_call)
  constructResult[seq[ProductGroupAnalyticsResponse_inner]](response)

