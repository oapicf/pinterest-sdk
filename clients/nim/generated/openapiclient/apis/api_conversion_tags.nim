#
# Pinterest REST API
# 
# Pinterest's REST API
# The version of the OpenAPI document: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_conversion_event_response
import ../models/model_conversion_tag_create
import ../models/model_conversion_tag_list_response
import ../models/model_conversion_tag_response
import ../models/model_error
import ../models/model_page_visit_conversion_tags_get_200_response

const basepath = "https://api.pinterest.com/v5"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc conversionTagsCreate*(httpClient: HttpClient, adAccountId: string, conversionTagCreate: ConversionTagCreate): (Option[ConversionTagResponse], Response) =
  ## Create conversion tag
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/ad_accounts/{ad_account_id}/conversion_tags", $(%conversionTagCreate))
  constructResult[ConversionTagResponse](response)


proc conversionTagsGet*(httpClient: HttpClient, adAccountId: string, conversionTagId: string): (Option[ConversionTagResponse], Response) =
  ## Get conversion tag

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/conversion_tags/{conversion_tag_id}")
  constructResult[ConversionTagResponse](response)


proc conversionTagsList*(httpClient: HttpClient, adAccountId: string, filterDeleted: bool): (Option[ConversionTagListResponse], Response) =
  ## Get conversion tags
  let query_for_api_call = encodeQuery([
    ("filter_deleted", $filterDeleted), # Filter out deleted tags.
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/conversion_tags" & "?" & query_for_api_call)
  constructResult[ConversionTagListResponse](response)


proc ocpmEligibleConversionTagsGet*(httpClient: HttpClient, adAccountId: string): (Option[Table[string, seq[ConversionEventResponse]]], Response) =
  ## Get Ocpm eligible conversion tags

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/conversion_tags/ocpm_eligible")
  constructResult[Table[string, seq[ConversionEventResponse]]](response)


proc pageVisitConversionTagsGet*(httpClient: HttpClient, adAccountId: string, pageSize: int, order: string, bookmark: string): (Option[page_visit_conversion_tags_get_200_response], Response) =
  ## Get page visit conversion tags
  let query_for_api_call = encodeQuery([
    ("page_size", $pageSize), # Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.
    ("order", $order), # The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.
    ("bookmark", $bookmark), # Cursor used to fetch the next page of items
  ])

  let response = httpClient.get(basepath & fmt"/ad_accounts/{ad_account_id}/conversion_tags/page_visit" & "?" & query_for_api_call)
  constructResult[page_visit_conversion_tags_get_200_response](response)

