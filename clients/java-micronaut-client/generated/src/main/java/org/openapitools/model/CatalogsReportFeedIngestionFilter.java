/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * CatalogsReportFeedIngestionFilter
 */
@JsonPropertyOrder({
  CatalogsReportFeedIngestionFilter.JSON_PROPERTY_REPORT_TYPE,
  CatalogsReportFeedIngestionFilter.JSON_PROPERTY_FEED_ID,
  CatalogsReportFeedIngestionFilter.JSON_PROPERTY_PROCESSING_RESULT_ID
})
@JsonTypeName("CatalogsReportFeedIngestionFilter")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class CatalogsReportFeedIngestionFilter {
    /**
     * Gets or Sets reportType
     */
    public enum ReportTypeEnum {
        FEED_INGESTION_ISSUES("FEED_INGESTION_ISSUES");

        private String value;

        ReportTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ReportTypeEnum fromValue(String value) {
            for (ReportTypeEnum b : ReportTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_REPORT_TYPE = "report_type";
    private ReportTypeEnum reportType;

    public static final String JSON_PROPERTY_FEED_ID = "feed_id";
    private String feedId;

    public static final String JSON_PROPERTY_PROCESSING_RESULT_ID = "processing_result_id";
    private String processingResultId;

    public CatalogsReportFeedIngestionFilter(ReportTypeEnum reportType, String feedId) {
        this.reportType = reportType;
        this.feedId = feedId;
    }

    public CatalogsReportFeedIngestionFilter reportType(ReportTypeEnum reportType) {
        this.reportType = reportType;
        return this;
    }

    /**
     * Get reportType
     * @return reportType
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_REPORT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ReportTypeEnum getReportType() {
        return reportType;
    }

    @JsonProperty(JSON_PROPERTY_REPORT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setReportType(ReportTypeEnum reportType) {
        this.reportType = reportType;
    }

    public CatalogsReportFeedIngestionFilter feedId(String feedId) {
        this.feedId = feedId;
        return this;
    }

    /**
     * ID of the feed entity.
     * @return feedId
     */
    @NotNull
    @Pattern(regexp="^\\d+$")
    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFeedId() {
        return feedId;
    }

    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFeedId(String feedId) {
        this.feedId = feedId;
    }

    public CatalogsReportFeedIngestionFilter processingResultId(String processingResultId) {
        this.processingResultId = processingResultId;
        return this;
    }

    /**
     * Unique identifier of a feed processing result. It can be acquired from the \&quot;id\&quot; field of the \&quot;items\&quot; array within the response of the [List processing results for a given feed](/docs/api/v5/#operation/feed_processing_results/list). If not provided, default to most recent completed processing result.
     * @return processingResultId
     */
    @Nullable
    @Pattern(regexp="^\\d+$")
    @JsonProperty(JSON_PROPERTY_PROCESSING_RESULT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProcessingResultId() {
        return processingResultId;
    }

    @JsonProperty(JSON_PROPERTY_PROCESSING_RESULT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessingResultId(String processingResultId) {
        this.processingResultId = processingResultId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsReportFeedIngestionFilter catalogsReportFeedIngestionFilter = (CatalogsReportFeedIngestionFilter) o;
        return Objects.equals(this.reportType, catalogsReportFeedIngestionFilter.reportType) &&
            Objects.equals(this.feedId, catalogsReportFeedIngestionFilter.feedId) &&
            Objects.equals(this.processingResultId, catalogsReportFeedIngestionFilter.processingResultId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(reportType, feedId, processingResultId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsReportFeedIngestionFilter {\n");
        sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
        sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
        sb.append("    processingResultId: ").append(toIndentedString(processingResultId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

