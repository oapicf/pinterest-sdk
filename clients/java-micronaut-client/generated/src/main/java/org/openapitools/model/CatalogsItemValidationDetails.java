/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.NullableCatalogsItemFieldType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * CatalogsItemValidationDetails
 */
@JsonPropertyOrder({
  CatalogsItemValidationDetails.JSON_PROPERTY_ATTRIBUTE_NAME,
  CatalogsItemValidationDetails.JSON_PROPERTY_PROVIDED_VALUE
})
@JsonTypeName("CatalogsItemValidationDetails")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class CatalogsItemValidationDetails {
    public static final String JSON_PROPERTY_ATTRIBUTE_NAME = "attribute_name";
    private NullableCatalogsItemFieldType attributeName;

    public static final String JSON_PROPERTY_PROVIDED_VALUE = "provided_value";
    private String providedValue;

    public CatalogsItemValidationDetails(NullableCatalogsItemFieldType attributeName, String providedValue) {
        this.attributeName = attributeName;
        this.providedValue = providedValue;
    }

    public CatalogsItemValidationDetails attributeName(NullableCatalogsItemFieldType attributeName) {
        this.attributeName = attributeName;
        return this;
    }

    /**
     * Get attributeName
     * @return attributeName
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NullableCatalogsItemFieldType getAttributeName() {
        return attributeName;
    }

    @JsonProperty(JSON_PROPERTY_ATTRIBUTE_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAttributeName(NullableCatalogsItemFieldType attributeName) {
        this.attributeName = attributeName;
    }

    public CatalogsItemValidationDetails providedValue(String providedValue) {
        this.providedValue = providedValue;
        return this;
    }

    /**
     * Provided value that caused the validation issue.
     * @return providedValue
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROVIDED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getProvidedValue() {
        return providedValue;
    }

    @JsonProperty(JSON_PROPERTY_PROVIDED_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setProvidedValue(String providedValue) {
        this.providedValue = providedValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsItemValidationDetails catalogsItemValidationDetails = (CatalogsItemValidationDetails) o;
        return Objects.equals(this.attributeName, catalogsItemValidationDetails.attributeName) &&
            Objects.equals(this.providedValue, catalogsItemValidationDetails.providedValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributeName, providedValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsItemValidationDetails {\n");
        sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
        sb.append("    providedValue: ").append(toIndentedString(providedValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

