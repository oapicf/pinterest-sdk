/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.CreativeAssetsVisibilityType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Creative assets product metadata entity
 */
@JsonPropertyOrder({
  CatalogsCreativeAssetsProductMetadata.JSON_PROPERTY_CREATIVE_ASSETS_ID,
  CatalogsCreativeAssetsProductMetadata.JSON_PROPERTY_VISIBILITY
})
@JsonTypeName("CatalogsCreativeAssetsProductMetadata")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class CatalogsCreativeAssetsProductMetadata {
    public static final String JSON_PROPERTY_CREATIVE_ASSETS_ID = "creative_assets_id";
    private String creativeAssetsId;

    public static final String JSON_PROPERTY_VISIBILITY = "visibility";
    private CreativeAssetsVisibilityType visibility;

    public CatalogsCreativeAssetsProductMetadata(String creativeAssetsId, CreativeAssetsVisibilityType visibility) {
        this.creativeAssetsId = creativeAssetsId;
        this.visibility = visibility;
    }

    public CatalogsCreativeAssetsProductMetadata creativeAssetsId(String creativeAssetsId) {
        this.creativeAssetsId = creativeAssetsId;
        return this;
    }

    /**
     * The user-created unique ID that represents the creative assets item.
     * @return creativeAssetsId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CREATIVE_ASSETS_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getCreativeAssetsId() {
        return creativeAssetsId;
    }

    @JsonProperty(JSON_PROPERTY_CREATIVE_ASSETS_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCreativeAssetsId(String creativeAssetsId) {
        this.creativeAssetsId = creativeAssetsId;
    }

    public CatalogsCreativeAssetsProductMetadata visibility(CreativeAssetsVisibilityType visibility) {
        this.visibility = visibility;
        return this;
    }

    /**
     * Get visibility
     * @return visibility
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_VISIBILITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CreativeAssetsVisibilityType getVisibility() {
        return visibility;
    }

    @JsonProperty(JSON_PROPERTY_VISIBILITY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setVisibility(CreativeAssetsVisibilityType visibility) {
        this.visibility = visibility;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsCreativeAssetsProductMetadata catalogsCreativeAssetsProductMetadata = (CatalogsCreativeAssetsProductMetadata) o;
        return Objects.equals(this.creativeAssetsId, catalogsCreativeAssetsProductMetadata.creativeAssetsId) &&
            Objects.equals(this.visibility, catalogsCreativeAssetsProductMetadata.visibility);
    }

    @Override
    public int hashCode() {
        return Objects.hash(creativeAssetsId, visibility);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsCreativeAssetsProductMetadata {\n");
        sb.append("    creativeAssetsId: ").append(toIndentedString(creativeAssetsId)).append("\n");
        sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

