/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TopPinsAnalyticsResponseDateAvailability
 */
@JsonPropertyOrder({
  TopPinsAnalyticsResponseDateAvailability.JSON_PROPERTY_LATEST_AVAILABLE_TIMESTAMP,
  TopPinsAnalyticsResponseDateAvailability.JSON_PROPERTY_IS_REALTIME
})
@JsonTypeName("TopPinsAnalyticsResponse_date_availability")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class TopPinsAnalyticsResponseDateAvailability {
    public static final String JSON_PROPERTY_LATEST_AVAILABLE_TIMESTAMP = "latest_available_timestamp";
    private BigDecimal latestAvailableTimestamp;

    public static final String JSON_PROPERTY_IS_REALTIME = "is_realtime";
    private Boolean isRealtime;

    public TopPinsAnalyticsResponseDateAvailability() {
    }

    public TopPinsAnalyticsResponseDateAvailability latestAvailableTimestamp(BigDecimal latestAvailableTimestamp) {
        this.latestAvailableTimestamp = latestAvailableTimestamp;
        return this;
    }

    /**
     * Get latestAvailableTimestamp
     * @return latestAvailableTimestamp
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_LATEST_AVAILABLE_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getLatestAvailableTimestamp() {
        return latestAvailableTimestamp;
    }

    @JsonProperty(JSON_PROPERTY_LATEST_AVAILABLE_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLatestAvailableTimestamp(BigDecimal latestAvailableTimestamp) {
        this.latestAvailableTimestamp = latestAvailableTimestamp;
    }

    public TopPinsAnalyticsResponseDateAvailability isRealtime(Boolean isRealtime) {
        this.isRealtime = isRealtime;
        return this;
    }

    /**
     * Get isRealtime
     * @return isRealtime
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_IS_REALTIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIsRealtime() {
        return isRealtime;
    }

    @JsonProperty(JSON_PROPERTY_IS_REALTIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsRealtime(Boolean isRealtime) {
        this.isRealtime = isRealtime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TopPinsAnalyticsResponseDateAvailability topPinsAnalyticsResponseDateAvailability = (TopPinsAnalyticsResponseDateAvailability) o;
        return Objects.equals(this.latestAvailableTimestamp, topPinsAnalyticsResponseDateAvailability.latestAvailableTimestamp) &&
            Objects.equals(this.isRealtime, topPinsAnalyticsResponseDateAvailability.isRealtime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(latestAvailableTimestamp, isRealtime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TopPinsAnalyticsResponseDateAvailability {\n");
        sb.append("    latestAvailableTimestamp: ").append(toIndentedString(latestAvailableTimestamp)).append("\n");
        sb.append("    isRealtime: ").append(toIndentedString(isRealtime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

