/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Product counts for a Retail CatalogsProductGroup
 */
@JsonPropertyOrder({
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_CATALOG_TYPE,
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_IN_STOCK,
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_OUT_OF_STOCK,
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_PREORDER,
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_TOTAL,
  CatalogsRetailProductGroupProductCounts.JSON_PROPERTY_VIDEOS
})
@JsonTypeName("CatalogsRetailProductGroupProductCounts")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class CatalogsRetailProductGroupProductCounts {
    /**
     * Gets or Sets catalogType
     */
    public enum CatalogTypeEnum {
        RETAIL("RETAIL");

        private String value;

        CatalogTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CatalogTypeEnum fromValue(String value) {
            for (CatalogTypeEnum b : CatalogTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CATALOG_TYPE = "catalog_type";
    private CatalogTypeEnum catalogType;

    public static final String JSON_PROPERTY_IN_STOCK = "in_stock";
    private BigDecimal inStock;

    public static final String JSON_PROPERTY_OUT_OF_STOCK = "out_of_stock";
    private BigDecimal outOfStock;

    public static final String JSON_PROPERTY_PREORDER = "preorder";
    private BigDecimal preorder;

    public static final String JSON_PROPERTY_TOTAL = "total";
    private BigDecimal total;

    public static final String JSON_PROPERTY_VIDEOS = "videos";
    private BigDecimal videos;

    public CatalogsRetailProductGroupProductCounts(CatalogTypeEnum catalogType, BigDecimal inStock, BigDecimal outOfStock, BigDecimal preorder, BigDecimal total) {
        this.catalogType = catalogType;
        this.inStock = inStock;
        this.outOfStock = outOfStock;
        this.preorder = preorder;
        this.total = total;
    }

    public CatalogsRetailProductGroupProductCounts catalogType(CatalogTypeEnum catalogType) {
        this.catalogType = catalogType;
        return this;
    }

    /**
     * Get catalogType
     * @return catalogType
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CATALOG_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CatalogTypeEnum getCatalogType() {
        return catalogType;
    }

    @JsonProperty(JSON_PROPERTY_CATALOG_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCatalogType(CatalogTypeEnum catalogType) {
        this.catalogType = catalogType;
    }

    public CatalogsRetailProductGroupProductCounts inStock(BigDecimal inStock) {
        this.inStock = inStock;
        return this;
    }

    /**
     * Get inStock
     * minimum: 0
     * @return inStock
     */
    @NotNull
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_IN_STOCK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getInStock() {
        return inStock;
    }

    @JsonProperty(JSON_PROPERTY_IN_STOCK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setInStock(BigDecimal inStock) {
        this.inStock = inStock;
    }

    public CatalogsRetailProductGroupProductCounts outOfStock(BigDecimal outOfStock) {
        this.outOfStock = outOfStock;
        return this;
    }

    /**
     * Get outOfStock
     * minimum: 0
     * @return outOfStock
     */
    @NotNull
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getOutOfStock() {
        return outOfStock;
    }

    @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOutOfStock(BigDecimal outOfStock) {
        this.outOfStock = outOfStock;
    }

    public CatalogsRetailProductGroupProductCounts preorder(BigDecimal preorder) {
        this.preorder = preorder;
        return this;
    }

    /**
     * Get preorder
     * minimum: 0
     * @return preorder
     */
    @NotNull
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_PREORDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getPreorder() {
        return preorder;
    }

    @JsonProperty(JSON_PROPERTY_PREORDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPreorder(BigDecimal preorder) {
        this.preorder = preorder;
    }

    public CatalogsRetailProductGroupProductCounts total(BigDecimal total) {
        this.total = total;
        return this;
    }

    /**
     * Get total
     * minimum: 0
     * @return total
     */
    @NotNull
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotal(BigDecimal total) {
        this.total = total;
    }

    public CatalogsRetailProductGroupProductCounts videos(BigDecimal videos) {
        this.videos = videos;
        return this;
    }

    /**
     * Get videos
     * minimum: 0
     * @return videos
     */
    @Nullable
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_VIDEOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getVideos() {
        return videos;
    }

    @JsonProperty(JSON_PROPERTY_VIDEOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVideos(BigDecimal videos) {
        this.videos = videos;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsRetailProductGroupProductCounts catalogsRetailProductGroupProductCounts = (CatalogsRetailProductGroupProductCounts) o;
        return Objects.equals(this.catalogType, catalogsRetailProductGroupProductCounts.catalogType) &&
            Objects.equals(this.inStock, catalogsRetailProductGroupProductCounts.inStock) &&
            Objects.equals(this.outOfStock, catalogsRetailProductGroupProductCounts.outOfStock) &&
            Objects.equals(this.preorder, catalogsRetailProductGroupProductCounts.preorder) &&
            Objects.equals(this.total, catalogsRetailProductGroupProductCounts.total) &&
            Objects.equals(this.videos, catalogsRetailProductGroupProductCounts.videos);
    }

    @Override
    public int hashCode() {
        return Objects.hash(catalogType, inStock, outOfStock, preorder, total, videos);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsRetailProductGroupProductCounts {\n");
        sb.append("    catalogType: ").append(toIndentedString(catalogType)).append("\n");
        sb.append("    inStock: ").append(toIndentedString(inStock)).append("\n");
        sb.append("    outOfStock: ").append(toIndentedString(outOfStock)).append("\n");
        sb.append("    preorder: ").append(toIndentedString(preorder)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

