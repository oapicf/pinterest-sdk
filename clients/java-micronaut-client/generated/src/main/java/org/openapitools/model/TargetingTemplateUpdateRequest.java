/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TargetingTemplateUpdateRequest
 */
@JsonPropertyOrder({
  TargetingTemplateUpdateRequest.JSON_PROPERTY_OPERATION_TYPE,
  TargetingTemplateUpdateRequest.JSON_PROPERTY_ID
})
@JsonTypeName("TargetingTemplateUpdateRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class TargetingTemplateUpdateRequest {
    /**
     * Gets or Sets operationType
     */
    public enum OperationTypeEnum {
        REMOVE("REMOVE");

        private String value;

        OperationTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OperationTypeEnum fromValue(String value) {
            for (OperationTypeEnum b : OperationTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_OPERATION_TYPE = "operation_type";
    private OperationTypeEnum operationType;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public TargetingTemplateUpdateRequest(OperationTypeEnum operationType, String id) {
        this.operationType = operationType;
        this.id = id;
    }

    public TargetingTemplateUpdateRequest operationType(OperationTypeEnum operationType) {
        this.operationType = operationType;
        return this;
    }

    /**
     * Get operationType
     * @return operationType
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_OPERATION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OperationTypeEnum getOperationType() {
        return operationType;
    }

    @JsonProperty(JSON_PROPERTY_OPERATION_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperationType(OperationTypeEnum operationType) {
        this.operationType = operationType;
    }

    public TargetingTemplateUpdateRequest id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Targeting template ID
     * @return id
     */
    @NotNull
    @Pattern(regexp="^\\d+$")
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetingTemplateUpdateRequest targetingTemplateUpdateRequest = (TargetingTemplateUpdateRequest) o;
        return Objects.equals(this.operationType, targetingTemplateUpdateRequest.operationType) &&
            Objects.equals(this.id, targetingTemplateUpdateRequest.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(operationType, id);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TargetingTemplateUpdateRequest {\n");
        sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

