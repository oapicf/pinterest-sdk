/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * A request to exchange a refresh token for a new access token.
 */
@JsonPropertyOrder({
  OauthAccessTokenRequestRefresh.JSON_PROPERTY_GRANT_TYPE,
  OauthAccessTokenRequestRefresh.JSON_PROPERTY_REFRESH_TOKEN,
  OauthAccessTokenRequestRefresh.JSON_PROPERTY_SCOPE,
  OauthAccessTokenRequestRefresh.JSON_PROPERTY_REFRESH_ON
})
@JsonTypeName("OauthAccessTokenRequestRefresh")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class OauthAccessTokenRequestRefresh {
    /**
     * Gets or Sets grantType
     */
    public enum GrantTypeEnum {
        AUTHORIZATION_CODE("authorization_code"),
        REFRESH_TOKEN("refresh_token"),
        CLIENT_CREDENTIALS("client_credentials");

        private String value;

        GrantTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static GrantTypeEnum fromValue(String value) {
            for (GrantTypeEnum b : GrantTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_GRANT_TYPE = "grant_type";
    private GrantTypeEnum grantType;

    public static final String JSON_PROPERTY_REFRESH_TOKEN = "refresh_token";
    private String refreshToken;

    public static final String JSON_PROPERTY_SCOPE = "scope";
    private String scope;

    public static final String JSON_PROPERTY_REFRESH_ON = "refresh_on";
    private Boolean refreshOn;

    public OauthAccessTokenRequestRefresh(GrantTypeEnum grantType, String refreshToken) {
        this.grantType = grantType;
        this.refreshToken = refreshToken;
    }

    public OauthAccessTokenRequestRefresh grantType(GrantTypeEnum grantType) {
        this.grantType = grantType;
        return this;
    }

    /**
     * Get grantType
     * @return grantType
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_GRANT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public GrantTypeEnum getGrantType() {
        return grantType;
    }

    @JsonProperty(JSON_PROPERTY_GRANT_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setGrantType(GrantTypeEnum grantType) {
        this.grantType = grantType;
    }

    public OauthAccessTokenRequestRefresh refreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Get refreshToken
     * @return refreshToken
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getRefreshToken() {
        return refreshToken;
    }

    @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    public OauthAccessTokenRequestRefresh scope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     * @return scope
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getScope() {
        return scope;
    }

    @JsonProperty(JSON_PROPERTY_SCOPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setScope(String scope) {
        this.scope = scope;
    }

    public OauthAccessTokenRequestRefresh refreshOn(Boolean refreshOn) {
        this.refreshOn = refreshOn;
        return this;
    }

    /**
     * Setting this field to &lt;code&gt;true&lt;/code&gt; will add a new refresh token to your 200 response, as well as the refresh_token_expires_in and refresh_token_expires_at fields. To see the structure of this payload, set the 200 response_type to \&quot;everlasting_refresh\&quot;.
     * @return refreshOn
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_REFRESH_ON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getRefreshOn() {
        return refreshOn;
    }

    @JsonProperty(JSON_PROPERTY_REFRESH_ON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRefreshOn(Boolean refreshOn) {
        this.refreshOn = refreshOn;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OauthAccessTokenRequestRefresh oauthAccessTokenRequestRefresh = (OauthAccessTokenRequestRefresh) o;
        return Objects.equals(this.grantType, oauthAccessTokenRequestRefresh.grantType) &&
            Objects.equals(this.refreshToken, oauthAccessTokenRequestRefresh.refreshToken) &&
            Objects.equals(this.scope, oauthAccessTokenRequestRefresh.scope) &&
            Objects.equals(this.refreshOn, oauthAccessTokenRequestRefresh.refreshOn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(grantType, refreshToken, scope, refreshOn);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OauthAccessTokenRequestRefresh {\n");
        sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
        sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    refreshOn: ").append(toIndentedString(refreshOn)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

