/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import org.openapitools.model.DetailedError;
import org.openapitools.model.Error;
import org.openapitools.model.IntegrationLogsRequest;
import org.openapitools.model.IntegrationLogsSuccessResponse;
import org.openapitools.model.IntegrationMetadata;
import org.openapitools.model.IntegrationRecord;
import org.openapitools.model.IntegrationRequest;
import org.openapitools.model.IntegrationRequestPatch;
import org.openapitools.model.IntegrationsGetList200Response;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Client("${openapi-micronaut-client-base-path}")
public interface IntegrationsApi {
    /**
     * Delete commerce integration
     * Delete commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param externalBusinessId External business ID for the integration. (required)
     */
    @Delete(uri="/integrations/commerce/{external_business_id}")
    @Consumes({"application/json"})
    Mono<Void> integrationsCommerceDel(
        @PathVariable(name="external_business_id") @NotNull String externalBusinessId
    );

    /**
     * Get commerce integration
     * Get commerce integration metadata associated with the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param externalBusinessId External business ID for the integration. (required)
     * @return IntegrationMetadata
     */
    @Get(uri="/integrations/commerce/{external_business_id}")
    @Consumes({"application/json"})
    Mono<IntegrationMetadata> integrationsCommerceGet(
        @PathVariable(name="external_business_id") @NotNull String externalBusinessId
    );

    /**
     * Update commerce integration
     * Update commerce integration metadata for the given external business ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param externalBusinessId External business ID for the integration. (required)
     * @param integrationRequestPatch Parameters to get create/update the Integration Metadata (optional)
     * @return IntegrationMetadata
     */
    @Patch(uri="/integrations/commerce/{external_business_id}")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<IntegrationMetadata> integrationsCommercePatch(
        @PathVariable(name="external_business_id") @NotNull String externalBusinessId, 
        @Body @Nullable @Valid IntegrationRequestPatch integrationRequestPatch
    );

    /**
     * Create commerce integration
     * Create commerce integration metadata to link an external business ID with a Pinterest merchant &amp; ad account. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param integrationRequest Parameters to get create/update the Integration Metadata (optional)
     * @return IntegrationMetadata
     */
    @Post(uri="/integrations/commerce")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<IntegrationMetadata> integrationsCommercePost(
        @Body @Nullable @Valid IntegrationRequest integrationRequest
    );

    /**
     * Get integration metadata
     * Get integration metadata by ID. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param id Integration ID. (required)
     * @return IntegrationRecord
     */
    @Get(uri="/integrations/{id}")
    @Consumes({"application/json"})
    Mono<IntegrationRecord> integrationsGetById(
        @PathVariable(name="id") @NotNull String id
    );

    /**
     * Get integration metadata list
     * Get integration metadata list. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param bookmark Cursor used to fetch the next page of items (optional)
     * @param pageSize Maximum number of items to include in a single page of the response. See documentation on &lt;a href&#x3D;&#39;/docs/reference/pagination/&#39;&gt;Pagination&lt;/a&gt; for more information. (optional, default to 25)
     * @return IntegrationsGetList200Response
     */
    @Get(uri="/integrations")
    @Consumes({"application/json"})
    Mono<IntegrationsGetList200Response> integrationsGetList(
        @QueryValue(value="bookmark") @Nullable String bookmark, 
        @QueryValue(value="page_size", defaultValue="25") @Nullable @Min(1) @Max(250) Integer pageSize
    );

    /**
     * Receives batched logs from integration applications.
     * This endpoint receives batched logs from integration applications on partner platforms. Note: If you&#39;re interested in joining the beta, please reach out to your Pinterest account manager.
     *
     * @param integrationLogsRequest Ingest log information from external integration application. (required)
     * @return IntegrationLogsSuccessResponse
     */
    @Post(uri="/integrations/logs")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    Mono<IntegrationLogsSuccessResponse> integrationsLogsPost(
        @Body @NotNull @Valid IntegrationLogsRequest integrationLogsRequest
    );

}
