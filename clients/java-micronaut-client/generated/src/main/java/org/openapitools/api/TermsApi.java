/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.api;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.*;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.core.convert.format.Format;
import reactor.core.publisher.Mono;
import org.openapitools.model.Error;
import org.openapitools.model.RelatedTerms;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Client("${openapi-micronaut-client-base-path}")
public interface TermsApi {
    /**
     * List related terms
     * Get a list of terms logically related to each input term. &lt;p/&gt; Example: the term &#39;workout&#39; would list related terms like &#39;one song workout&#39;, &#39;yoga workout&#39;, &#39;workout motivation&#39;, etc.
     *
     * @param terms List of input terms. (required)
     * @return RelatedTerms
     */
    @Get(uri="/terms/related")
    @Consumes({"application/json"})
    Mono<RelatedTerms> termsRelatedList(
        @QueryValue(value="terms") @NotNull List<String> terms
    );

    /**
     * List suggested terms
     * Get popular search terms that begin with your input term. &lt;p/&gt; Example: &#39;sport&#39; would return popular terms like &#39;sports bar&#39; and &#39;sportswear&#39;, but not &#39;motor sports&#39; since the phrase does not begin with the given term.
     *
     * @param term Input term. (required)
     * @param limit Max suggested terms to return. (optional, default to 4)
     * @return List&lt;String&gt;
     */
    @Get(uri="/terms/suggested")
    @Consumes({"application/json"})
    Mono<List<String>> termsSuggestedList(
        @QueryValue(value="term") @NotNull String term, 
        @QueryValue(value="limit", defaultValue="4") @Nullable @Min(1) @Max(10) Integer limit
    );

}
