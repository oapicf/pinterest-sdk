/*
 * Pinterest REST API
 * Pinterest's REST API
 *
 * The version of the OpenAPI document: 5.14.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.math.BigDecimal;
import org.openapitools.model.NonNullableCatalogsCurrency;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * CatalogsProductGroupPricingCurrencyCriteria
 */
@JsonPropertyOrder({
  CatalogsProductGroupPricingCurrencyCriteria.JSON_PROPERTY_OPERATOR,
  CatalogsProductGroupPricingCurrencyCriteria.JSON_PROPERTY_VALUE,
  CatalogsProductGroupPricingCurrencyCriteria.JSON_PROPERTY_CURRENCY,
  CatalogsProductGroupPricingCurrencyCriteria.JSON_PROPERTY_NEGATED
})
@JsonTypeName("catalogs_product_group_pricing_currency_criteria")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-11-05T02:02:57.601423453Z[Etc/UTC]", comments = "Generator version: 7.9.0")
@Introspected
public class CatalogsProductGroupPricingCurrencyCriteria {
    /**
     * Gets or Sets operator
     */
    public enum OperatorEnum {
        GREATER_THAN("GREATER_THAN"),
        GREATER_THAN_OR_EQUALS("GREATER_THAN_OR_EQUALS"),
        LESS_THAN("LESS_THAN"),
        LESS_THAN_OR_EQUALS("LESS_THAN_OR_EQUALS");

        private String value;

        OperatorEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static OperatorEnum fromValue(String value) {
            for (OperatorEnum b : OperatorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_OPERATOR = "operator";
    private OperatorEnum operator;

    public static final String JSON_PROPERTY_VALUE = "value";
    private BigDecimal value;

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    private NonNullableCatalogsCurrency currency;

    public static final String JSON_PROPERTY_NEGATED = "negated";
    private Boolean negated = false;

    public CatalogsProductGroupPricingCurrencyCriteria(OperatorEnum operator, BigDecimal value, NonNullableCatalogsCurrency currency) {
        this.operator = operator;
        this.value = value;
        this.currency = currency;
    }

    public CatalogsProductGroupPricingCurrencyCriteria operator(OperatorEnum operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get operator
     * @return operator
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public OperatorEnum getOperator() {
        return operator;
    }

    @JsonProperty(JSON_PROPERTY_OPERATOR)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOperator(OperatorEnum operator) {
        this.operator = operator;
    }

    public CatalogsProductGroupPricingCurrencyCriteria value(BigDecimal value) {
        this.value = value;
        return this;
    }

    /**
     * Get value
     * minimum: 0
     * @return value
     */
    @NotNull
    @DecimalMin("0")
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getValue() {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setValue(BigDecimal value) {
        this.value = value;
    }

    public CatalogsProductGroupPricingCurrencyCriteria currency(NonNullableCatalogsCurrency currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     * @return currency
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public NonNullableCatalogsCurrency getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCurrency(NonNullableCatalogsCurrency currency) {
        this.currency = currency;
    }

    public CatalogsProductGroupPricingCurrencyCriteria negated(Boolean negated) {
        this.negated = negated;
        return this;
    }

    /**
     * Get negated
     * @return negated
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NEGATED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getNegated() {
        return negated;
    }

    @JsonProperty(JSON_PROPERTY_NEGATED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNegated(Boolean negated) {
        this.negated = negated;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CatalogsProductGroupPricingCurrencyCriteria catalogsProductGroupPricingCurrencyCriteria = (CatalogsProductGroupPricingCurrencyCriteria) o;
        return Objects.equals(this.operator, catalogsProductGroupPricingCurrencyCriteria.operator) &&
            Objects.equals(this.value, catalogsProductGroupPricingCurrencyCriteria.value) &&
            Objects.equals(this.currency, catalogsProductGroupPricingCurrencyCriteria.currency) &&
            Objects.equals(this.negated, catalogsProductGroupPricingCurrencyCriteria.negated);
    }

    @Override
    public int hashCode() {
        return Objects.hash(operator, value, currency, negated);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CatalogsProductGroupPricingCurrencyCriteria {\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    negated: ").append(toIndentedString(negated)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

