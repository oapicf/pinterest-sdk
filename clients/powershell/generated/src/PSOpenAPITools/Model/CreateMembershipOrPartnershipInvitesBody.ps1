#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Body to be used on path to send Members or Partners Invite or Request

.PARAMETER BusinessRole
The business access level to grant member/partner. Note, values are case-sensitive. - EMPLOYEE: Can only view and access assets you assign them to. They cannot see details about other employees, partners, or other assets. - BIZ_ADMIN: Have full control of roles and can add employees and partners as well as grant asset access. - PARTNER: Can only view and access assets you assign them to/or they assign to you.
.PARAMETER InviteType
No description available.
.PARAMETER Members
A list of usernames, emails, or a mix of them. Should be used if invite_type is MEMBER_INVITE
.PARAMETER Partners
A list of partner_id. Should be used if invite_type is PARTNER_INVITE or PARTNER_REQUEST
.OUTPUTS

CreateMembershipOrPartnershipInvitesBody<PSCustomObject>
#>

function Initialize-CreateMembershipOrPartnershipInvitesBody {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EMPLOYEE", "BIZ_ADMIN", "PARTNER")]
        [String]
        ${BusinessRole},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("MEMBER_INVITE", "PARTNER_INVITE", "PARTNER_REQUEST")]
        [PSCustomObject]
        ${InviteType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Members},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Partners}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateMembershipOrPartnershipInvitesBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $BusinessRole) {
            throw "invalid value for 'BusinessRole', 'BusinessRole' cannot be null."
        }

        if ($null -eq $InviteType) {
            throw "invalid value for 'InviteType', 'InviteType' cannot be null."
        }

        if (!$Members -and $Members.length -gt 50) {
            throw "invalid value for 'Members', number of items must be less than or equal to 50."
        }

        if (!$Members -and $Members.length -lt 1) {
            throw "invalid value for 'Members', number of items must be greater than or equal to 1."
        }

        if (!$Partners -and $Partners.length -gt 50) {
            throw "invalid value for 'Partners', number of items must be less than or equal to 50."
        }

        if (!$Partners -and $Partners.length -lt 1) {
            throw "invalid value for 'Partners', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "business_role" = ${BusinessRole}
            "invite_type" = ${InviteType}
            "members" = ${Members}
            "partners" = ${Partners}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateMembershipOrPartnershipInvitesBody<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateMembershipOrPartnershipInvitesBody<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateMembershipOrPartnershipInvitesBody<PSCustomObject>
#>
function ConvertFrom-JsonToCreateMembershipOrPartnershipInvitesBody {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateMembershipOrPartnershipInvitesBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateMembershipOrPartnershipInvitesBody
        $AllProperties = ("business_role", "invite_type", "members", "partners")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'business_role' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "business_role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'business_role' missing."
        } else {
            $BusinessRole = $JsonParameters.PSobject.Properties["business_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invite_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'invite_type' missing."
        } else {
            $InviteType = $JsonParameters.PSobject.Properties["invite_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partners"))) { #optional property not found
            $Partners = $null
        } else {
            $Partners = $JsonParameters.PSobject.Properties["partners"].value
        }

        $PSO = [PSCustomObject]@{
            "business_role" = ${BusinessRole}
            "invite_type" = ${InviteType}
            "members" = ${Members}
            "partners" = ${Partners}
        }

        return $PSO
    }

}

