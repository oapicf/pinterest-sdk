#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CatalogType
No description available.
.PARAMETER CreativeAssetsIds
No description available.
.PARAMETER CatalogId
Catalog id pertaining to the creative assets item. If not provided, default to oldest creative assets catalog
.OUTPUTS

CatalogsCreativeAssetsItemsPostFilter<PSCustomObject>
#>

function Initialize-CatalogsCreativeAssetsItemsPostFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREATIVE_ASSETS")]
        [String]
        ${CatalogType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CreativeAssetsIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${CatalogId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsCreativeAssetsItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CatalogType) {
            throw "invalid value for 'CatalogType', 'CatalogType' cannot be null."
        }

        if ($null -eq $CreativeAssetsIds) {
            throw "invalid value for 'CreativeAssetsIds', 'CreativeAssetsIds' cannot be null."
        }

        if ($CreativeAssetsIds.length -gt 1000) {
            throw "invalid value for 'CreativeAssetsIds', number of items must be less than or equal to 1000."
        }

        if ($CreativeAssetsIds.length -lt 1) {
            throw "invalid value for 'CreativeAssetsIds', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "creative_assets_ids" = ${CreativeAssetsIds}
            "catalog_id" = ${CatalogId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsCreativeAssetsItemsPostFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsCreativeAssetsItemsPostFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsCreativeAssetsItemsPostFilter<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsCreativeAssetsItemsPostFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsCreativeAssetsItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsCreativeAssetsItemsPostFilter
        $AllProperties = ("catalog_type", "creative_assets_ids", "catalog_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'catalog_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalog_type' missing."
        } else {
            $CatalogType = $JsonParameters.PSobject.Properties["catalog_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creative_assets_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'creative_assets_ids' missing."
        } else {
            $CreativeAssetsIds = $JsonParameters.PSobject.Properties["creative_assets_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_id"))) { #optional property not found
            $CatalogId = $null
        } else {
            $CatalogId = $JsonParameters.PSobject.Properties["catalog_id"].value
        }

        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "creative_assets_ids" = ${CreativeAssetsIds}
            "catalog_id" = ${CatalogId}
        }

        return $PSO
    }

}

