#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Audience interests and demographics.

.PARAMETER Categories
Category interest distribution
.PARAMETER Demographics
No description available.
.PARAMETER Type
No description available.
.PARAMETER Date
Generation date
.PARAMETER Size
Population count.
.PARAMETER SizeIsUpperBound
Indicates whether the audience size has been rounded up to the next highest upper boundary.
.OUTPUTS

AudienceInsightsResponse<PSCustomObject>
#>

function Initialize-AudienceInsightsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Categories},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Demographics},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("YOUR_TOTAL_AUDIENCE", "YOUR_ENGAGED_AUDIENCE", "PINTEREST_TOTAL_AUDIENCE")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d{4}-\d{2}-\d{2}$")]
        [String]
        ${Date},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SizeIsUpperBound}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AudienceInsightsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "categories" = ${Categories}
            "demographics" = ${Demographics}
            "type" = ${Type}
            "date" = ${Date}
            "size" = ${Size}
            "size_is_upper_bound" = ${SizeIsUpperBound}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AudienceInsightsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AudienceInsightsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AudienceInsightsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToAudienceInsightsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AudienceInsightsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AudienceInsightsResponse
        $AllProperties = ("categories", "demographics", "type", "date", "size", "size_is_upper_bound")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categories"))) { #optional property not found
            $Categories = $null
        } else {
            $Categories = $JsonParameters.PSobject.Properties["categories"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "demographics"))) { #optional property not found
            $Demographics = $null
        } else {
            $Demographics = $JsonParameters.PSobject.Properties["demographics"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size_is_upper_bound"))) { #optional property not found
            $SizeIsUpperBound = $null
        } else {
            $SizeIsUpperBound = $JsonParameters.PSobject.Properties["size_is_upper_bound"].value
        }

        $PSO = [PSCustomObject]@{
            "categories" = ${Categories}
            "demographics" = ${Demographics}
            "type" = ${Type}
            "date" = ${Date}
            "size" = ${Size}
            "size_is_upper_bound" = ${SizeIsUpperBound}
        }

        return $PSO
    }

}

