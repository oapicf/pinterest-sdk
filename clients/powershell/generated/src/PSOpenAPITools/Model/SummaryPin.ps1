#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Summarized pin information

.PARAMETER Media
No description available.
.PARAMETER AltText
No description available.
.PARAMETER Link
No description available.
.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.OUTPUTS

SummaryPin<PSCustomObject>
#>

function Initialize-SummaryPin {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Media},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AltText},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Link},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SummaryPin' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AltText -and $AltText.length -gt 500) {
            throw "invalid value for 'AltText', the character length must be smaller than or equal to 500."
        }

        if (!$Link -and $Link.length -gt 2048) {
            throw "invalid value for 'Link', the character length must be smaller than or equal to 2048."
        }


        $PSO = [PSCustomObject]@{
            "media" = ${Media}
            "alt_text" = ${AltText}
            "link" = ${Link}
            "title" = ${Title}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SummaryPin<PSCustomObject>

.DESCRIPTION

Convert from JSON to SummaryPin<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SummaryPin<PSCustomObject>
#>
function ConvertFrom-JsonToSummaryPin {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SummaryPin' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SummaryPin
        $AllProperties = ("media", "alt_text", "link", "title", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media"))) { #optional property not found
            $Media = $null
        } else {
            $Media = $JsonParameters.PSobject.Properties["media"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alt_text"))) { #optional property not found
            $AltText = $null
        } else {
            $AltText = $JsonParameters.PSobject.Properties["alt_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link"))) { #optional property not found
            $Link = $null
        } else {
            $Link = $JsonParameters.PSobject.Properties["link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "media" = ${Media}
            "alt_text" = ${AltText}
            "link" = ${Link}
            "title" = ${Title}
            "description" = ${Description}
        }

        return $PSO
    }

}

