#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CatalogType
No description available.
.PARAMETER ItemIds
No description available.
.PARAMETER CatalogId
Catalog id pertaining to the retail item. If not provided, default to oldest retail catalog
.OUTPUTS

CatalogsRetailItemsPostFilter<PSCustomObject>
#>

function Initialize-CatalogsRetailItemsPostFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RETAIL")]
        [String]
        ${CatalogType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ItemIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${CatalogId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsRetailItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CatalogType) {
            throw "invalid value for 'CatalogType', 'CatalogType' cannot be null."
        }

        if ($null -eq $ItemIds) {
            throw "invalid value for 'ItemIds', 'ItemIds' cannot be null."
        }

        if ($ItemIds.length -gt 1000) {
            throw "invalid value for 'ItemIds', number of items must be less than or equal to 1000."
        }

        if ($ItemIds.length -lt 1) {
            throw "invalid value for 'ItemIds', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "item_ids" = ${ItemIds}
            "catalog_id" = ${CatalogId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsRetailItemsPostFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsRetailItemsPostFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsRetailItemsPostFilter<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsRetailItemsPostFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsRetailItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsRetailItemsPostFilter
        $AllProperties = ("catalog_type", "item_ids", "catalog_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'catalog_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalog_type' missing."
        } else {
            $CatalogType = $JsonParameters.PSobject.Properties["catalog_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_ids' missing."
        } else {
            $ItemIds = $JsonParameters.PSobject.Properties["item_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_id"))) { #optional property not found
            $CatalogId = $null
        } else {
            $CatalogId = $JsonParameters.PSobject.Properties["catalog_id"].value
        }

        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "item_ids" = ${ItemIds}
            "catalog_id" = ${CatalogId}
        }

        return $PSO
    }

}

