#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Ad group name.
.PARAMETER Status
Ad group/entity status.
.PARAMETER BudgetInMicroCurrency
Budget in micro currency. This field is **REQUIRED** for non-CBO (campaign budget optimization) campaigns.  A CBO campaign automatically generates ad group budgets from its campaign budget to maximize campaign outcome. A CBO campaign is limited to 70 or less ad groups.
.PARAMETER BidInMicroCurrency
Bid price in micro currency. This field is **REQUIRED** for the following campaign objective_type/billable_event combinations: AWARENESS/IMPRESSION, CONSIDERATION/CLICKTHROUGH, CATALOG_SALES/CLICKTHROUGH, VIDEO_VIEW/VIDEO_V_50_MRC.
.PARAMETER OptimizationGoalMetadata
Optimization goals for objective-based performance campaigns. **REQUIRED** when campaign's `objective_type` is set to `""WEB_CONVERSION""`.
.PARAMETER BudgetType
No description available.
.PARAMETER StartTime
Ad group start time. Unix timestamp in seconds. Defaults to current time.
.PARAMETER EndTime
Ad group end time. Unix timestamp in seconds.
.PARAMETER TargetingSpec
No description available.
.PARAMETER LifetimeFrequencyCap
Set a limit to the number of times a promoted pin from this campaign can be impressed by a pinner within the past rolling 30 days. Only available for CPM (cost per mille (1000 impressions))  ad groups. A CPM ad group has an IMPRESSION <a href=""/docs/redoc/#section/Billable-event"">billable_event</a> value. This field **REQUIRES** the `end_time` field.
.PARAMETER TrackingUrls
Third-party tracking URLs.<br> JSON object with the format: {""<a href=""/docs/redoc/#section/Tracking-URL-event"">Tracking event enum</a>"":[URL string array],...}<br> For example: {""impression"": [""URL1"", ""URL2""], ""click"": [""URL1"", ""URL2"", ""URL3""]}.<br>Up to three tracking URLs are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. May be null. Pass in an empty object - {} - to remove tracking URLs.<br><br> For more information, see <a href=""https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking"" target=""_blank"">Third-party and dynamic tracking</a>.
.PARAMETER AutoTargetingEnabled
Enable auto-targeting for ad group. Also known as <a href=""https://help.pinterest.com/en/business/article/expanded-targeting"" target=""_blank"">""expanded targeting""</a>.
.PARAMETER PlacementGroup
<a href=""/docs/redoc/#section/Placement-group"">Placement group</a>.
.PARAMETER PacingDeliveryType
No description available.
.PARAMETER CampaignId
Campaign ID of the ad group.
.PARAMETER BillableEvent
No description available.
.PARAMETER BidStrategyType
Bid strategy type. For Campaigns with Video Completion objectives, the only supported bid strategy type is AUTOMATIC_BID.
.PARAMETER TargetingTemplateIds
Targeting template IDs applied to the ad group. We currently only support 1 targeting template per ad group. To use targeting templates, do not set any other targeting fields: targeting_spec, tracking_urls, auto_targeting_enabled, placement_group. To clear all targeting template IDs, set this field to ['0'].
.OUTPUTS

AdGroupCommon<PSCustomObject>
#>

function Initialize-AdGroupCommon {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "PAUSED", "ARCHIVED", "DRAFT", "DELETED_DRAFT")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BudgetInMicroCurrency},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BidInMicroCurrency},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OptimizationGoalMetadata},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DAILY", "LIFETIME", "CBO_ADGROUP")]
        [PSCustomObject]
        ${BudgetType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EndTime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TargetingSpec},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LifetimeFrequencyCap},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TrackingUrls},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoTargetingEnabled},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALL", "SEARCH", "BROWSE", "OTHER")]
        [PSCustomObject]
        ${PlacementGroup},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STANDARD", "ACCELERATED")]
        [PSCustomObject]
        ${PacingDeliveryType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[C]?\d+$")]
        [String]
        ${CampaignId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CLICKTHROUGH", "IMPRESSION", "VIDEO_V_50_MRC")]
        [PSCustomObject]
        ${BillableEvent},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AUTOMATIC_BID", "MAX_BID", "TARGET_AVG", "")]
        [String]
        ${BidStrategyType},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${TargetingTemplateIds}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdGroupCommon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$TargetingTemplateIds -and $TargetingTemplateIds.length -gt 1) {
            throw "invalid value for 'TargetingTemplateIds', number of items must be less than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "status" = ${Status}
            "budget_in_micro_currency" = ${BudgetInMicroCurrency}
            "bid_in_micro_currency" = ${BidInMicroCurrency}
            "optimization_goal_metadata" = ${OptimizationGoalMetadata}
            "budget_type" = ${BudgetType}
            "start_time" = ${StartTime}
            "end_time" = ${EndTime}
            "targeting_spec" = ${TargetingSpec}
            "lifetime_frequency_cap" = ${LifetimeFrequencyCap}
            "tracking_urls" = ${TrackingUrls}
            "auto_targeting_enabled" = ${AutoTargetingEnabled}
            "placement_group" = ${PlacementGroup}
            "pacing_delivery_type" = ${PacingDeliveryType}
            "campaign_id" = ${CampaignId}
            "billable_event" = ${BillableEvent}
            "bid_strategy_type" = ${BidStrategyType}
            "targeting_template_ids" = ${TargetingTemplateIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdGroupCommon<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdGroupCommon<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdGroupCommon<PSCustomObject>
#>
function ConvertFrom-JsonToAdGroupCommon {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdGroupCommon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdGroupCommon
        $AllProperties = ("name", "status", "budget_in_micro_currency", "bid_in_micro_currency", "optimization_goal_metadata", "budget_type", "start_time", "end_time", "targeting_spec", "lifetime_frequency_cap", "tracking_urls", "auto_targeting_enabled", "placement_group", "pacing_delivery_type", "campaign_id", "billable_event", "bid_strategy_type", "targeting_template_ids")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "budget_in_micro_currency"))) { #optional property not found
            $BudgetInMicroCurrency = $null
        } else {
            $BudgetInMicroCurrency = $JsonParameters.PSobject.Properties["budget_in_micro_currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_in_micro_currency"))) { #optional property not found
            $BidInMicroCurrency = $null
        } else {
            $BidInMicroCurrency = $JsonParameters.PSobject.Properties["bid_in_micro_currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optimization_goal_metadata"))) { #optional property not found
            $OptimizationGoalMetadata = $null
        } else {
            $OptimizationGoalMetadata = $JsonParameters.PSobject.Properties["optimization_goal_metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "budget_type"))) { #optional property not found
            $BudgetType = $null
        } else {
            $BudgetType = $JsonParameters.PSobject.Properties["budget_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_time"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["start_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_time"))) { #optional property not found
            $EndTime = $null
        } else {
            $EndTime = $JsonParameters.PSobject.Properties["end_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targeting_spec"))) { #optional property not found
            $TargetingSpec = $null
        } else {
            $TargetingSpec = $JsonParameters.PSobject.Properties["targeting_spec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifetime_frequency_cap"))) { #optional property not found
            $LifetimeFrequencyCap = $null
        } else {
            $LifetimeFrequencyCap = $JsonParameters.PSobject.Properties["lifetime_frequency_cap"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tracking_urls"))) { #optional property not found
            $TrackingUrls = $null
        } else {
            $TrackingUrls = $JsonParameters.PSobject.Properties["tracking_urls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auto_targeting_enabled"))) { #optional property not found
            $AutoTargetingEnabled = $null
        } else {
            $AutoTargetingEnabled = $JsonParameters.PSobject.Properties["auto_targeting_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group"))) { #optional property not found
            $PlacementGroup = $null
        } else {
            $PlacementGroup = $JsonParameters.PSobject.Properties["placement_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pacing_delivery_type"))) { #optional property not found
            $PacingDeliveryType = $null
        } else {
            $PacingDeliveryType = $JsonParameters.PSobject.Properties["pacing_delivery_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaign_id"))) { #optional property not found
            $CampaignId = $null
        } else {
            $CampaignId = $JsonParameters.PSobject.Properties["campaign_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billable_event"))) { #optional property not found
            $BillableEvent = $null
        } else {
            $BillableEvent = $JsonParameters.PSobject.Properties["billable_event"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_strategy_type"))) { #optional property not found
            $BidStrategyType = $null
        } else {
            $BidStrategyType = $JsonParameters.PSobject.Properties["bid_strategy_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targeting_template_ids"))) { #optional property not found
            $TargetingTemplateIds = $null
        } else {
            $TargetingTemplateIds = $JsonParameters.PSobject.Properties["targeting_template_ids"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "status" = ${Status}
            "budget_in_micro_currency" = ${BudgetInMicroCurrency}
            "bid_in_micro_currency" = ${BidInMicroCurrency}
            "optimization_goal_metadata" = ${OptimizationGoalMetadata}
            "budget_type" = ${BudgetType}
            "start_time" = ${StartTime}
            "end_time" = ${EndTime}
            "targeting_spec" = ${TargetingSpec}
            "lifetime_frequency_cap" = ${LifetimeFrequencyCap}
            "tracking_urls" = ${TrackingUrls}
            "auto_targeting_enabled" = ${AutoTargetingEnabled}
            "placement_group" = ${PlacementGroup}
            "pacing_delivery_type" = ${PacingDeliveryType}
            "campaign_id" = ${CampaignId}
            "billable_event" = ${BillableEvent}
            "bid_strategy_type" = ${BidStrategyType}
            "targeting_template_ids" = ${TargetingTemplateIds}
        }

        return $PSO
    }

}

