#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Schema describing the object in the response, which contains information about the events that were received and processed.

.PARAMETER NumEventsReceived
Total number of events received in the request.
.PARAMETER NumEventsProcessed
Number of events that were successfully processed from the events.
.PARAMETER Events
Specific messages for each event received. The order will match the order in which the events were received in the request.
.OUTPUTS

ConversionApiResponse<PSCustomObject>
#>

function Initialize-ConversionApiResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${NumEventsReceived},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${NumEventsProcessed},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Events}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConversionApiResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $NumEventsReceived) {
            throw "invalid value for 'NumEventsReceived', 'NumEventsReceived' cannot be null."
        }

        if ($null -eq $NumEventsProcessed) {
            throw "invalid value for 'NumEventsProcessed', 'NumEventsProcessed' cannot be null."
        }

        if ($null -eq $Events) {
            throw "invalid value for 'Events', 'Events' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "num_events_received" = ${NumEventsReceived}
            "num_events_processed" = ${NumEventsProcessed}
            "events" = ${Events}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConversionApiResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConversionApiResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConversionApiResponse<PSCustomObject>
#>
function ConvertFrom-JsonToConversionApiResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConversionApiResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConversionApiResponse
        $AllProperties = ("num_events_received", "num_events_processed", "events")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'num_events_received' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_events_received"))) {
            throw "Error! JSON cannot be serialized due to the required property 'num_events_received' missing."
        } else {
            $NumEventsReceived = $JsonParameters.PSobject.Properties["num_events_received"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_events_processed"))) {
            throw "Error! JSON cannot be serialized due to the required property 'num_events_processed' missing."
        } else {
            $NumEventsProcessed = $JsonParameters.PSobject.Properties["num_events_processed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "events"))) {
            throw "Error! JSON cannot be serialized due to the required property 'events' missing."
        } else {
            $Events = $JsonParameters.PSobject.Properties["events"].value
        }

        $PSO = [PSCustomObject]@{
            "num_events_received" = ${NumEventsReceived}
            "num_events_processed" = ${NumEventsProcessed}
            "events" = ${Events}
        }

        return $PSO
    }

}

