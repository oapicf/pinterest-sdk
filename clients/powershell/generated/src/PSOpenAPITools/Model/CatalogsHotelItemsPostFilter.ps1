#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CatalogType
No description available.
.PARAMETER HotelIds
No description available.
.PARAMETER CatalogId
Catalog id pertaining to the hotel item. If not provided, default to oldest hotel catalog
.OUTPUTS

CatalogsHotelItemsPostFilter<PSCustomObject>
#>

function Initialize-CatalogsHotelItemsPostFilter {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("HOTEL")]
        [String]
        ${CatalogType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HotelIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${CatalogId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsHotelItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CatalogType) {
            throw "invalid value for 'CatalogType', 'CatalogType' cannot be null."
        }

        if ($null -eq $HotelIds) {
            throw "invalid value for 'HotelIds', 'HotelIds' cannot be null."
        }

        if ($HotelIds.length -gt 1000) {
            throw "invalid value for 'HotelIds', number of items must be less than or equal to 1000."
        }

        if ($HotelIds.length -lt 1) {
            throw "invalid value for 'HotelIds', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "hotel_ids" = ${HotelIds}
            "catalog_id" = ${CatalogId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsHotelItemsPostFilter<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsHotelItemsPostFilter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsHotelItemsPostFilter<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsHotelItemsPostFilter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsHotelItemsPostFilter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsHotelItemsPostFilter
        $AllProperties = ("catalog_type", "hotel_ids", "catalog_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'catalog_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalog_type' missing."
        } else {
            $CatalogType = $JsonParameters.PSobject.Properties["catalog_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hotel_ids"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hotel_ids' missing."
        } else {
            $HotelIds = $JsonParameters.PSobject.Properties["hotel_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_id"))) { #optional property not found
            $CatalogId = $null
        } else {
            $CatalogId = $JsonParameters.PSobject.Properties["catalog_id"].value
        }

        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "hotel_ids" = ${HotelIds}
            "catalog_id" = ${CatalogId}
        }

        return $PSO
    }

}

