#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AdAccountId
Ad account ID.
.PARAMETER Id
Audience ID.
.PARAMETER Name
Audience name.
.PARAMETER AudienceType
<a href=""/docs/reference/glossary/#Audience Types"">Audience types</a>: ACTALIKE, ENGAGEMENT, CUSTOMER_LIST and VISITOR
.PARAMETER Description
Audience description.
.PARAMETER Rule
No description available.
.PARAMETER Size
Audience size.
.PARAMETER Status
Audience status. READY, INITIALIZING, TOO_SMALL - Each audience list needs to have at least 100 people with Pinterest accounts before you can start using it.
.PARAMETER Type
Always ""audience"".
.PARAMETER CreatedTimestamp
Creation time. Unix timestamp in seconds.
.PARAMETER UpdatedTimestamp
Last update time. Unix timestamp in seconds.
.OUTPUTS

Audience<PSCustomObject>
#>

function Initialize-Audience {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${AdAccountId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AudienceType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rule},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CreatedTimestamp},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UpdatedTimestamp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Audience' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ad_account_id" = ${AdAccountId}
            "id" = ${Id}
            "name" = ${Name}
            "audience_type" = ${AudienceType}
            "description" = ${Description}
            "rule" = ${Rule}
            "size" = ${Size}
            "status" = ${Status}
            "type" = ${Type}
            "created_timestamp" = ${CreatedTimestamp}
            "updated_timestamp" = ${UpdatedTimestamp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Audience<PSCustomObject>

.DESCRIPTION

Convert from JSON to Audience<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Audience<PSCustomObject>
#>
function ConvertFrom-JsonToAudience {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Audience' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Audience
        $AllProperties = ("ad_account_id", "id", "name", "audience_type", "description", "rule", "size", "status", "type", "created_timestamp", "updated_timestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_account_id"))) { #optional property not found
            $AdAccountId = $null
        } else {
            $AdAccountId = $JsonParameters.PSobject.Properties["ad_account_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audience_type"))) { #optional property not found
            $AudienceType = $null
        } else {
            $AudienceType = $JsonParameters.PSobject.Properties["audience_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rule"))) { #optional property not found
            $Rule = $null
        } else {
            $Rule = $JsonParameters.PSobject.Properties["rule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_timestamp"))) { #optional property not found
            $CreatedTimestamp = $null
        } else {
            $CreatedTimestamp = $JsonParameters.PSobject.Properties["created_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_timestamp"))) { #optional property not found
            $UpdatedTimestamp = $null
        } else {
            $UpdatedTimestamp = $JsonParameters.PSobject.Properties["updated_timestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "ad_account_id" = ${AdAccountId}
            "id" = ${Id}
            "name" = ${Name}
            "audience_type" = ${AudienceType}
            "description" = ${Description}
            "rule" = ${Rule}
            "size" = ${Size}
            "status" = ${Status}
            "type" = ${Type}
            "created_timestamp" = ${CreatedTimestamp}
            "updated_timestamp" = ${UpdatedTimestamp}
        }

        return $PSO
    }

}

