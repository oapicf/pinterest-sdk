#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object describing an item bid option upsert operation

.PARAMETER ItemId
The catalog retail item id in the merchant namespace
.PARAMETER Country
No description available.
.PARAMETER Language
No description available.
.PARAMETER BidOptions
No description available.
.PARAMETER UpdateMask
The list of item bid option fields to be set or updated. Fields specified in the updated mask without a value specified in the `bid_options` object in the body will be set to `null`. If an item bid option record is being created, fields not specified in the update mask will be initialized to `null`.
.OUTPUTS

AdvancedAuctionItemsSubmitUpsertRecord<PSCustomObject>
#>

function Initialize-AdvancedAuctionItemsSubmitUpsertRecord {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW")]
        [PSCustomObject]
        ${Country},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AM", "AR", "AZ", "BG", "BN", "BS", "CA", "CS", "DA", "DV", "DZ", "DE", "EL", "EN", "ES", "ET", "FA", "FI", "FR", "HE", "HI", "HR", "HU", "HY", "ID", "IN", "IS", "IT", "IW", "JA", "KA", "KM", "KO", "LO", "LT", "LV", "MK", "MN", "MS", "MY", "NB", "NE", "NL", "NO", "PL", "PT", "RO", "RU", "SK", "SL", "SQ", "SR", "SV", "TL", "UK", "VI", "TE", "TH", "TR", "XX", "ZH")]
        [PSCustomObject]
        ${Language},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BidOptions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${UpdateMask}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdvancedAuctionItemsSubmitUpsertRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ItemId) {
            throw "invalid value for 'ItemId', 'ItemId' cannot be null."
        }

        if ($null -eq $Country) {
            throw "invalid value for 'Country', 'Country' cannot be null."
        }

        if ($null -eq $Language) {
            throw "invalid value for 'Language', 'Language' cannot be null."
        }

        if ($null -eq $BidOptions) {
            throw "invalid value for 'BidOptions', 'BidOptions' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "country" = ${Country}
            "language" = ${Language}
            "bid_options" = ${BidOptions}
            "update_mask" = ${UpdateMask}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdvancedAuctionItemsSubmitUpsertRecord<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdvancedAuctionItemsSubmitUpsertRecord<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdvancedAuctionItemsSubmitUpsertRecord<PSCustomObject>
#>
function ConvertFrom-JsonToAdvancedAuctionItemsSubmitUpsertRecord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdvancedAuctionItemsSubmitUpsertRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdvancedAuctionItemsSubmitUpsertRecord
        $AllProperties = ("item_id", "country", "language", "bid_options", "update_mask")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'item_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_id' missing."
        } else {
            $ItemId = $JsonParameters.PSobject.Properties["item_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) {
            throw "Error! JSON cannot be serialized due to the required property 'country' missing."
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "language"))) {
            throw "Error! JSON cannot be serialized due to the required property 'language' missing."
        } else {
            $Language = $JsonParameters.PSobject.Properties["language"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_options"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bid_options' missing."
        } else {
            $BidOptions = $JsonParameters.PSobject.Properties["bid_options"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_mask"))) {
            throw "Error! JSON cannot be serialized due to the required property 'update_mask' missing."
        } else {
            $UpdateMask = $JsonParameters.PSobject.Properties["update_mask"].value
        }

        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "country" = ${Country}
            "language" = ${Language}
            "bid_options" = ${BidOptions}
            "update_mask" = ${UpdateMask}
        }

        return $PSO
    }

}

