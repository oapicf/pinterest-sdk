#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

HTTP request details included in the log sent by the client.

.PARAMETER Method
No description available.
.PARAMETER VarHost
HTTP request host from host header.
.PARAMETER Path
HTTP request path.
.PARAMETER RequestHeaders
HTTP request headers as key-value pairs.
.PARAMETER ResponseHeaders
HTTP response headers as key-value pairs.
.PARAMETER ResponseStatusCode
No description available.
.OUTPUTS

IntegrationLogClientRequest<PSCustomObject>
#>

function Initialize-IntegrationLogClientRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("GET", "HEAD", "POST", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH")]
        [String]
        ${Method},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarHost},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${RequestHeaders},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${ResponseHeaders},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ResponseStatusCode}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IntegrationLogClientRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Method) {
            throw "invalid value for 'Method', 'Method' cannot be null."
        }

        if ($null -eq $VarHost) {
            throw "invalid value for 'VarHost', 'VarHost' cannot be null."
        }

        if ($null -eq $Path) {
            throw "invalid value for 'Path', 'Path' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "method" = ${Method}
            "host" = ${VarHost}
            "path" = ${Path}
            "request_headers" = ${RequestHeaders}
            "response_headers" = ${ResponseHeaders}
            "response_status_code" = ${ResponseStatusCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IntegrationLogClientRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to IntegrationLogClientRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IntegrationLogClientRequest<PSCustomObject>
#>
function ConvertFrom-JsonToIntegrationLogClientRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IntegrationLogClientRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntegrationLogClientRequest
        $AllProperties = ("method", "host", "path", "request_headers", "response_headers", "response_status_code")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'method' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "method"))) {
            throw "Error! JSON cannot be serialized due to the required property 'method' missing."
        } else {
            $Method = $JsonParameters.PSobject.Properties["method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host"))) {
            throw "Error! JSON cannot be serialized due to the required property 'host' missing."
        } else {
            $VarHost = $JsonParameters.PSobject.Properties["host"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) {
            throw "Error! JSON cannot be serialized due to the required property 'path' missing."
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request_headers"))) { #optional property not found
            $RequestHeaders = $null
        } else {
            $RequestHeaders = $JsonParameters.PSobject.Properties["request_headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_headers"))) { #optional property not found
            $ResponseHeaders = $null
        } else {
            $ResponseHeaders = $JsonParameters.PSobject.Properties["response_headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_status_code"))) { #optional property not found
            $ResponseStatusCode = $null
        } else {
            $ResponseStatusCode = $JsonParameters.PSobject.Properties["response_status_code"].value
        }

        $PSO = [PSCustomObject]@{
            "method" = ${Method}
            "host" = ${VarHost}
            "path" = ${Path}
            "request_headers" = ${RequestHeaders}
            "response_headers" = ${ResponseHeaders}
            "response_status_code" = ${ResponseStatusCode}
        }

        return $PSO
    }

}

