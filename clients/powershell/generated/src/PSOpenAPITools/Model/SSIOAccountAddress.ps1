#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Display
Address display
.PARAMETER Purpose
Purpose for which the address is used, usually Billing or Businness
.PARAMETER AddressId
Salesforce id for address
.PARAMETER OrderLegalEntity
Legal entity for this insertion order
.OUTPUTS

SSIOAccountAddress<PSCustomObject>
#>

function Initialize-SSIOAccountAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Purpose},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddressId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrderLegalEntity}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SSIOAccountAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "display" = ${Display}
            "purpose" = ${Purpose}
            "address_id" = ${AddressId}
            "order_legal_entity" = ${OrderLegalEntity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SSIOAccountAddress<PSCustomObject>

.DESCRIPTION

Convert from JSON to SSIOAccountAddress<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SSIOAccountAddress<PSCustomObject>
#>
function ConvertFrom-JsonToSSIOAccountAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SSIOAccountAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SSIOAccountAddress
        $AllProperties = ("display", "purpose", "address_id", "order_legal_entity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) { #optional property not found
            $Display = $null
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "purpose"))) { #optional property not found
            $Purpose = $null
        } else {
            $Purpose = $JsonParameters.PSobject.Properties["purpose"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address_id"))) { #optional property not found
            $AddressId = $null
        } else {
            $AddressId = $JsonParameters.PSobject.Properties["address_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order_legal_entity"))) { #optional property not found
            $OrderLegalEntity = $null
        } else {
            $OrderLegalEntity = $JsonParameters.PSobject.Properties["order_legal_entity"].value
        }

        $PSO = [PSCustomObject]@{
            "display" = ${Display}
            "purpose" = ${Purpose}
            "address_id" = ${AddressId}
            "order_legal_entity" = ${OrderLegalEntity}
        }

        return $PSO
    }

}

