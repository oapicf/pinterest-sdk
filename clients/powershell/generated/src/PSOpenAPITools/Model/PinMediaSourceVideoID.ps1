#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Video ID-based media source

.PARAMETER SourceType
No description available.
.PARAMETER CoverImageUrl
Cover image url.
.PARAMETER CoverImageContentType
Content type for cover image Base64.
.PARAMETER CoverImageData
Cover image Base64.
.PARAMETER MediaId
No description available.
.PARAMETER IsStandard
Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
.OUTPUTS

PinMediaSourceVideoID<PSCustomObject>
#>

function Initialize-PinMediaSourceVideoID {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("video_id")]
        [String]
        ${SourceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CoverImageUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("image/jpeg", "image/png")]
        [String]
        ${CoverImageContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CoverImageData},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${MediaId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsStandard} = $true
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PinMediaSourceVideoID' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SourceType) {
            throw "invalid value for 'SourceType', 'SourceType' cannot be null."
        }

        if ($null -eq $MediaId) {
            throw "invalid value for 'MediaId', 'MediaId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "source_type" = ${SourceType}
            "cover_image_url" = ${CoverImageUrl}
            "cover_image_content_type" = ${CoverImageContentType}
            "cover_image_data" = ${CoverImageData}
            "media_id" = ${MediaId}
            "is_standard" = ${IsStandard}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PinMediaSourceVideoID<PSCustomObject>

.DESCRIPTION

Convert from JSON to PinMediaSourceVideoID<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PinMediaSourceVideoID<PSCustomObject>
#>
function ConvertFrom-JsonToPinMediaSourceVideoID {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PinMediaSourceVideoID' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PinMediaSourceVideoID
        $AllProperties = ("source_type", "cover_image_url", "cover_image_content_type", "cover_image_data", "media_id", "is_standard")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'source_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source_type' missing."
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["source_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'media_id' missing."
        } else {
            $MediaId = $JsonParameters.PSobject.Properties["media_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cover_image_url"))) { #optional property not found
            $CoverImageUrl = $null
        } else {
            $CoverImageUrl = $JsonParameters.PSobject.Properties["cover_image_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cover_image_content_type"))) { #optional property not found
            $CoverImageContentType = $null
        } else {
            $CoverImageContentType = $JsonParameters.PSobject.Properties["cover_image_content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cover_image_data"))) { #optional property not found
            $CoverImageData = $null
        } else {
            $CoverImageData = $JsonParameters.PSobject.Properties["cover_image_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_standard"))) { #optional property not found
            $IsStandard = $null
        } else {
            $IsStandard = $JsonParameters.PSobject.Properties["is_standard"].value
        }

        $PSO = [PSCustomObject]@{
            "source_type" = ${SourceType}
            "cover_image_url" = ${CoverImageUrl}
            "cover_image_content_type" = ${CoverImageContentType}
            "cover_image_data" = ${CoverImageData}
            "media_id" = ${MediaId}
            "is_standard" = ${IsStandard}
        }

        return $PSO
    }

}

