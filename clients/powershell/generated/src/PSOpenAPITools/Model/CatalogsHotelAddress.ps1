#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Addr1
Primary street address of hotel.
.PARAMETER City
City where the hotel is located.
.PARAMETER Region
State, county, province, where the hotel is located.
.PARAMETER Country
Country where the hotel is located.
.PARAMETER PostalCode
Required for countries with a postal code system. Postal or zip code of the hotel.
.OUTPUTS

CatalogsHotelAddress<PSCustomObject>
#>

function Initialize-CatalogsHotelAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Addr1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Region},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostalCode}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsHotelAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "addr1" = ${Addr1}
            "city" = ${City}
            "region" = ${Region}
            "country" = ${Country}
            "postal_code" = ${PostalCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsHotelAddress<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsHotelAddress<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsHotelAddress<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsHotelAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsHotelAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsHotelAddress
        $AllProperties = ("addr1", "city", "region", "country", "postal_code")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addr1"))) { #optional property not found
            $Addr1 = $null
        } else {
            $Addr1 = $JsonParameters.PSobject.Properties["addr1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postal_code"))) { #optional property not found
            $PostalCode = $null
        } else {
            $PostalCode = $JsonParameters.PSobject.Properties["postal_code"].value
        }

        $PSO = [PSCustomObject]@{
            "addr1" = ${Addr1}
            "city" = ${City}
            "region" = ${Region}
            "country" = ${Country}
            "postal_code" = ${PostalCode}
        }

        return $PSO
    }

}

