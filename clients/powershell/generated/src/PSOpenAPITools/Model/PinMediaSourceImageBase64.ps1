#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Base64-encoded image media source

.PARAMETER SourceType
No description available.
.PARAMETER ContentType
No description available.
.PARAMETER VarData
No description available.
.PARAMETER IsStandard
Set the parameter to false to create the new simplified Pin instead of the standard pin. Currently the field is only available to a list of beta users.
.OUTPUTS

PinMediaSourceImageBase64<PSCustomObject>
#>

function Initialize-PinMediaSourceImageBase64 {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("image_base64")]
        [String]
        ${SourceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("image/jpeg", "image/png")]
        [String]
        ${ContentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("[a-zA-Z0-9+/=]+")]
        [String]
        ${VarData},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsStandard} = $true
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PinMediaSourceImageBase64' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $SourceType) {
            throw "invalid value for 'SourceType', 'SourceType' cannot be null."
        }

        if ($null -eq $ContentType) {
            throw "invalid value for 'ContentType', 'ContentType' cannot be null."
        }

        if ($null -eq $VarData) {
            throw "invalid value for 'VarData', 'VarData' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "source_type" = ${SourceType}
            "content_type" = ${ContentType}
            "data" = ${VarData}
            "is_standard" = ${IsStandard}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PinMediaSourceImageBase64<PSCustomObject>

.DESCRIPTION

Convert from JSON to PinMediaSourceImageBase64<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PinMediaSourceImageBase64<PSCustomObject>
#>
function ConvertFrom-JsonToPinMediaSourceImageBase64 {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PinMediaSourceImageBase64' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PinMediaSourceImageBase64
        $AllProperties = ("source_type", "content_type", "data", "is_standard")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'source_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source_type' missing."
        } else {
            $SourceType = $JsonParameters.PSobject.Properties["source_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_type' missing."
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data' missing."
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_standard"))) { #optional property not found
            $IsStandard = $null
        } else {
            $IsStandard = $JsonParameters.PSobject.Properties["is_standard"].value
        }

        $PSO = [PSCustomObject]@{
            "source_type" = ${SourceType}
            "content_type" = ${ContentType}
            "data" = ${VarData}
            "is_standard" = ${IsStandard}
        }

        return $PSO
    }

}

