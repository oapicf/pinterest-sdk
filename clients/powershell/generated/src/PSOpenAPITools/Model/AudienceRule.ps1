#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

JSON object defining targeted audience users. Example rule formats per audience type:<br>CUSTOMER_LIST: { ""customer_list_id"": ""&lt;customer list ID&gt;""}<br>ACTALIKE: { ""seed_id"": [""&lt;audience ID&gt;""], ""country"": ""US"", ""percentage"": ""10"" }<br>(Valid countries include: ""US"", ""CA"", and ""GB"". Percentage should be 1-10.<br>The targeted audience should be this % size across Pinterest.)<br>VISITOR: { ""visitor_source_id"": [""&lt;conversion tag ID&gt;""], ""retention_days"": ""180"", ""event_source"": {""="": [""web"", ""mobile""]}, ""ingestion_source"": {""="": [""tag""]}}<br>(Retention days should be 1-540. Retention applies to specific customers.)<br>ENGAGEMENT: {""engagement_domain"": [""www.entomi.com""], ""engager_type"": 1}<br>For more details on engagement audiences, see <a href=""/docs/redoc/adtech_ads_v4/#section/November-2021"" target=""_blank"">November 2021 changelog</a>.

.PARAMETER Country
Valid countries include: ""US"", ""CA"", and ""GB"".
.PARAMETER CustomerListId
Customer list ID. For CUSTOMER_LIST `audience_type`.
.PARAMETER EngagementDomain
The audience account's verified domain. **Required** for ENGAGEMENT `audience_type`.
.PARAMETER EngagementType
Engagement type enum. Optional for ENGAGEMENT `audience_type`. Supported values are `click`, `save`, `closeup`, `comment` and `like`. All engagements are included if this field is not set. 
.PARAMETER VarEvent
A Pinterest tag event. Optional for VISITOR `audience_type`. Possible values are `pagevisit`, `signup`, `checkout`, `viewcategory`, `search`, `addtocart`, `watchvideo`, `lead`, and `custom`. This field also accepts a partner-defined Pinterest tag event.
.PARAMETER EventData
No description available.
.PARAMETER Percentage
Percentage should be 1-10. The targeted audience should be this % size across Pinterest.
.PARAMETER PinId
IDs of engaged organic pins. Optional for ENGAGEMENT `audience_type`. For example, ""pin_id:"": [""34567""]
.PARAMETER Prefill
Optional for VISITOR `audience_type`. If `true`, the specified rule on existing engagement data is applied to pre-populate the audience. If `false`, the audience is empty at creation time. The default is `true`.
.PARAMETER RetentionDays
Number of days a Pinterest user remains in the audience. Optional for ENGAGEMENT and VISITOR `audience_type`. Accepted range is 1-540. Defaults to 180 if not specified.
.PARAMETER SeedId
Audience ID(s). For ACTALIKE `audience_type`. 
.PARAMETER Url
Optional for ENGAGEMENT or VISITOR `audience_type`. For ENGAGEMENT, it is the engaged pin's URL. For VISITOR, you can use it as a string or a {operator: value} object for filtering visitors based on conversion tag event URLs. Supported operators are [ =, !=, contains, not_contains].<br>Example 1:  ""url"": ""http://www.myonlinestore123.com/view_item/shoe""<br>Example 2: ""url"": {""contains"": ""/view_item/shoe""}
.PARAMETER VisitorSourceId
The conversion tag ID, or the Pinterest tag ID, that you use on your website. For VISITOR `audience_type`.
.PARAMETER EventSource
Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: web, mobile, offline
.PARAMETER IngestionSource
Optional for VISITOR. You can use it as a {'=': [value]}. Supported values are: tag, mmp, file_upload, conversions_api
.PARAMETER EngagerType
Optional for ENGAGEMENT. Engager type value should be 1-2.
.PARAMETER CampaignId
Campaign ID for engagement audience filter.
.PARAMETER AdId
Ad ID for engagement audience filter.
.PARAMETER ObjectiveType
Objective for engagement audience filter.
.PARAMETER AdAccountId
Ad account ID.
.OUTPUTS

AudienceRule<PSCustomObject>
#>

function Initialize-AudienceRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${CustomerListId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EngagementDomain},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EngagementType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarEvent},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EventData},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Percentage},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PinId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Prefill},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RetentionDays},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SeedId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Url},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${VisitorSourceId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EventSource},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IngestionSource},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EngagerType},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CampaignId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AdId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ObjectiveType},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${AdAccountId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AudienceRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "country" = ${Country}
            "customer_list_id" = ${CustomerListId}
            "engagement_domain" = ${EngagementDomain}
            "engagement_type" = ${EngagementType}
            "event" = ${VarEvent}
            "event_data" = ${EventData}
            "percentage" = ${Percentage}
            "pin_id" = ${PinId}
            "prefill" = ${Prefill}
            "retention_days" = ${RetentionDays}
            "seed_id" = ${SeedId}
            "url" = ${Url}
            "visitor_source_id" = ${VisitorSourceId}
            "event_source" = ${EventSource}
            "ingestion_source" = ${IngestionSource}
            "engager_type" = ${EngagerType}
            "campaign_id" = ${CampaignId}
            "ad_id" = ${AdId}
            "objective_type" = ${ObjectiveType}
            "ad_account_id" = ${AdAccountId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AudienceRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AudienceRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AudienceRule<PSCustomObject>
#>
function ConvertFrom-JsonToAudienceRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AudienceRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AudienceRule
        $AllProperties = ("country", "customer_list_id", "engagement_domain", "engagement_type", "event", "event_data", "percentage", "pin_id", "prefill", "retention_days", "seed_id", "url", "visitor_source_id", "event_source", "ingestion_source", "engager_type", "campaign_id", "ad_id", "objective_type", "ad_account_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customer_list_id"))) { #optional property not found
            $CustomerListId = $null
        } else {
            $CustomerListId = $JsonParameters.PSobject.Properties["customer_list_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "engagement_domain"))) { #optional property not found
            $EngagementDomain = $null
        } else {
            $EngagementDomain = $JsonParameters.PSobject.Properties["engagement_domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "engagement_type"))) { #optional property not found
            $EngagementType = $null
        } else {
            $EngagementType = $JsonParameters.PSobject.Properties["engagement_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event"))) { #optional property not found
            $VarEvent = $null
        } else {
            $VarEvent = $JsonParameters.PSobject.Properties["event"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_data"))) { #optional property not found
            $EventData = $null
        } else {
            $EventData = $JsonParameters.PSobject.Properties["event_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "percentage"))) { #optional property not found
            $Percentage = $null
        } else {
            $Percentage = $JsonParameters.PSobject.Properties["percentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pin_id"))) { #optional property not found
            $PinId = $null
        } else {
            $PinId = $JsonParameters.PSobject.Properties["pin_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefill"))) { #optional property not found
            $Prefill = $null
        } else {
            $Prefill = $JsonParameters.PSobject.Properties["prefill"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retention_days"))) { #optional property not found
            $RetentionDays = $null
        } else {
            $RetentionDays = $JsonParameters.PSobject.Properties["retention_days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seed_id"))) { #optional property not found
            $SeedId = $null
        } else {
            $SeedId = $JsonParameters.PSobject.Properties["seed_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitor_source_id"))) { #optional property not found
            $VisitorSourceId = $null
        } else {
            $VisitorSourceId = $JsonParameters.PSobject.Properties["visitor_source_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_source"))) { #optional property not found
            $EventSource = $null
        } else {
            $EventSource = $JsonParameters.PSobject.Properties["event_source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ingestion_source"))) { #optional property not found
            $IngestionSource = $null
        } else {
            $IngestionSource = $JsonParameters.PSobject.Properties["ingestion_source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "engager_type"))) { #optional property not found
            $EngagerType = $null
        } else {
            $EngagerType = $JsonParameters.PSobject.Properties["engager_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaign_id"))) { #optional property not found
            $CampaignId = $null
        } else {
            $CampaignId = $JsonParameters.PSobject.Properties["campaign_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_id"))) { #optional property not found
            $AdId = $null
        } else {
            $AdId = $JsonParameters.PSobject.Properties["ad_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objective_type"))) { #optional property not found
            $ObjectiveType = $null
        } else {
            $ObjectiveType = $JsonParameters.PSobject.Properties["objective_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_account_id"))) { #optional property not found
            $AdAccountId = $null
        } else {
            $AdAccountId = $JsonParameters.PSobject.Properties["ad_account_id"].value
        }

        $PSO = [PSCustomObject]@{
            "country" = ${Country}
            "customer_list_id" = ${CustomerListId}
            "engagement_domain" = ${EngagementDomain}
            "engagement_type" = ${EngagementType}
            "event" = ${VarEvent}
            "event_data" = ${EventData}
            "percentage" = ${Percentage}
            "pin_id" = ${PinId}
            "prefill" = ${Prefill}
            "retention_days" = ${RetentionDays}
            "seed_id" = ${SeedId}
            "url" = ${Url}
            "visitor_source_id" = ${VisitorSourceId}
            "event_source" = ${EventSource}
            "ingestion_source" = ${IngestionSource}
            "engager_type" = ${EngagerType}
            "campaign_id" = ${CampaignId}
            "ad_id" = ${AdId}
            "objective_type" = ${ObjectiveType}
            "ad_account_id" = ${AdAccountId}
        }

        return $PSO
    }

}

