#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Records
Records list. Can be any combination of emails, MAIDs, or IDFAs. Emails must be lowercase and can be plain text or hashed using SHA1, SHA256, or MD5. MAIDs and IDFAs must be hashed with SHA1, SHA256, or MD5.
.PARAMETER OperationType
No description available.
.PARAMETER Exceptions
No description available.
.OUTPUTS

CustomerListUpdateRequest<PSCustomObject>
#>

function Initialize-CustomerListUpdateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Records},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ADD", "REMOVE")]
        [PSCustomObject]
        ${OperationType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Exceptions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CustomerListUpdateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Records) {
            throw "invalid value for 'Records', 'Records' cannot be null."
        }

        if ($null -eq $OperationType) {
            throw "invalid value for 'OperationType', 'OperationType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "records" = ${Records}
            "operation_type" = ${OperationType}
            "exceptions" = ${Exceptions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomerListUpdateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomerListUpdateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomerListUpdateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCustomerListUpdateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CustomerListUpdateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomerListUpdateRequest
        $AllProperties = ("records", "operation_type", "exceptions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'records' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "records"))) {
            throw "Error! JSON cannot be serialized due to the required property 'records' missing."
        } else {
            $Records = $JsonParameters.PSobject.Properties["records"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operation_type' missing."
        } else {
            $OperationType = $JsonParameters.PSobject.Properties["operation_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exceptions"))) { #optional property not found
            $Exceptions = $null
        } else {
            $Exceptions = $JsonParameters.PSobject.Properties["exceptions"].value
        }

        $PSO = [PSCustomObject]@{
            "records" = ${Records}
            "operation_type" = ${OperationType}
            "exceptions" = ${Exceptions}
        }

        return $PSO
    }

}

