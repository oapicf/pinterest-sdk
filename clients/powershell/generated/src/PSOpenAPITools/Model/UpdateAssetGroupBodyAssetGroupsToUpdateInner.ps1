#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssetGroupId
Unique identifier of the asset group to update.
.PARAMETER Name
Asset Group name
.PARAMETER Description
Asset group description
.PARAMETER AssetGroupTypes
Asset Group Types. Note: The asset group types are used for user reference and categorization purposes only and do not impact the functionality of the asset group.
.PARAMETER AssetsToAdd
A list of asset ids to add to the asset group.
.PARAMETER AssetsToRemove
A list of asset ids to remove from the asset group.
.OUTPUTS

UpdateAssetGroupBodyAssetGroupsToUpdateInner<PSCustomObject>
#>

function Initialize-UpdateAssetGroupBodyAssetGroupsToUpdateInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetGroupId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssetGroupTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AssetsToAdd},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AssetsToRemove}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UpdateAssetGroupBodyAssetGroupsToUpdateInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AssetGroupId) {
            throw "invalid value for 'AssetGroupId', 'AssetGroupId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "asset_group_id" = ${AssetGroupId}
            "name" = ${Name}
            "description" = ${Description}
            "asset_group_types" = ${AssetGroupTypes}
            "assets_to_add" = ${AssetsToAdd}
            "assets_to_remove" = ${AssetsToRemove}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateAssetGroupBodyAssetGroupsToUpdateInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateAssetGroupBodyAssetGroupsToUpdateInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateAssetGroupBodyAssetGroupsToUpdateInner<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateAssetGroupBodyAssetGroupsToUpdateInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UpdateAssetGroupBodyAssetGroupsToUpdateInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateAssetGroupBodyAssetGroupsToUpdateInner
        $AllProperties = ("asset_group_id", "name", "description", "asset_group_types", "assets_to_add", "assets_to_remove")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'asset_group_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_group_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'asset_group_id' missing."
        } else {
            $AssetGroupId = $JsonParameters.PSobject.Properties["asset_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_group_types"))) { #optional property not found
            $AssetGroupTypes = $null
        } else {
            $AssetGroupTypes = $JsonParameters.PSobject.Properties["asset_group_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assets_to_add"))) { #optional property not found
            $AssetsToAdd = $null
        } else {
            $AssetsToAdd = $JsonParameters.PSobject.Properties["assets_to_add"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assets_to_remove"))) { #optional property not found
            $AssetsToRemove = $null
        } else {
            $AssetsToRemove = $JsonParameters.PSobject.Properties["assets_to_remove"].value
        }

        $PSO = [PSCustomObject]@{
            "asset_group_id" = ${AssetGroupId}
            "name" = ${Name}
            "description" = ${Description}
            "asset_group_types" = ${AssetGroupTypes}
            "assets_to_add" = ${AssetsToAdd}
            "assets_to_remove" = ${AssetsToRemove}
        }

        return $PSO
    }

}

