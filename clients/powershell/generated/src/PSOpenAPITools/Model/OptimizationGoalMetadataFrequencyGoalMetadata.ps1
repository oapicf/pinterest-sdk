#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Frequency
No description available.
.PARAMETER Timerange
User entity counts time range
.OUTPUTS

OptimizationGoalMetadataFrequencyGoalMetadata<PSCustomObject>
#>

function Initialize-OptimizationGoalMetadataFrequencyGoalMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Frequency},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("THIRTY_DAY", "DAY", "SEVEN_DAY", "TWENTY_MINUTE", "TEN_MINUTE", "TWENTY_FOUR_HOUR")]
        [String]
        ${Timerange}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OptimizationGoalMetadataFrequencyGoalMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "frequency" = ${Frequency}
            "timerange" = ${Timerange}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OptimizationGoalMetadataFrequencyGoalMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to OptimizationGoalMetadataFrequencyGoalMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OptimizationGoalMetadataFrequencyGoalMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToOptimizationGoalMetadataFrequencyGoalMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OptimizationGoalMetadataFrequencyGoalMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OptimizationGoalMetadataFrequencyGoalMetadata
        $AllProperties = ("frequency", "timerange")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "frequency"))) { #optional property not found
            $Frequency = $null
        } else {
            $Frequency = $JsonParameters.PSobject.Properties["frequency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timerange"))) { #optional property not found
            $Timerange = $null
        } else {
            $Timerange = $JsonParameters.PSobject.Properties["timerange"].value
        }

        $PSO = [PSCustomObject]@{
            "frequency" = ${Frequency}
            "timerange" = ${Timerange}
        }

        return $PSO
    }

}

