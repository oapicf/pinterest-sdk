#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Eligible
Advertiser eligible to create order lines
.PARAMETER CanEdit
Advertiser eligible to update order lines
.PARAMETER BilltoInfos
An array of Salesforce account information that includes address, io terms, etc.
.PARAMETER Currency
No description available.
.PARAMETER PmpNames
No description available.
.PARAMETER VarError
Error indicator from Salesforce which could be ""No Error""
.OUTPUTS

SSIOAccountResponse<PSCustomObject>
#>

function Initialize-SSIOAccountResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Eligible},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanEdit},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${BilltoInfos},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PmpNames},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarError}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SSIOAccountResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "eligible" = ${Eligible}
            "can_edit" = ${CanEdit}
            "billto_infos" = ${BilltoInfos}
            "currency" = ${Currency}
            "pmp_names" = ${PmpNames}
            "error" = ${VarError}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SSIOAccountResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to SSIOAccountResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SSIOAccountResponse<PSCustomObject>
#>
function ConvertFrom-JsonToSSIOAccountResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SSIOAccountResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SSIOAccountResponse
        $AllProperties = ("eligible", "can_edit", "billto_infos", "currency", "pmp_names", "error")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eligible"))) { #optional property not found
            $Eligible = $null
        } else {
            $Eligible = $JsonParameters.PSobject.Properties["eligible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "can_edit"))) { #optional property not found
            $CanEdit = $null
        } else {
            $CanEdit = $JsonParameters.PSobject.Properties["can_edit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "billto_infos"))) { #optional property not found
            $BilltoInfos = $null
        } else {
            $BilltoInfos = $JsonParameters.PSobject.Properties["billto_infos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pmp_names"))) { #optional property not found
            $PmpNames = $null
        } else {
            $PmpNames = $JsonParameters.PSobject.Properties["pmp_names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        $PSO = [PSCustomObject]@{
            "eligible" = ${Eligible}
            "can_edit" = ${CanEdit}
            "billto_infos" = ${BilltoInfos}
            "currency" = ${Currency}
            "pmp_names" = ${PmpNames}
            "error" = ${VarError}
        }

        return $PSO
    }

}

