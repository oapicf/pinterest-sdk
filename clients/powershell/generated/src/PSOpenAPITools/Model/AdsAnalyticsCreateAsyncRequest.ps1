#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StartDate
Metric report start date (UTC). Format: YYYY-MM-DD
.PARAMETER EndDate
Metric report end date (UTC). Format: YYYY-MM-DD
.PARAMETER Granularity
TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly
.PARAMETER ClickWindowDays
Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
.PARAMETER EngagementWindowDays
Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.
.PARAMETER ViewWindowDays
Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.
.PARAMETER ConversionReportTime
The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.
.PARAMETER AttributionTypes
List of types of attribution for the conversion report
.PARAMETER CampaignIds
List of campaign ids
.PARAMETER CampaignStatuses
List of status values for filtering
.PARAMETER CampaignObjectiveTypes
List of values for filtering. [""WEB_SESSIONS""] in BETA.
.PARAMETER AdGroupIds
List of ad group ids
.PARAMETER AdGroupStatuses
List of values for filtering
.PARAMETER AdIds
List of ad ids [This parameter is no supported for Product Item Level Reports]
.PARAMETER AdStatuses
List of values for filtering [This parameter is not supported for Product Item Level Reports]
.PARAMETER ProductGroupIds
List of product group ids
.PARAMETER ProductGroupStatuses
List of values for filtering
.PARAMETER ProductItemIds
List of product item ids
.PARAMETER TargetingTypes
List of targeting types. Requires `level` to be a value ending in `_TARGETING`. [""AGE_BUCKET_AND_GENDER""] is in BETA and not yet available to all users.
.PARAMETER MetricsFilters
List of metrics filters
.PARAMETER Columns
Metric and entity columns. Pin promotion and ad related columns are not supported for the Product Item level reports.
.PARAMETER Level
Level of the report
.PARAMETER ReportFormat
Specification for formatting the report data. Reports in JSON will not zero-fill metrics, whereas reports in CSV will. Both report formats will omit rows where all the columns are equal to 0.
.PARAMETER PrimarySort
Whether to first sort the report by date or by entity ID of the reporting entity level. Date will be used as the first level key for JSON reports that use BY_DATE. BY_DATE is recommended for large requests.
.PARAMETER StartHour
Which hour of the start date to begin the report. The entire day will be included if no start hour is provided. Only allowed for hourly reports.
.PARAMETER EndHour
Which hour of the end date to stop the report (inclusive). For example, with an end_date of '2020-01-01' and end_hour of '15', the report will contain metrics up to '2020-01-01 14:59:59'. The entire day will be included if no end hour is provided. Only allowed for hourly reports.
.OUTPUTS

AdsAnalyticsCreateAsyncRequest<PSCustomObject>
#>

function Initialize-AdsAnalyticsCreateAsyncRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d{4})-(\d{2})-(\d{2})$")]
        [String]
        ${StartDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d{4})-(\d{2})-(\d{2})$")]
        [String]
        ${EndDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TOTAL", "DAY", "HOUR", "WEEK", "MONTH")]
        [PSCustomObject]
        ${Granularity},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "7", "14", "30", "60")]
        [PSCustomObject]
        ${ClickWindowDays} = 30,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "7", "14", "30", "60")]
        [PSCustomObject]
        ${EngagementWindowDays} = 30,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "7", "14", "30", "60")]
        [PSCustomObject]
        ${ViewWindowDays} = 1,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TIME_OF_AD_ACTION", "TIME_OF_CONVERSION")]
        [PSCustomObject]
        ${ConversionReportTime} = "TIME_OF_AD_ACTION",
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AttributionTypes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CampaignIds},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CampaignStatuses},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CampaignObjectiveTypes},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AdGroupIds},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AdGroupStatuses},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AdIds},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AdStatuses},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ProductGroupIds},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ProductGroupStatuses},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ProductItemIds},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TargetingTypes},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${MetricsFilters},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Columns},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ADVERTISER", "ADVERTISER_TARGETING", "CAMPAIGN", "CAMPAIGN_TARGETING", "AD_GROUP", "AD_GROUP_TARGETING", "PIN_PROMOTION", "PIN_PROMOTION_TARGETING", "KEYWORD", "PRODUCT_GROUP", "PRODUCT_GROUP_TARGETING", "PRODUCT_ITEM", "PRODUCT_ITEM_TARGETING")]
        [PSCustomObject]
        ${Level},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("JSON", "CSV")]
        [PSCustomObject]
        ${ReportFormat} = "JSON",
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("BY_ID", "BY_DATE")]
        [String]
        ${PrimarySort},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartHour},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EndHour}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdsAnalyticsCreateAsyncRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $StartDate) {
            throw "invalid value for 'StartDate', 'StartDate' cannot be null."
        }

        if ($null -eq $EndDate) {
            throw "invalid value for 'EndDate', 'EndDate' cannot be null."
        }

        if ($null -eq $Granularity) {
            throw "invalid value for 'Granularity', 'Granularity' cannot be null."
        }

        if (!$CampaignIds -and $CampaignIds.length -gt 500) {
            throw "invalid value for 'CampaignIds', number of items must be less than or equal to 500."
        }

        if (!$CampaignIds -and $CampaignIds.length -lt 1) {
            throw "invalid value for 'CampaignIds', number of items must be greater than or equal to 1."
        }

        if (!$CampaignStatuses -and $CampaignStatuses.length -gt 6) {
            throw "invalid value for 'CampaignStatuses', number of items must be less than or equal to 6."
        }

        if (!$CampaignStatuses -and $CampaignStatuses.length -lt 1) {
            throw "invalid value for 'CampaignStatuses', number of items must be greater than or equal to 1."
        }

        if (!$CampaignObjectiveTypes -and $CampaignObjectiveTypes.length -gt 7) {
            throw "invalid value for 'CampaignObjectiveTypes', number of items must be less than or equal to 7."
        }

        if (!$CampaignObjectiveTypes -and $CampaignObjectiveTypes.length -lt 1) {
            throw "invalid value for 'CampaignObjectiveTypes', number of items must be greater than or equal to 1."
        }

        if (!$AdGroupIds -and $AdGroupIds.length -gt 500) {
            throw "invalid value for 'AdGroupIds', number of items must be less than or equal to 500."
        }

        if (!$AdGroupIds -and $AdGroupIds.length -lt 1) {
            throw "invalid value for 'AdGroupIds', number of items must be greater than or equal to 1."
        }

        if (!$AdGroupStatuses -and $AdGroupStatuses.length -gt 6) {
            throw "invalid value for 'AdGroupStatuses', number of items must be less than or equal to 6."
        }

        if (!$AdGroupStatuses -and $AdGroupStatuses.length -lt 1) {
            throw "invalid value for 'AdGroupStatuses', number of items must be greater than or equal to 1."
        }

        if (!$AdIds -and $AdIds.length -gt 500) {
            throw "invalid value for 'AdIds', number of items must be less than or equal to 500."
        }

        if (!$AdIds -and $AdIds.length -lt 1) {
            throw "invalid value for 'AdIds', number of items must be greater than or equal to 1."
        }

        if (!$AdStatuses -and $AdStatuses.length -gt 6) {
            throw "invalid value for 'AdStatuses', number of items must be less than or equal to 6."
        }

        if (!$AdStatuses -and $AdStatuses.length -lt 1) {
            throw "invalid value for 'AdStatuses', number of items must be greater than or equal to 1."
        }

        if (!$ProductGroupIds -and $ProductGroupIds.length -gt 500) {
            throw "invalid value for 'ProductGroupIds', number of items must be less than or equal to 500."
        }

        if (!$ProductGroupIds -and $ProductGroupIds.length -lt 1) {
            throw "invalid value for 'ProductGroupIds', number of items must be greater than or equal to 1."
        }

        if (!$ProductGroupStatuses -and $ProductGroupStatuses.length -gt 6) {
            throw "invalid value for 'ProductGroupStatuses', number of items must be less than or equal to 6."
        }

        if (!$ProductGroupStatuses -and $ProductGroupStatuses.length -lt 1) {
            throw "invalid value for 'ProductGroupStatuses', number of items must be greater than or equal to 1."
        }

        if (!$ProductItemIds -and $ProductItemIds.length -gt 500) {
            throw "invalid value for 'ProductItemIds', number of items must be less than or equal to 500."
        }

        if (!$ProductItemIds -and $ProductItemIds.length -lt 1) {
            throw "invalid value for 'ProductItemIds', number of items must be greater than or equal to 1."
        }

        if (!$TargetingTypes -and $TargetingTypes.length -gt 5) {
            throw "invalid value for 'TargetingTypes', number of items must be less than or equal to 5."
        }

        if (!$TargetingTypes -and $TargetingTypes.length -lt 1) {
            throw "invalid value for 'TargetingTypes', number of items must be greater than or equal to 1."
        }

        if (!$MetricsFilters -and $MetricsFilters.length -lt 1) {
            throw "invalid value for 'MetricsFilters', number of items must be greater than or equal to 1."
        }

        if ($null -eq $Columns) {
            throw "invalid value for 'Columns', 'Columns' cannot be null."
        }

        if ($null -eq $Level) {
            throw "invalid value for 'Level', 'Level' cannot be null."
        }

        if ($StartHour -and $StartHour -gt 23) {
          throw "invalid value for 'StartHour', must be smaller than or equal to 23."
        }

        if ($StartHour -and $StartHour -lt 0) {
          throw "invalid value for 'StartHour', must be greater than or equal to 0."
        }

        if ($EndHour -and $EndHour -gt 23) {
          throw "invalid value for 'EndHour', must be smaller than or equal to 23."
        }

        if ($EndHour -and $EndHour -lt 0) {
          throw "invalid value for 'EndHour', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "start_date" = ${StartDate}
            "end_date" = ${EndDate}
            "granularity" = ${Granularity}
            "click_window_days" = ${ClickWindowDays}
            "engagement_window_days" = ${EngagementWindowDays}
            "view_window_days" = ${ViewWindowDays}
            "conversion_report_time" = ${ConversionReportTime}
            "attribution_types" = ${AttributionTypes}
            "campaign_ids" = ${CampaignIds}
            "campaign_statuses" = ${CampaignStatuses}
            "campaign_objective_types" = ${CampaignObjectiveTypes}
            "ad_group_ids" = ${AdGroupIds}
            "ad_group_statuses" = ${AdGroupStatuses}
            "ad_ids" = ${AdIds}
            "ad_statuses" = ${AdStatuses}
            "product_group_ids" = ${ProductGroupIds}
            "product_group_statuses" = ${ProductGroupStatuses}
            "product_item_ids" = ${ProductItemIds}
            "targeting_types" = ${TargetingTypes}
            "metrics_filters" = ${MetricsFilters}
            "columns" = ${Columns}
            "level" = ${Level}
            "report_format" = ${ReportFormat}
            "primary_sort" = ${PrimarySort}
            "start_hour" = ${StartHour}
            "end_hour" = ${EndHour}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdsAnalyticsCreateAsyncRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdsAnalyticsCreateAsyncRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdsAnalyticsCreateAsyncRequest<PSCustomObject>
#>
function ConvertFrom-JsonToAdsAnalyticsCreateAsyncRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdsAnalyticsCreateAsyncRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdsAnalyticsCreateAsyncRequest
        $AllProperties = ("start_date", "end_date", "granularity", "click_window_days", "engagement_window_days", "view_window_days", "conversion_report_time", "attribution_types", "campaign_ids", "campaign_statuses", "campaign_objective_types", "ad_group_ids", "ad_group_statuses", "ad_ids", "ad_statuses", "product_group_ids", "product_group_statuses", "product_item_ids", "targeting_types", "metrics_filters", "columns", "level", "report_format", "primary_sort", "start_hour", "end_hour")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'start_date' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_date"))) {
            throw "Error! JSON cannot be serialized due to the required property 'start_date' missing."
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["start_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_date"))) {
            throw "Error! JSON cannot be serialized due to the required property 'end_date' missing."
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["end_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "granularity"))) {
            throw "Error! JSON cannot be serialized due to the required property 'granularity' missing."
        } else {
            $Granularity = $JsonParameters.PSobject.Properties["granularity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "columns"))) {
            throw "Error! JSON cannot be serialized due to the required property 'columns' missing."
        } else {
            $Columns = $JsonParameters.PSobject.Properties["columns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) {
            throw "Error! JSON cannot be serialized due to the required property 'level' missing."
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "click_window_days"))) { #optional property not found
            $ClickWindowDays = $null
        } else {
            $ClickWindowDays = $JsonParameters.PSobject.Properties["click_window_days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "engagement_window_days"))) { #optional property not found
            $EngagementWindowDays = $null
        } else {
            $EngagementWindowDays = $JsonParameters.PSobject.Properties["engagement_window_days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "view_window_days"))) { #optional property not found
            $ViewWindowDays = $null
        } else {
            $ViewWindowDays = $JsonParameters.PSobject.Properties["view_window_days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conversion_report_time"))) { #optional property not found
            $ConversionReportTime = $null
        } else {
            $ConversionReportTime = $JsonParameters.PSobject.Properties["conversion_report_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attribution_types"))) { #optional property not found
            $AttributionTypes = $null
        } else {
            $AttributionTypes = $JsonParameters.PSobject.Properties["attribution_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaign_ids"))) { #optional property not found
            $CampaignIds = $null
        } else {
            $CampaignIds = $JsonParameters.PSobject.Properties["campaign_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaign_statuses"))) { #optional property not found
            $CampaignStatuses = $null
        } else {
            $CampaignStatuses = $JsonParameters.PSobject.Properties["campaign_statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaign_objective_types"))) { #optional property not found
            $CampaignObjectiveTypes = $null
        } else {
            $CampaignObjectiveTypes = $JsonParameters.PSobject.Properties["campaign_objective_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_group_ids"))) { #optional property not found
            $AdGroupIds = $null
        } else {
            $AdGroupIds = $JsonParameters.PSobject.Properties["ad_group_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_group_statuses"))) { #optional property not found
            $AdGroupStatuses = $null
        } else {
            $AdGroupStatuses = $JsonParameters.PSobject.Properties["ad_group_statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_ids"))) { #optional property not found
            $AdIds = $null
        } else {
            $AdIds = $JsonParameters.PSobject.Properties["ad_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_statuses"))) { #optional property not found
            $AdStatuses = $null
        } else {
            $AdStatuses = $JsonParameters.PSobject.Properties["ad_statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "product_group_ids"))) { #optional property not found
            $ProductGroupIds = $null
        } else {
            $ProductGroupIds = $JsonParameters.PSobject.Properties["product_group_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "product_group_statuses"))) { #optional property not found
            $ProductGroupStatuses = $null
        } else {
            $ProductGroupStatuses = $JsonParameters.PSobject.Properties["product_group_statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "product_item_ids"))) { #optional property not found
            $ProductItemIds = $null
        } else {
            $ProductItemIds = $JsonParameters.PSobject.Properties["product_item_ids"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targeting_types"))) { #optional property not found
            $TargetingTypes = $null
        } else {
            $TargetingTypes = $JsonParameters.PSobject.Properties["targeting_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metrics_filters"))) { #optional property not found
            $MetricsFilters = $null
        } else {
            $MetricsFilters = $JsonParameters.PSobject.Properties["metrics_filters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "report_format"))) { #optional property not found
            $ReportFormat = $null
        } else {
            $ReportFormat = $JsonParameters.PSobject.Properties["report_format"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_sort"))) { #optional property not found
            $PrimarySort = $null
        } else {
            $PrimarySort = $JsonParameters.PSobject.Properties["primary_sort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_hour"))) { #optional property not found
            $StartHour = $null
        } else {
            $StartHour = $JsonParameters.PSobject.Properties["start_hour"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_hour"))) { #optional property not found
            $EndHour = $null
        } else {
            $EndHour = $JsonParameters.PSobject.Properties["end_hour"].value
        }

        $PSO = [PSCustomObject]@{
            "start_date" = ${StartDate}
            "end_date" = ${EndDate}
            "granularity" = ${Granularity}
            "click_window_days" = ${ClickWindowDays}
            "engagement_window_days" = ${EngagementWindowDays}
            "view_window_days" = ${ViewWindowDays}
            "conversion_report_time" = ${ConversionReportTime}
            "attribution_types" = ${AttributionTypes}
            "campaign_ids" = ${CampaignIds}
            "campaign_statuses" = ${CampaignStatuses}
            "campaign_objective_types" = ${CampaignObjectiveTypes}
            "ad_group_ids" = ${AdGroupIds}
            "ad_group_statuses" = ${AdGroupStatuses}
            "ad_ids" = ${AdIds}
            "ad_statuses" = ${AdStatuses}
            "product_group_ids" = ${ProductGroupIds}
            "product_group_statuses" = ${ProductGroupStatuses}
            "product_item_ids" = ${ProductItemIds}
            "targeting_types" = ${TargetingTypes}
            "metrics_filters" = ${MetricsFilters}
            "columns" = ${Columns}
            "level" = ${Level}
            "report_format" = ${ReportFormat}
            "primary_sort" = ${PrimarySort}
            "start_hour" = ${StartHour}
            "end_hour" = ${EndHour}
        }

        return $PSO
    }

}

