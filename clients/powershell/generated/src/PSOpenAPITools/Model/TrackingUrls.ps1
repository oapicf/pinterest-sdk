#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Third-party tracking URLs. Up to three tracking URLs - with a max length of 2,000 - are supported for each event type. Tracking URLs set at the ad group or ad level can override those set at the campaign level. For more information, see <a href=""https://help.pinterest.com/en/business/article/third-party-and-dynamic-tracking"" target=""_blank"">Third-party and dynamic tracking</a>.

.PARAMETER Impression
No description available.
.PARAMETER Click
No description available.
.PARAMETER Engagement
No description available.
.PARAMETER BuyableButton
No description available.
.PARAMETER AudienceVerification
No description available.
.OUTPUTS

TrackingUrls<PSCustomObject>
#>

function Initialize-TrackingUrls {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Impression},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Click},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Engagement},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${BuyableButton},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AudienceVerification}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TrackingUrls' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "impression" = ${Impression}
            "click" = ${Click}
            "engagement" = ${Engagement}
            "buyable_button" = ${BuyableButton}
            "audience_verification" = ${AudienceVerification}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TrackingUrls<PSCustomObject>

.DESCRIPTION

Convert from JSON to TrackingUrls<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TrackingUrls<PSCustomObject>
#>
function ConvertFrom-JsonToTrackingUrls {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TrackingUrls' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TrackingUrls
        $AllProperties = ("impression", "click", "engagement", "buyable_button", "audience_verification")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "impression"))) { #optional property not found
            $Impression = $null
        } else {
            $Impression = $JsonParameters.PSobject.Properties["impression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "click"))) { #optional property not found
            $Click = $null
        } else {
            $Click = $JsonParameters.PSobject.Properties["click"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "engagement"))) { #optional property not found
            $Engagement = $null
        } else {
            $Engagement = $JsonParameters.PSobject.Properties["engagement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyable_button"))) { #optional property not found
            $BuyableButton = $null
        } else {
            $BuyableButton = $JsonParameters.PSobject.Properties["buyable_button"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audience_verification"))) { #optional property not found
            $AudienceVerification = $null
        } else {
            $AudienceVerification = $JsonParameters.PSobject.Properties["audience_verification"].value
        }

        $PSO = [PSCustomObject]@{
            "impression" = ${Impression}
            "click" = ${Click}
            "engagement" = ${Engagement}
            "buyable_button" = ${BuyableButton}
            "audience_verification" = ${AudienceVerification}
        }

        return $PSO
    }

}

