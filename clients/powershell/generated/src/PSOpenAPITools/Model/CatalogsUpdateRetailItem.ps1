#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An item to be updated

.PARAMETER ItemId
The catalog item id in the merchant namespace
.PARAMETER Operation
No description available.
.PARAMETER Attributes
No description available.
.PARAMETER UpdateMask
The list of product attributes to be updated. Attributes specified in the update mask without a value specified in the body will be deleted from the product item.
.OUTPUTS

CatalogsUpdateRetailItem<PSCustomObject>
#>

function Initialize-CatalogsUpdateRetailItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("UPDATE")]
        [String]
        ${Operation},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Attributes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${UpdateMask}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsUpdateRetailItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ItemId) {
            throw "invalid value for 'ItemId', 'ItemId' cannot be null."
        }

        if ($null -eq $Operation) {
            throw "invalid value for 'Operation', 'Operation' cannot be null."
        }

        if ($null -eq $Attributes) {
            throw "invalid value for 'Attributes', 'Attributes' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "operation" = ${Operation}
            "attributes" = ${Attributes}
            "update_mask" = ${UpdateMask}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsUpdateRetailItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsUpdateRetailItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsUpdateRetailItem<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsUpdateRetailItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsUpdateRetailItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsUpdateRetailItem
        $AllProperties = ("item_id", "operation", "attributes", "update_mask")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'item_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_id' missing."
        } else {
            $ItemId = $JsonParameters.PSobject.Properties["item_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operation' missing."
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attributes' missing."
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update_mask"))) { #optional property not found
            $UpdateMask = $null
        } else {
            $UpdateMask = $JsonParameters.PSobject.Properties["update_mask"].value
        }

        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "operation" = ${Operation}
            "attributes" = ${Attributes}
            "update_mask" = ${UpdateMask}
        }

        return $PSO
    }

}

