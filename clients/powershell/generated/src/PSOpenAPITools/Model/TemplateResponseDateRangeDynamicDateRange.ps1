#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The dynamic date range of the template

.PARAMETER Type
The date range type
.PARAMETER Range
The dynamic range type
.OUTPUTS

TemplateResponseDateRangeDynamicDateRange<PSCustomObject>
#>

function Initialize-TemplateResponseDateRangeDynamicDateRange {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("YEAR_TO_DATE", "QUARTER_TO_DATE", "MONTH_TO_DATE", "LAST_MONTH")]
        [String]
        ${Range}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TemplateResponseDateRangeDynamicDateRange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "range" = ${Range}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TemplateResponseDateRangeDynamicDateRange<PSCustomObject>

.DESCRIPTION

Convert from JSON to TemplateResponseDateRangeDynamicDateRange<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TemplateResponseDateRangeDynamicDateRange<PSCustomObject>
#>
function ConvertFrom-JsonToTemplateResponseDateRangeDynamicDateRange {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TemplateResponseDateRangeDynamicDateRange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TemplateResponseDateRangeDynamicDateRange
        $AllProperties = ("type", "range")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "range"))) { #optional property not found
            $Range = $null
        } else {
            $Range = $JsonParameters.PSobject.Properties["range"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "range" = ${Range}
        }

        return $PSO
    }

}

