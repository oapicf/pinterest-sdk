#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Creative assets batch item

.PARAMETER Json

JSON object

.OUTPUTS

CatalogsCreativeAssetsBatchItem<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsCreativeAssetsBatchItem {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        $JsonData = ConvertFrom-Json -InputObject $Json
        # check if the discriminator value is 'CREATE'
        if ($JsonData.PSobject.Properties["operation"].value -eq "CREATE") {
            # try to match CatalogsCreateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsCreateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsCreateCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsCreateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (CREATE). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'DELETE'
        if ($JsonData.PSobject.Properties["operation"].value -eq "DELETE") {
            # try to match CatalogsDeleteCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsDeleteCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsDeleteCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsDeleteCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (DELETE). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'UPDATE'
        if ($JsonData.PSobject.Properties["operation"].value -eq "UPDATE") {
            # try to match CatalogsUpdateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpdateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpdateCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpdateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (UPDATE). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'UPSERT'
        if ($JsonData.PSobject.Properties["operation"].value -eq "UPSERT") {
            # try to match CatalogsUpsertCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpsertCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpsertCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpsertCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (UPSERT). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'CatalogsCreateCreativeAssetsItem'
        if ($JsonData.PSobject.Properties["operation"].value -eq "CatalogsCreateCreativeAssetsItem") {
            # try to match CatalogsCreateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsCreateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsCreateCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsCreateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (CatalogsCreateCreativeAssetsItem). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'CatalogsDeleteCreativeAssetsItem'
        if ($JsonData.PSobject.Properties["operation"].value -eq "CatalogsDeleteCreativeAssetsItem") {
            # try to match CatalogsDeleteCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsDeleteCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsDeleteCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsDeleteCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (CatalogsDeleteCreativeAssetsItem). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'CatalogsUpdateCreativeAssetsItem'
        if ($JsonData.PSobject.Properties["operation"].value -eq "CatalogsUpdateCreativeAssetsItem") {
            # try to match CatalogsUpdateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpdateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpdateCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpdateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (CatalogsUpdateCreativeAssetsItem). Proceeding with the typical anyOf type matching."
            }
        }

        # check if the discriminator value is 'CatalogsUpsertCreativeAssetsItem'
        if ($JsonData.PSobject.Properties["operation"].value -eq "CatalogsUpsertCreativeAssetsItem") {
            # try to match CatalogsUpsertCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpsertCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpsertCreativeAssetsItem"
                        return [PSCustomObject]@{
                            "ActualType" = ${matchType}
                            "ActualInstance" = ${matchInstance}
                            "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
                        }
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf with the discriminator lookup, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpsertCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem) using the discriminator lookup (CatalogsUpsertCreativeAssetsItem). Proceeding with the typical anyOf type matching."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match CatalogsCreateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsCreateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsCreateCreativeAssetsItem"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'CatalogsCreateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match CatalogsDeleteCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsDeleteCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsDeleteCreativeAssetsItem"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'CatalogsDeleteCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match CatalogsUpdateCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpdateCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpdateCreativeAssetsItem"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpdateCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match CatalogsUpsertCreativeAssetsItem defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCatalogsUpsertCreativeAssetsItem $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CatalogsUpsertCreativeAssetsItem"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'CatalogsUpsertCreativeAssetsItem' defined in anyOf (CatalogsCreativeAssetsBatchItem). Proceeding to the next one if any."
            }
        }

        if ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "anyOfSchemas" = @("CatalogsCreateCreativeAssetsItem", "CatalogsDeleteCreativeAssetsItem", "CatalogsUpdateCreativeAssetsItem", "CatalogsUpsertCreativeAssetsItem")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in anyOf schemas ([CatalogsCreateCreativeAssetsItem, CatalogsDeleteCreativeAssetsItem, CatalogsUpdateCreativeAssetsItem, CatalogsUpsertCreativeAssetsItem]). JSON Payload: $($Json)"
        }
    }
}

