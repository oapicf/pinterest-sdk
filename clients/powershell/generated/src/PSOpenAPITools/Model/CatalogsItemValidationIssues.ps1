#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ItemNumber
Item number based on order of appearance in the Catalogs Feed. For example, '0' refers to first item found in a feed that was downloaded from a 'location' specified during feed creation.
.PARAMETER ItemId
The merchant-created unique ID that represents the product.
.PARAMETER Errors
No description available.
.PARAMETER Warnings
No description available.
.OUTPUTS

CatalogsItemValidationIssues<PSCustomObject>
#>

function Initialize-CatalogsItemValidationIssues {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ItemNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Errors},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Warnings}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsItemValidationIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ItemNumber) {
            throw "invalid value for 'ItemNumber', 'ItemNumber' cannot be null."
        }

        if ($null -eq $Errors) {
            throw "invalid value for 'Errors', 'Errors' cannot be null."
        }

        if ($null -eq $Warnings) {
            throw "invalid value for 'Warnings', 'Warnings' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "item_number" = ${ItemNumber}
            "item_id" = ${ItemId}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsItemValidationIssues<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsItemValidationIssues<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsItemValidationIssues<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsItemValidationIssues {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsItemValidationIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsItemValidationIssues
        $AllProperties = ("item_number", "item_id", "errors", "warnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'item_number' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_number"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_number' missing."
        } else {
            $ItemNumber = $JsonParameters.PSobject.Properties["item_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_id' missing."
        } else {
            $ItemId = $JsonParameters.PSobject.Properties["item_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'errors' missing."
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'warnings' missing."
        } else {
            $Warnings = $JsonParameters.PSobject.Properties["warnings"].value
        }

        $PSO = [PSCustomObject]@{
            "item_number" = ${ItemNumber}
            "item_id" = ${ItemId}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }

        return $PSO
    }

}

