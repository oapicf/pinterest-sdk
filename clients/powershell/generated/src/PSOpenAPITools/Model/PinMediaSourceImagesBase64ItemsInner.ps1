#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.PARAMETER Link
Destination link for the image.
.PARAMETER ContentType
No description available.
.PARAMETER VarData
Image to upload as base64 string.
.OUTPUTS

PinMediaSourceImagesBase64ItemsInner<PSCustomObject>
#>

function Initialize-PinMediaSourceImagesBase64ItemsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Link},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("image/jpeg", "image/png")]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("[a-zA-Z0-9+/=]+")]
        [String]
        ${VarData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PinMediaSourceImagesBase64ItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ContentType) {
            throw "invalid value for 'ContentType', 'ContentType' cannot be null."
        }

        if ($null -eq $VarData) {
            throw "invalid value for 'VarData', 'VarData' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "link" = ${Link}
            "content_type" = ${ContentType}
            "data" = ${VarData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PinMediaSourceImagesBase64ItemsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to PinMediaSourceImagesBase64ItemsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PinMediaSourceImagesBase64ItemsInner<PSCustomObject>
#>
function ConvertFrom-JsonToPinMediaSourceImagesBase64ItemsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PinMediaSourceImagesBase64ItemsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PinMediaSourceImagesBase64ItemsInner
        $AllProperties = ("title", "description", "link", "content_type", "data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_type' missing."
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data' missing."
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link"))) { #optional property not found
            $Link = $null
        } else {
            $Link = $JsonParameters.PSobject.Properties["link"].value
        }

        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "link" = ${Link}
            "content_type" = ${ContentType}
            "data" = ${VarData}
        }

        return $PSO
    }

}

