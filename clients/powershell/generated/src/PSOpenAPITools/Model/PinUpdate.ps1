#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Pin fields for updates

.PARAMETER AltText
Pin's alternative text.
.PARAMETER BoardId
The id of the board to move the Pin onto.
.PARAMETER BoardSectionId
<a href=""https://help.pinterest.com/en/article/create-a-board-section"">Board section</a> ID.
.PARAMETER Description
Pin description - 800 characters maximum.
.PARAMETER Link
URL viewer is taken to when they click pin.
.PARAMETER Title
The native pin title that creators explicitly prefer to display.
.PARAMETER CarouselSlots
Carousel Pin slots data.
.PARAMETER Note
Private note for this Pin. <a href=""https://help.pinterest.com/en/article/add-notes-to-your-pins"">Learn more</a>.
.OUTPUTS

PinUpdate<PSCustomObject>
#>

function Initialize-PinUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AltText},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${BoardId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${BoardSectionId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Link},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CarouselSlots},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PinUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AltText -and $AltText.length -gt 500) {
            throw "invalid value for 'AltText', the character length must be smaller than or equal to 500."
        }

        if (!$Description -and $Description.length -gt 800) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 800."
        }

        if (!$Link -and $Link.length -gt 2048) {
            throw "invalid value for 'Link', the character length must be smaller than or equal to 2048."
        }

        if (!$Title -and $Title.length -gt 100) {
            throw "invalid value for 'Title', the character length must be smaller than or equal to 100."
        }


        $PSO = [PSCustomObject]@{
            "alt_text" = ${AltText}
            "board_id" = ${BoardId}
            "board_section_id" = ${BoardSectionId}
            "description" = ${Description}
            "link" = ${Link}
            "title" = ${Title}
            "carousel_slots" = ${CarouselSlots}
            "note" = ${Note}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PinUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to PinUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PinUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToPinUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PinUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PinUpdate
        $AllProperties = ("alt_text", "board_id", "board_section_id", "description", "link", "title", "carousel_slots", "note")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alt_text"))) { #optional property not found
            $AltText = $null
        } else {
            $AltText = $JsonParameters.PSobject.Properties["alt_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "board_id"))) { #optional property not found
            $BoardId = $null
        } else {
            $BoardId = $JsonParameters.PSobject.Properties["board_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "board_section_id"))) { #optional property not found
            $BoardSectionId = $null
        } else {
            $BoardSectionId = $JsonParameters.PSobject.Properties["board_section_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link"))) { #optional property not found
            $Link = $null
        } else {
            $Link = $JsonParameters.PSobject.Properties["link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "carousel_slots"))) { #optional property not found
            $CarouselSlots = $null
        } else {
            $CarouselSlots = $JsonParameters.PSobject.Properties["carousel_slots"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) { #optional property not found
            $Note = $null
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        $PSO = [PSCustomObject]@{
            "alt_text" = ${AltText}
            "board_id" = ${BoardId}
            "board_section_id" = ${BoardSectionId}
            "description" = ${Description}
            "link" = ${Link}
            "title" = ${Title}
            "carousel_slots" = ${CarouselSlots}
            "note" = ${Note}
        }

        return $PSO
    }

}

