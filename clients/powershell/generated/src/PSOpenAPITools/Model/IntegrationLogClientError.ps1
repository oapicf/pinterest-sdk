#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

System error details included in the log sent by the client.

.PARAMETER Cause
Original cause of the error.
.PARAMETER ColumnNumber
Column number in the line of the file that raised the error.
.PARAMETER FileName
Filename where the error happened.
.PARAMETER LineNumber
Line number where the error happened.
.PARAMETER Message
Human-readable description of the error.
.PARAMETER MessageDetail
More detail about the message.
.PARAMETER Name
Filename where the error happened.
.PARAMETER Number
Integer that specifies the error code.
.PARAMETER VarStackTrace
Stack trace of where the error happened.
.OUTPUTS

IntegrationLogClientError<PSCustomObject>
#>

function Initialize-IntegrationLogClientError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cause},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ColumnNumber},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LineNumber},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageDetail},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Number},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarStackTrace}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IntegrationLogClientError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Cause -and $Cause.length -gt 512) {
            throw "invalid value for 'Cause', the character length must be smaller than or equal to 512."
        }

        if (!$FileName -and $FileName.length -gt 256) {
            throw "invalid value for 'FileName', the character length must be smaller than or equal to 256."
        }

        if (!$Message -and $Message.length -gt 512) {
            throw "invalid value for 'Message', the character length must be smaller than or equal to 512."
        }

        if (!$MessageDetail -and $MessageDetail.length -gt 1024) {
            throw "invalid value for 'MessageDetail', the character length must be smaller than or equal to 1024."
        }

        if (!$Name -and $Name.length -gt 256) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 256."
        }


        $PSO = [PSCustomObject]@{
            "cause" = ${Cause}
            "column_number" = ${ColumnNumber}
            "file_name" = ${FileName}
            "line_number" = ${LineNumber}
            "message" = ${Message}
            "message_detail" = ${MessageDetail}
            "name" = ${Name}
            "number" = ${Number}
            "stack_trace" = ${VarStackTrace}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IntegrationLogClientError<PSCustomObject>

.DESCRIPTION

Convert from JSON to IntegrationLogClientError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IntegrationLogClientError<PSCustomObject>
#>
function ConvertFrom-JsonToIntegrationLogClientError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IntegrationLogClientError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntegrationLogClientError
        $AllProperties = ("cause", "column_number", "file_name", "line_number", "message", "message_detail", "name", "number", "stack_trace")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cause"))) { #optional property not found
            $Cause = $null
        } else {
            $Cause = $JsonParameters.PSobject.Properties["cause"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "column_number"))) { #optional property not found
            $ColumnNumber = $null
        } else {
            $ColumnNumber = $JsonParameters.PSobject.Properties["column_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_name"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["file_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "line_number"))) { #optional property not found
            $LineNumber = $null
        } else {
            $LineNumber = $JsonParameters.PSobject.Properties["line_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message_detail"))) { #optional property not found
            $MessageDetail = $null
        } else {
            $MessageDetail = $JsonParameters.PSobject.Properties["message_detail"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stack_trace"))) { #optional property not found
            $VarStackTrace = $null
        } else {
            $VarStackTrace = $JsonParameters.PSobject.Properties["stack_trace"].value
        }

        $PSO = [PSCustomObject]@{
            "cause" = ${Cause}
            "column_number" = ${ColumnNumber}
            "file_name" = ${FileName}
            "line_number" = ${LineNumber}
            "message" = ${Message}
            "message_detail" = ${MessageDetail}
            "name" = ${Name}
            "number" = ${Number}
            "stack_trace" = ${VarStackTrace}
        }

        return $PSO
    }

}

