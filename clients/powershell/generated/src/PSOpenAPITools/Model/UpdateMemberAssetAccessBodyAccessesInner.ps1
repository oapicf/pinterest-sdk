#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssetId
Id of the asset to update.
.PARAMETER MemberId
Unique identifier of the member on which to perform the update
.PARAMETER Permissions
A non-empty array of permissions to assign to the member.
.OUTPUTS

UpdateMemberAssetAccessBodyAccessesInner<PSCustomObject>
#>

function Initialize-UpdateMemberAssetAccessBodyAccessesInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${AssetId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^\d+$")]
        [String]
        ${MemberId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Permissions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UpdateMemberAssetAccessBodyAccessesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AssetId) {
            throw "invalid value for 'AssetId', 'AssetId' cannot be null."
        }

        if ($AssetId.length -gt 25) {
            throw "invalid value for 'AssetId', the character length must be smaller than or equal to 25."
        }

        if ($null -eq $MemberId) {
            throw "invalid value for 'MemberId', 'MemberId' cannot be null."
        }

        if ($MemberId.length -gt 25) {
            throw "invalid value for 'MemberId', the character length must be smaller than or equal to 25."
        }

        if ($null -eq $Permissions) {
            throw "invalid value for 'Permissions', 'Permissions' cannot be null."
        }

        if ($Permissions.length -gt 50) {
            throw "invalid value for 'Permissions', number of items must be less than or equal to 50."
        }

        if ($Permissions.length -lt 1) {
            throw "invalid value for 'Permissions', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "member_id" = ${MemberId}
            "permissions" = ${Permissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateMemberAssetAccessBodyAccessesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateMemberAssetAccessBodyAccessesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateMemberAssetAccessBodyAccessesInner<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateMemberAssetAccessBodyAccessesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UpdateMemberAssetAccessBodyAccessesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateMemberAssetAccessBodyAccessesInner
        $AllProperties = ("asset_id", "member_id", "permissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'asset_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'asset_id' missing."
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "member_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'member_id' missing."
        } else {
            $MemberId = $JsonParameters.PSobject.Properties["member_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'permissions' missing."
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "member_id" = ${MemberId}
            "permissions" = ${Permissions}
        }

        return $PSO
    }

}

