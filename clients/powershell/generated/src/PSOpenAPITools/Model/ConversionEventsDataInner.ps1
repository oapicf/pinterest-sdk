#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EventName
<p>The type of the user event. Please use the right event_name otherwise the event won't be accepted and show up correctly in reports.   <ul>   <li><code>add_to_cart</code></li>   <li><code>checkout</code></li>   <li><code>custom</code></li>   <li><code>lead</code></li>   <li><code>page_visit</code></li>   <li><code>search</code></li>   <li><code>signup</code></li>   <li><code>view_category</code></li>   <li><code>watch_video</code></li>   </ul> </p> 
.PARAMETER ActionSource
<p>   The source indicating where the conversion event occurred.   <ul>     <li><code>app_android</code></li>     <li><code>app_ios</code></li>     <li><code>web</code></li>     <li><code>offline</code></li>   </ul> </p> 
.PARAMETER EventTime
The time when the event happened. Unix timestamp in seconds.
.PARAMETER EventId
A unique id string that identifies this event and can be used for deduping between events ingested via both the conversion API and Pinterest tracking. Without this, event's data is likely to be double counted and will cause report metric inflation. Third-party vendors make sure this field is updated on both Pinterest tag and Conversions API side before rolling out template for Conversions API.
.PARAMETER EventSourceUrl
URL of the web conversion event.
.PARAMETER OptOut
When action_source is web or offline, it defines whether the user has opted out of tracking for web conversion events. While when action_source is app_android or app_ios, it defines whether the user has enabled Limit Ad Tracking on their iOS device, or opted out of Ads Personalization on their Android device.
.PARAMETER PartnerName
The third party partner name responsible to send the event to Conversions API on behalf of the advertiser. The naming convention is ""ss-partnername"" lowercase. E.g ‘ss-shopify’
.PARAMETER UserData
No description available.
.PARAMETER CustomData
No description available.
.PARAMETER AppId
The app store app ID.
.PARAMETER AppName
Name of the app.
.PARAMETER AppVersion
Version of the app.
.PARAMETER DeviceBrand
Brand of the user device.
.PARAMETER DeviceCarrier
User device's mobile carrier.
.PARAMETER DeviceModel
Model of the user device.
.PARAMETER DeviceType
Type of the user device.
.PARAMETER OsVersion
Version of the device operating system.
.PARAMETER Wifi
Whether the event occurred when the user device was connected to wifi.
.PARAMETER Language
Two-character ISO-639-1 language code indicating the user's language.
.OUTPUTS

ConversionEventsDataInner<PSCustomObject>
#>

function Initialize-ConversionEventsDataInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionSource},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${EventTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventSourceUrl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OptOut},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartnerName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserData},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CustomData},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppName},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppVersion},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceBrand},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceCarrier},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceModel},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceType},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OsVersion},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Wifi},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Language}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConversionEventsDataInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $EventName) {
            throw "invalid value for 'EventName', 'EventName' cannot be null."
        }

        if ($null -eq $ActionSource) {
            throw "invalid value for 'ActionSource', 'ActionSource' cannot be null."
        }

        if ($null -eq $EventTime) {
            throw "invalid value for 'EventTime', 'EventTime' cannot be null."
        }

        if ($null -eq $EventId) {
            throw "invalid value for 'EventId', 'EventId' cannot be null."
        }

        if ($null -eq $UserData) {
            throw "invalid value for 'UserData', 'UserData' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "event_name" = ${EventName}
            "action_source" = ${ActionSource}
            "event_time" = ${EventTime}
            "event_id" = ${EventId}
            "event_source_url" = ${EventSourceUrl}
            "opt_out" = ${OptOut}
            "partner_name" = ${PartnerName}
            "user_data" = ${UserData}
            "custom_data" = ${CustomData}
            "app_id" = ${AppId}
            "app_name" = ${AppName}
            "app_version" = ${AppVersion}
            "device_brand" = ${DeviceBrand}
            "device_carrier" = ${DeviceCarrier}
            "device_model" = ${DeviceModel}
            "device_type" = ${DeviceType}
            "os_version" = ${OsVersion}
            "wifi" = ${Wifi}
            "language" = ${Language}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConversionEventsDataInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConversionEventsDataInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConversionEventsDataInner<PSCustomObject>
#>
function ConvertFrom-JsonToConversionEventsDataInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConversionEventsDataInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConversionEventsDataInner
        $AllProperties = ("event_name", "action_source", "event_time", "event_id", "event_source_url", "opt_out", "partner_name", "user_data", "custom_data", "app_id", "app_name", "app_version", "device_brand", "device_carrier", "device_model", "device_type", "os_version", "wifi", "language")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'event_name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'event_name' missing."
        } else {
            $EventName = $JsonParameters.PSobject.Properties["event_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_source"))) {
            throw "Error! JSON cannot be serialized due to the required property 'action_source' missing."
        } else {
            $ActionSource = $JsonParameters.PSobject.Properties["action_source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_time"))) {
            throw "Error! JSON cannot be serialized due to the required property 'event_time' missing."
        } else {
            $EventTime = $JsonParameters.PSobject.Properties["event_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'event_id' missing."
        } else {
            $EventId = $JsonParameters.PSobject.Properties["event_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user_data' missing."
        } else {
            $UserData = $JsonParameters.PSobject.Properties["user_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "event_source_url"))) { #optional property not found
            $EventSourceUrl = $null
        } else {
            $EventSourceUrl = $JsonParameters.PSobject.Properties["event_source_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "opt_out"))) { #optional property not found
            $OptOut = $null
        } else {
            $OptOut = $JsonParameters.PSobject.Properties["opt_out"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partner_name"))) { #optional property not found
            $PartnerName = $null
        } else {
            $PartnerName = $JsonParameters.PSobject.Properties["partner_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_data"))) { #optional property not found
            $CustomData = $null
        } else {
            $CustomData = $JsonParameters.PSobject.Properties["custom_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_id"))) { #optional property not found
            $AppId = $null
        } else {
            $AppId = $JsonParameters.PSobject.Properties["app_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_name"))) { #optional property not found
            $AppName = $null
        } else {
            $AppName = $JsonParameters.PSobject.Properties["app_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app_version"))) { #optional property not found
            $AppVersion = $null
        } else {
            $AppVersion = $JsonParameters.PSobject.Properties["app_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_brand"))) { #optional property not found
            $DeviceBrand = $null
        } else {
            $DeviceBrand = $JsonParameters.PSobject.Properties["device_brand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_carrier"))) { #optional property not found
            $DeviceCarrier = $null
        } else {
            $DeviceCarrier = $JsonParameters.PSobject.Properties["device_carrier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_model"))) { #optional property not found
            $DeviceModel = $null
        } else {
            $DeviceModel = $JsonParameters.PSobject.Properties["device_model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) { #optional property not found
            $DeviceType = $null
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "os_version"))) { #optional property not found
            $OsVersion = $null
        } else {
            $OsVersion = $JsonParameters.PSobject.Properties["os_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wifi"))) { #optional property not found
            $Wifi = $null
        } else {
            $Wifi = $JsonParameters.PSobject.Properties["wifi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "language"))) { #optional property not found
            $Language = $null
        } else {
            $Language = $JsonParameters.PSobject.Properties["language"].value
        }

        $PSO = [PSCustomObject]@{
            "event_name" = ${EventName}
            "action_source" = ${ActionSource}
            "event_time" = ${EventTime}
            "event_id" = ${EventId}
            "event_source_url" = ${EventSourceUrl}
            "opt_out" = ${OptOut}
            "partner_name" = ${PartnerName}
            "user_data" = ${UserData}
            "custom_data" = ${CustomData}
            "app_id" = ${AppId}
            "app_name" = ${AppName}
            "app_version" = ${AppVersion}
            "device_brand" = ${DeviceBrand}
            "device_carrier" = ${DeviceCarrier}
            "device_model" = ${DeviceModel}
            "device_type" = ${DeviceType}
            "os_version" = ${OsVersion}
            "wifi" = ${Wifi}
            "language" = ${Language}
        }

        return $PSO
    }

}

