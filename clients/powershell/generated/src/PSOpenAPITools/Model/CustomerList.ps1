#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AdAccountId
Associated ad account ID.
.PARAMETER CreatedTime
Creation time. Unix timestamp in seconds.
.PARAMETER Id
Customer list ID.
.PARAMETER Name
Customer list name.
.PARAMETER NumBatches
Total number of list updates.  List creation counts as one batch. Each <a href=""/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT"">Append</a> or <a href=""/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT"">Remove API</a> call counts as another. List creation via the Ads Manager UI could result in more than one batch since the UI breaks up large lists.
.PARAMETER NumRemovedUserRecords
Number of removed user records. In a <a href=""/docs/redoc/#operation/ads_v3_customer_list_remove_handler_PUT"">Remove API</a> call, this counter increases even if the user is not found in the list.
.PARAMETER NumUploadedUserRecords
Number of uploaded user records. In an <a href=""/docs/redoc/#operation/ads_v3_customer_list_add_handler_PUT"">Append API</a> call, this counter increases even if the uploaded user is already in the list.
.PARAMETER Status
Customer list status. TOO_SMALL - the list has less than 100 Pinterest users.
.PARAMETER Type
Always ""customerlist"".
.PARAMETER UpdatedTime
Last update time. Unix timestamp in seconds.
.PARAMETER Exceptions
Customer list errors
.OUTPUTS

CustomerList<PSCustomObject>
#>

function Initialize-CustomerList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AdAccountId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CreatedTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NumBatches},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NumRemovedUserRecords},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${NumUploadedUserRecords},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PROCESSING", "READY", "TOO_SMALL", "UPLOADING")]
        [String]
        ${Status},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${UpdatedTime},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Exceptions}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CustomerList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ad_account_id" = ${AdAccountId}
            "created_time" = ${CreatedTime}
            "id" = ${Id}
            "name" = ${Name}
            "num_batches" = ${NumBatches}
            "num_removed_user_records" = ${NumRemovedUserRecords}
            "num_uploaded_user_records" = ${NumUploadedUserRecords}
            "status" = ${Status}
            "type" = ${Type}
            "updated_time" = ${UpdatedTime}
            "exceptions" = ${Exceptions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomerList<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomerList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomerList<PSCustomObject>
#>
function ConvertFrom-JsonToCustomerList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CustomerList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomerList
        $AllProperties = ("ad_account_id", "created_time", "id", "name", "num_batches", "num_removed_user_records", "num_uploaded_user_records", "status", "type", "updated_time", "exceptions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ad_account_id"))) { #optional property not found
            $AdAccountId = $null
        } else {
            $AdAccountId = $JsonParameters.PSobject.Properties["ad_account_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_time"))) { #optional property not found
            $CreatedTime = $null
        } else {
            $CreatedTime = $JsonParameters.PSobject.Properties["created_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_batches"))) { #optional property not found
            $NumBatches = $null
        } else {
            $NumBatches = $JsonParameters.PSobject.Properties["num_batches"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_removed_user_records"))) { #optional property not found
            $NumRemovedUserRecords = $null
        } else {
            $NumRemovedUserRecords = $JsonParameters.PSobject.Properties["num_removed_user_records"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "num_uploaded_user_records"))) { #optional property not found
            $NumUploadedUserRecords = $null
        } else {
            $NumUploadedUserRecords = $JsonParameters.PSobject.Properties["num_uploaded_user_records"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_time"))) { #optional property not found
            $UpdatedTime = $null
        } else {
            $UpdatedTime = $JsonParameters.PSobject.Properties["updated_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exceptions"))) { #optional property not found
            $Exceptions = $null
        } else {
            $Exceptions = $JsonParameters.PSobject.Properties["exceptions"].value
        }

        $PSO = [PSCustomObject]@{
            "ad_account_id" = ${AdAccountId}
            "created_time" = ${CreatedTime}
            "id" = ${Id}
            "name" = ${Name}
            "num_batches" = ${NumBatches}
            "num_removed_user_records" = ${NumRemovedUserRecords}
            "num_uploaded_user_records" = ${NumUploadedUserRecords}
            "status" = ${Status}
            "type" = ${Type}
            "updated_time" = ${UpdatedTime}
            "exceptions" = ${Exceptions}
        }

        return $PSO
    }

}

