#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A successful OAuth access token response.

.PARAMETER ResponseType
No description available.
.PARAMETER AccessToken
No description available.
.PARAMETER TokenType
No description available.
.PARAMETER ExpiresIn
No description available.
.PARAMETER Scope
No description available.
.OUTPUTS

OauthAccessTokenResponse<PSCustomObject>
#>

function Initialize-OauthAccessTokenResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("authorization_code", "refresh_token", "client_credentials")]
        [String]
        ${ResponseType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessToken},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TokenType} = "bearer",
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ExpiresIn},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OauthAccessTokenResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AccessToken) {
            throw "invalid value for 'AccessToken', 'AccessToken' cannot be null."
        }

        if ($null -eq $TokenType) {
            throw "invalid value for 'TokenType', 'TokenType' cannot be null."
        }

        if ($null -eq $ExpiresIn) {
            throw "invalid value for 'ExpiresIn', 'ExpiresIn' cannot be null."
        }

        if ($null -eq $Scope) {
            throw "invalid value for 'Scope', 'Scope' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "response_type" = ${ResponseType}
            "access_token" = ${AccessToken}
            "token_type" = ${TokenType}
            "expires_in" = ${ExpiresIn}
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OauthAccessTokenResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to OauthAccessTokenResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OauthAccessTokenResponse<PSCustomObject>
#>
function ConvertFrom-JsonToOauthAccessTokenResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OauthAccessTokenResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OauthAccessTokenResponse
        $AllProperties = ("response_type", "access_token", "token_type", "expires_in", "scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'access_token' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access_token"))) {
            throw "Error! JSON cannot be serialized due to the required property 'access_token' missing."
        } else {
            $AccessToken = $JsonParameters.PSobject.Properties["access_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'token_type' missing."
        } else {
            $TokenType = $JsonParameters.PSobject.Properties["token_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires_in"))) {
            throw "Error! JSON cannot be serialized due to the required property 'expires_in' missing."
        } else {
            $ExpiresIn = $JsonParameters.PSobject.Properties["expires_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) {
            throw "Error! JSON cannot be serialized due to the required property 'scope' missing."
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_type"))) { #optional property not found
            $ResponseType = $null
        } else {
            $ResponseType = $JsonParameters.PSobject.Properties["response_type"].value
        }

        $PSO = [PSCustomObject]@{
            "response_type" = ${ResponseType}
            "access_token" = ${AccessToken}
            "token_type" = ${TokenType}
            "expires_in" = ${ExpiresIn}
            "scope" = ${Scope}
        }

        return $PSO
    }

}

