#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Retail product metadata entity

.PARAMETER ItemId
The user-created unique ID that represents the product.
.PARAMETER ItemGroupId
The parent ID of the product.
.PARAMETER Availability
No description available.
.PARAMETER Price
The price of the product.
.PARAMETER SalePrice
The discounted price of the product.
.PARAMETER Currency
No description available.
.OUTPUTS

CatalogsRetailProductMetadata<PSCustomObject>
#>

function Initialize-CatalogsRetailProductMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemGroupId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IN_STOCK", "OUT_OF_STOCK", "PREORDER")]
        [PSCustomObject]
        ${Availability},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Price},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${SalePrice},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SPL", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMW", "ZWD")]
        [PSCustomObject]
        ${Currency}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsRetailProductMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ItemId) {
            throw "invalid value for 'ItemId', 'ItemId' cannot be null."
        }

        if ($null -eq $Availability) {
            throw "invalid value for 'Availability', 'Availability' cannot be null."
        }

        if ($null -eq $Price) {
            throw "invalid value for 'Price', 'Price' cannot be null."
        }

        if ($null -eq $Currency) {
            throw "invalid value for 'Currency', 'Currency' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "item_group_id" = ${ItemGroupId}
            "availability" = ${Availability}
            "price" = ${Price}
            "sale_price" = ${SalePrice}
            "currency" = ${Currency}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsRetailProductMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsRetailProductMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsRetailProductMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsRetailProductMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsRetailProductMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsRetailProductMetadata
        $AllProperties = ("item_id", "item_group_id", "availability", "price", "sale_price", "currency")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'item_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_id' missing."
        } else {
            $ItemId = $JsonParameters.PSobject.Properties["item_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_group_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'item_group_id' missing."
        } else {
            $ItemGroupId = $JsonParameters.PSobject.Properties["item_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability"))) {
            throw "Error! JSON cannot be serialized due to the required property 'availability' missing."
        } else {
            $Availability = $JsonParameters.PSobject.Properties["availability"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) {
            throw "Error! JSON cannot be serialized due to the required property 'price' missing."
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sale_price"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sale_price' missing."
        } else {
            $SalePrice = $JsonParameters.PSobject.Properties["sale_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) {
            throw "Error! JSON cannot be serialized due to the required property 'currency' missing."
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        $PSO = [PSCustomObject]@{
            "item_id" = ${ItemId}
            "item_group_id" = ${ItemGroupId}
            "availability" = ${Availability}
            "price" = ${Price}
            "sale_price" = ${SalePrice}
            "currency" = ${Currency}
        }

        return $PSO
    }

}

