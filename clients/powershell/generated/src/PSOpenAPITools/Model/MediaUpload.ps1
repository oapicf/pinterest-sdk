#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Media upload that has been registered but not uploaded/processed yet.

.PARAMETER MediaId
Unique identifier for this media upload. Used to track status and for attaching during Pin creation.
.PARAMETER MediaType
No description available.
.PARAMETER UploadUrl
The URL where you will POST your media file.
.PARAMETER UploadParameters
No description available.
.OUTPUTS

MediaUpload<PSCustomObject>
#>

function Initialize-MediaUpload {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MediaId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("video")]
        [PSCustomObject]
        ${MediaType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UploadUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UploadParameters}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MediaUpload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "media_id" = ${MediaId}
            "media_type" = ${MediaType}
            "upload_url" = ${UploadUrl}
            "upload_parameters" = ${UploadParameters}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MediaUpload<PSCustomObject>

.DESCRIPTION

Convert from JSON to MediaUpload<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MediaUpload<PSCustomObject>
#>
function ConvertFrom-JsonToMediaUpload {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MediaUpload' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MediaUpload
        $AllProperties = ("media_id", "media_type", "upload_url", "upload_parameters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media_id"))) { #optional property not found
            $MediaId = $null
        } else {
            $MediaId = $JsonParameters.PSobject.Properties["media_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media_type"))) { #optional property not found
            $MediaType = $null
        } else {
            $MediaType = $JsonParameters.PSobject.Properties["media_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upload_url"))) { #optional property not found
            $UploadUrl = $null
        } else {
            $UploadUrl = $JsonParameters.PSobject.Properties["upload_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upload_parameters"))) { #optional property not found
            $UploadParameters = $null
        } else {
            $UploadParameters = $JsonParameters.PSobject.Properties["upload_parameters"].value
        }

        $PSO = [PSCustomObject]@{
            "media_id" = ${MediaId}
            "media_type" = ${MediaType}
            "upload_url" = ${UploadUrl}
            "upload_parameters" = ${UploadParameters}
        }

        return $PSO
    }

}

