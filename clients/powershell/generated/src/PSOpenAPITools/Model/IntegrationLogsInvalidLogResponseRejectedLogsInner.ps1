#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LogIndex
Index of the log in the batch.
.PARAMETER Field
The field name containing an invalid value.
.PARAMETER Value
The value that is invalid.
.PARAMETER Reason
The reason the value is invalid.
.OUTPUTS

IntegrationLogsInvalidLogResponseRejectedLogsInner<PSCustomObject>
#>

function Initialize-IntegrationLogsInvalidLogResponseRejectedLogsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LogIndex},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Field},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IntegrationLogsInvalidLogResponseRejectedLogsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Field) {
            throw "invalid value for 'Field', 'Field' cannot be null."
        }

        if ($null -eq $Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }

        if ($null -eq $Reason) {
            throw "invalid value for 'Reason', 'Reason' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "log_index" = ${LogIndex}
            "field" = ${Field}
            "value" = ${Value}
            "reason" = ${Reason}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IntegrationLogsInvalidLogResponseRejectedLogsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to IntegrationLogsInvalidLogResponseRejectedLogsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IntegrationLogsInvalidLogResponseRejectedLogsInner<PSCustomObject>
#>
function ConvertFrom-JsonToIntegrationLogsInvalidLogResponseRejectedLogsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IntegrationLogsInvalidLogResponseRejectedLogsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IntegrationLogsInvalidLogResponseRejectedLogsInner
        $AllProperties = ("log_index", "field", "value", "reason")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'field' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) {
            throw "Error! JSON cannot be serialized due to the required property 'field' missing."
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) {
            throw "Error! JSON cannot be serialized due to the required property 'reason' missing."
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_index"))) { #optional property not found
            $LogIndex = $null
        } else {
            $LogIndex = $JsonParameters.PSobject.Properties["log_index"].value
        }

        $PSO = [PSCustomObject]@{
            "log_index" = ${LogIndex}
            "field" = ${Field}
            "value" = ${Value}
            "reason" = ${Reason}
        }

        return $PSO
    }

}

