#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Product counts for a Creative Assets CatalogsProductGroup

.PARAMETER CatalogType
No description available.
.PARAMETER Total
No description available.
.PARAMETER Videos
No description available.
.OUTPUTS

CatalogsCreativeAssetsProductGroupProductCounts<PSCustomObject>
#>

function Initialize-CatalogsCreativeAssetsProductGroupProductCounts {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREATIVE_ASSETS")]
        [String]
        ${CatalogType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Total},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Videos}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsCreativeAssetsProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CatalogType) {
            throw "invalid value for 'CatalogType', 'CatalogType' cannot be null."
        }

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }

        if ($Total -lt 0) {
          throw "invalid value for 'Total', must be greater than or equal to 0."
        }

        if ($null -eq $Videos) {
            throw "invalid value for 'Videos', 'Videos' cannot be null."
        }

        if ($Videos -lt 0) {
          throw "invalid value for 'Videos', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "total" = ${Total}
            "videos" = ${Videos}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsCreativeAssetsProductGroupProductCounts<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsCreativeAssetsProductGroupProductCounts<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsCreativeAssetsProductGroupProductCounts<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsCreativeAssetsProductGroupProductCounts {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsCreativeAssetsProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsCreativeAssetsProductGroupProductCounts
        $AllProperties = ("catalog_type", "total", "videos")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'catalog_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalog_type' missing."
        } else {
            $CatalogType = $JsonParameters.PSobject.Properties["catalog_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "videos"))) {
            throw "Error! JSON cannot be serialized due to the required property 'videos' missing."
        } else {
            $Videos = $JsonParameters.PSobject.Properties["videos"].value
        }

        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "total" = ${Total}
            "videos" = ${Videos}
        }

        return $PSO
    }

}

