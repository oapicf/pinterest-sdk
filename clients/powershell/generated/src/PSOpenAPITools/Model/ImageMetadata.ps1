#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ItemType
No description available.
.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.PARAMETER Link
No description available.
.PARAMETER Images
No description available.
.OUTPUTS

ImageMetadata<PSCustomObject>
#>

function Initialize-ImageMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Link},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Images}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ImageMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "item_type" = ${ItemType}
            "title" = ${Title}
            "description" = ${Description}
            "link" = ${Link}
            "images" = ${Images}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImageMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImageMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImageMetadata<PSCustomObject>
#>
function ConvertFrom-JsonToImageMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ImageMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImageMetadata
        $AllProperties = ("item_type", "title", "description", "link", "images")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_type"))) { #optional property not found
            $ItemType = $null
        } else {
            $ItemType = $JsonParameters.PSobject.Properties["item_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link"))) { #optional property not found
            $Link = $null
        } else {
            $Link = $JsonParameters.PSobject.Properties["link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "images"))) { #optional property not found
            $Images = $null
        } else {
            $Images = $JsonParameters.PSobject.Properties["images"].value
        }

        $PSO = [PSCustomObject]@{
            "item_type" = ${ItemType}
            "title" = ${Title}
            "description" = ${Description}
            "link" = ${Link}
            "images" = ${Images}
        }

        return $PSO
    }

}

