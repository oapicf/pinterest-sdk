#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Product counts for a Retail CatalogsProductGroup

.PARAMETER CatalogType
No description available.
.PARAMETER InStock
No description available.
.PARAMETER OutOfStock
No description available.
.PARAMETER Preorder
No description available.
.PARAMETER Total
No description available.
.PARAMETER Videos
No description available.
.OUTPUTS

CatalogsRetailProductGroupProductCounts<PSCustomObject>
#>

function Initialize-CatalogsRetailProductGroupProductCounts {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RETAIL")]
        [String]
        ${CatalogType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${InStock},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${OutOfStock},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Preorder},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Total},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Videos}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsRetailProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CatalogType) {
            throw "invalid value for 'CatalogType', 'CatalogType' cannot be null."
        }

        if ($null -eq $InStock) {
            throw "invalid value for 'InStock', 'InStock' cannot be null."
        }

        if ($InStock -lt 0) {
          throw "invalid value for 'InStock', must be greater than or equal to 0."
        }

        if ($null -eq $OutOfStock) {
            throw "invalid value for 'OutOfStock', 'OutOfStock' cannot be null."
        }

        if ($OutOfStock -lt 0) {
          throw "invalid value for 'OutOfStock', must be greater than or equal to 0."
        }

        if ($null -eq $Preorder) {
            throw "invalid value for 'Preorder', 'Preorder' cannot be null."
        }

        if ($Preorder -lt 0) {
          throw "invalid value for 'Preorder', must be greater than or equal to 0."
        }

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }

        if ($Total -lt 0) {
          throw "invalid value for 'Total', must be greater than or equal to 0."
        }

        if ($Videos -and $Videos -lt 0) {
          throw "invalid value for 'Videos', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "in_stock" = ${InStock}
            "out_of_stock" = ${OutOfStock}
            "preorder" = ${Preorder}
            "total" = ${Total}
            "videos" = ${Videos}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsRetailProductGroupProductCounts<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsRetailProductGroupProductCounts<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsRetailProductGroupProductCounts<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsRetailProductGroupProductCounts {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsRetailProductGroupProductCounts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsRetailProductGroupProductCounts
        $AllProperties = ("catalog_type", "in_stock", "out_of_stock", "preorder", "total", "videos")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'catalog_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "catalog_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'catalog_type' missing."
        } else {
            $CatalogType = $JsonParameters.PSobject.Properties["catalog_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "in_stock"))) {
            throw "Error! JSON cannot be serialized due to the required property 'in_stock' missing."
        } else {
            $InStock = $JsonParameters.PSobject.Properties["in_stock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "out_of_stock"))) {
            throw "Error! JSON cannot be serialized due to the required property 'out_of_stock' missing."
        } else {
            $OutOfStock = $JsonParameters.PSobject.Properties["out_of_stock"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preorder"))) {
            throw "Error! JSON cannot be serialized due to the required property 'preorder' missing."
        } else {
            $Preorder = $JsonParameters.PSobject.Properties["preorder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "videos"))) { #optional property not found
            $Videos = $null
        } else {
            $Videos = $JsonParameters.PSobject.Properties["videos"].value
        }

        $PSO = [PSCustomObject]@{
            "catalog_type" = ${CatalogType}
            "in_stock" = ${InStock}
            "out_of_stock" = ${OutOfStock}
            "preorder" = ${Preorder}
            "total" = ${Total}
            "videos" = ${Videos}
        }

        return $PSO
    }

}

