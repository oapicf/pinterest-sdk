#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
The id of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href=""https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs"" target=""_blank"">here</a> (Install the Pinterest tag section).
.PARAMETER ItemPrice
The price of a product. Accepted as a string in the request; it will be parsed into a double. This is the original item value before any discount. We recommend using this if you are a merchant for PageVisit, AddToCart and Checkouts. For detail, please check <a href=""https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs"" target=""_blank"">here</a> (Install the Pinterest tag section).
.PARAMETER Quantity
The amount of a product. We recommend using this if you are a merchant for AddToCart and Checkouts. For detail, please check <a href=""https://help.pinterest.com/en/business/article/before-you-get-started-with-catalogs"" target=""_blank"">here</a> (Install the Pinterest tag section).
.PARAMETER ItemName
The name of a product.
.PARAMETER ItemCategory
The category of a product.
.PARAMETER ItemBrand
The brand of a product.
.OUTPUTS

ConversionEventsDataInnerCustomDataContentsInner<PSCustomObject>
#>

function Initialize-ConversionEventsDataInnerCustomDataContentsInner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemPrice},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Quantity},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemCategory},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ItemBrand}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConversionEventsDataInnerCustomDataContentsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "item_price" = ${ItemPrice}
            "quantity" = ${Quantity}
            "item_name" = ${ItemName}
            "item_category" = ${ItemCategory}
            "item_brand" = ${ItemBrand}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConversionEventsDataInnerCustomDataContentsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConversionEventsDataInnerCustomDataContentsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConversionEventsDataInnerCustomDataContentsInner<PSCustomObject>
#>
function ConvertFrom-JsonToConversionEventsDataInnerCustomDataContentsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConversionEventsDataInnerCustomDataContentsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConversionEventsDataInnerCustomDataContentsInner
        $AllProperties = ("id", "item_price", "quantity", "item_name", "item_category", "item_brand")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_price"))) { #optional property not found
            $ItemPrice = $null
        } else {
            $ItemPrice = $JsonParameters.PSobject.Properties["item_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quantity"))) { #optional property not found
            $Quantity = $null
        } else {
            $Quantity = $JsonParameters.PSobject.Properties["quantity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_name"))) { #optional property not found
            $ItemName = $null
        } else {
            $ItemName = $JsonParameters.PSobject.Properties["item_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_category"))) { #optional property not found
            $ItemCategory = $null
        } else {
            $ItemCategory = $JsonParameters.PSobject.Properties["item_category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "item_brand"))) { #optional property not found
            $ItemBrand = $null
        } else {
            $ItemBrand = $JsonParameters.PSobject.Properties["item_brand"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "item_price" = ${ItemPrice}
            "quantity" = ${Quantity}
            "item_name" = ${ItemName}
            "item_category" = ${ItemCategory}
            "item_brand" = ${ItemBrand}
        }

        return $PSO
    }

}

