#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ReportName
Name of the Marketing Mix Modeling (MMM) report
.PARAMETER StartDate
Metric report start date (UTC). Format: YYYY-MM-DD
.PARAMETER EndDate
Metric report end date (UTC). Format: YYYY-MM-DD
.PARAMETER Granularity
DAY - metrics are broken down daily.<br> WEEK - metrics are broken down weekly.
.PARAMETER Level
Level of the report
.PARAMETER TargetingTypes
List of targeting types
.PARAMETER Columns
Metric and entity columns
.PARAMETER Countries
A List of countries for filtering
.OUTPUTS

CreateMMMReportRequest<PSCustomObject>
#>

function Initialize-CreateMMMReportRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReportName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d{4})-(\d{2})-(\d{2})$")]
        [String]
        ${StartDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^(\d{4})-(\d{2})-(\d{2})$")]
        [String]
        ${EndDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DAY", "WEEK")]
        [String]
        ${Granularity},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CAMPAIGN_TARGETING", "AD_GROUP_TARGETING")]
        [String]
        ${Level},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TargetingTypes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Columns},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Countries}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateMMMReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ReportName) {
            throw "invalid value for 'ReportName', 'ReportName' cannot be null."
        }

        if ($null -eq $StartDate) {
            throw "invalid value for 'StartDate', 'StartDate' cannot be null."
        }

        if ($null -eq $EndDate) {
            throw "invalid value for 'EndDate', 'EndDate' cannot be null."
        }

        if ($null -eq $Granularity) {
            throw "invalid value for 'Granularity', 'Granularity' cannot be null."
        }

        if ($null -eq $Level) {
            throw "invalid value for 'Level', 'Level' cannot be null."
        }

        if ($null -eq $TargetingTypes) {
            throw "invalid value for 'TargetingTypes', 'TargetingTypes' cannot be null."
        }

        if ($TargetingTypes.length -gt 5) {
            throw "invalid value for 'TargetingTypes', number of items must be less than or equal to 5."
        }

        if ($TargetingTypes.length -lt 1) {
            throw "invalid value for 'TargetingTypes', number of items must be greater than or equal to 1."
        }

        if ($null -eq $Columns) {
            throw "invalid value for 'Columns', 'Columns' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "report_name" = ${ReportName}
            "start_date" = ${StartDate}
            "end_date" = ${EndDate}
            "granularity" = ${Granularity}
            "level" = ${Level}
            "targeting_types" = ${TargetingTypes}
            "columns" = ${Columns}
            "countries" = ${Countries}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateMMMReportRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateMMMReportRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateMMMReportRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCreateMMMReportRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateMMMReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateMMMReportRequest
        $AllProperties = ("report_name", "start_date", "end_date", "granularity", "level", "targeting_types", "columns", "countries")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'report_name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "report_name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'report_name' missing."
        } else {
            $ReportName = $JsonParameters.PSobject.Properties["report_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_date"))) {
            throw "Error! JSON cannot be serialized due to the required property 'start_date' missing."
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["start_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_date"))) {
            throw "Error! JSON cannot be serialized due to the required property 'end_date' missing."
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["end_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "granularity"))) {
            throw "Error! JSON cannot be serialized due to the required property 'granularity' missing."
        } else {
            $Granularity = $JsonParameters.PSobject.Properties["granularity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) {
            throw "Error! JSON cannot be serialized due to the required property 'level' missing."
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targeting_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'targeting_types' missing."
        } else {
            $TargetingTypes = $JsonParameters.PSobject.Properties["targeting_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "columns"))) {
            throw "Error! JSON cannot be serialized due to the required property 'columns' missing."
        } else {
            $Columns = $JsonParameters.PSobject.Properties["columns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countries"))) { #optional property not found
            $Countries = $null
        } else {
            $Countries = $JsonParameters.PSobject.Properties["countries"].value
        }

        $PSO = [PSCustomObject]@{
            "report_name" = ${ReportName}
            "start_date" = ${StartDate}
            "end_date" = ${EndDate}
            "granularity" = ${Granularity}
            "level" = ${Level}
            "targeting_types" = ${TargetingTypes}
            "columns" = ${Columns}
            "countries" = ${Countries}
        }

        return $PSO
    }

}

