#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Board

.PARAMETER Id
No description available.
.PARAMETER CreatedAt
Date and time of board creation.
.PARAMETER BoardPinsModifiedAt
Date and time of last board pins modified.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER CollaboratorCount
Count of collaborators on the board.
.PARAMETER PinCount
Count of pins on the board.
.PARAMETER FollowerCount
Board follower count.
.PARAMETER Media
No description available.
.PARAMETER Owner
No description available.
.PARAMETER Privacy
Privacy setting for a board. Learn more about <a href=""https://help.pinterest.com/en/article/secret-boards"">secret boards</a> and <a href=""https://help.pinterest.com/en/business/article/protected-boards"">protected boards</a>
.OUTPUTS

Board<PSCustomObject>
#>

function Initialize-Board {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${BoardPinsModifiedAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CollaboratorCount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PinCount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FollowerCount},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Media},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PUBLIC", "PROTECTED", "SECRET")]
        [String]
        ${Privacy} = "PUBLIC"
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Board' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($CollaboratorCount -and $CollaboratorCount -lt 0) {
          throw "invalid value for 'CollaboratorCount', must be greater than or equal to 0."
        }

        if ($PinCount -and $PinCount -lt 0) {
          throw "invalid value for 'PinCount', must be greater than or equal to 0."
        }

        if ($FollowerCount -and $FollowerCount -lt 0) {
          throw "invalid value for 'FollowerCount', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "board_pins_modified_at" = ${BoardPinsModifiedAt}
            "name" = ${Name}
            "description" = ${Description}
            "collaborator_count" = ${CollaboratorCount}
            "pin_count" = ${PinCount}
            "follower_count" = ${FollowerCount}
            "media" = ${Media}
            "owner" = ${Owner}
            "privacy" = ${Privacy}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Board<PSCustomObject>

.DESCRIPTION

Convert from JSON to Board<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Board<PSCustomObject>
#>
function ConvertFrom-JsonToBoard {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Board' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Board
        $AllProperties = ("id", "created_at", "board_pins_modified_at", "name", "description", "collaborator_count", "pin_count", "follower_count", "media", "owner", "privacy")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "board_pins_modified_at"))) { #optional property not found
            $BoardPinsModifiedAt = $null
        } else {
            $BoardPinsModifiedAt = $JsonParameters.PSobject.Properties["board_pins_modified_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "collaborator_count"))) { #optional property not found
            $CollaboratorCount = $null
        } else {
            $CollaboratorCount = $JsonParameters.PSobject.Properties["collaborator_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pin_count"))) { #optional property not found
            $PinCount = $null
        } else {
            $PinCount = $JsonParameters.PSobject.Properties["pin_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "follower_count"))) { #optional property not found
            $FollowerCount = $null
        } else {
            $FollowerCount = $JsonParameters.PSobject.Properties["follower_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media"))) { #optional property not found
            $Media = $null
        } else {
            $Media = $JsonParameters.PSobject.Properties["media"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privacy"))) { #optional property not found
            $Privacy = $null
        } else {
            $Privacy = $JsonParameters.PSobject.Properties["privacy"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "board_pins_modified_at" = ${BoardPinsModifiedAt}
            "name" = ${Name}
            "description" = ${Description}
            "collaborator_count" = ${CollaboratorCount}
            "pin_count" = ${PinCount}
            "follower_count" = ${FollowerCount}
            "media" = ${Media}
            "owner" = ${Owner}
            "privacy" = ${Privacy}
        }

        return $PSO
    }

}

