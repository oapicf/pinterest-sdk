#
# Pinterest REST API
# Pinterest's REST API
# Version: 5.14.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CreatedAt
No description available.
.PARAMETER Id
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER IngestionDetails
No description available.
.PARAMETER Status
No description available.
.PARAMETER ProductCounts
No description available.
.PARAMETER ValidationDetails
No description available.
.OUTPUTS

CatalogsFeedProcessingResult<PSCustomObject>
#>

function Initialize-CatalogsFeedProcessingResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${UpdatedAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IngestionDetails},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("COMPLETED", "FAILED", "PROCESSING")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProductCounts},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ValidationDetails}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CatalogsFeedProcessingResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $UpdatedAt) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($null -eq $IngestionDetails) {
            throw "invalid value for 'IngestionDetails', 'IngestionDetails' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $ValidationDetails) {
            throw "invalid value for 'ValidationDetails', 'ValidationDetails' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "created_at" = ${CreatedAt}
            "id" = ${Id}
            "updated_at" = ${UpdatedAt}
            "ingestion_details" = ${IngestionDetails}
            "status" = ${Status}
            "product_counts" = ${ProductCounts}
            "validation_details" = ${ValidationDetails}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CatalogsFeedProcessingResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to CatalogsFeedProcessingResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CatalogsFeedProcessingResult<PSCustomObject>
#>
function ConvertFrom-JsonToCatalogsFeedProcessingResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CatalogsFeedProcessingResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CatalogsFeedProcessingResult
        $AllProperties = ("created_at", "id", "updated_at", "ingestion_details", "status", "product_counts", "validation_details")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'created_at' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updated_at' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updated_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ingestion_details"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ingestion_details' missing."
        } else {
            $IngestionDetails = $JsonParameters.PSobject.Properties["ingestion_details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "product_counts"))) {
            throw "Error! JSON cannot be serialized due to the required property 'product_counts' missing."
        } else {
            $ProductCounts = $JsonParameters.PSobject.Properties["product_counts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_details"))) {
            throw "Error! JSON cannot be serialized due to the required property 'validation_details' missing."
        } else {
            $ValidationDetails = $JsonParameters.PSobject.Properties["validation_details"].value
        }

        $PSO = [PSCustomObject]@{
            "created_at" = ${CreatedAt}
            "id" = ${Id}
            "updated_at" = ${UpdatedAt}
            "ingestion_details" = ${IngestionDetails}
            "status" = ${Status}
            "product_counts" = ${ProductCounts}
            "validation_details" = ${ValidationDetails}
        }

        return $PSO
    }

}

