/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.api;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import org.openapitools.model.*;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.LoggingLevel;

@Component
public class AdAccountsApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        

        /**
        GET /ad_accounts/{ad_account_id}/analytics : Get ad account analytics
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/analytics")
                .description("Get ad account analytics")
                .id("adAccountAnalyticsApi")
                .produces("application/json")
                .outType(AdAccountAnalyticsResponseInner[].class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("startDate")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.")
                .endParam()
                .param()
                    .name("endDate")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.")
                .endParam()
                .param()
                    .name("columns")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned")
                .endParam()
                .param()
                    .name("granularity")
                    .type(RestParamType.query)
                    .required(true)
                    .description("TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly")
                .endParam()
                .param()
                    .name("clickWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.")
                .endParam()
                .param()
                    .name("engagementWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.")
                .endParam()
                .param()
                    .name("viewWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.")
                .endParam()
                .param()
                    .name("conversionReportTime")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.")
                .endParam()
                .to("direct:adAccountAnalytics");
        

        /**
        GET /ad_accounts/{ad_account_id}/targeting_analytics : Get targeting analytics for an ad account
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/targeting_analytics")
                .description("Get targeting analytics for an ad account")
                .id("adAccountTargetingAnalyticsGetApi")
                .produces("application/json")
                .outType(MetricsResponse.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("startDate")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days back from today.")
                .endParam()
                .param()
                    .name("endDate")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 90 days past start_date.")
                .endParam()
                .param()
                    .name("targetingTypes")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Targeting type breakdowns for the report. The reporting per targeting type <br> is independent from each other. [\"AGE_BUCKET_AND_GENDER\"] is in BETA and not yet available to all users.")
                .endParam()
                .param()
                    .name("columns")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Columns to retrieve, encoded as a comma-separated string. **NOTE**: Any metrics defined as MICRO_DOLLARS returns a value based on the advertiser profile's currency field. For USD,($1/1,000,000, or $0.000001 - one one-ten-thousandth of a cent). it's microdollars. Otherwise, it's in microunits of the advertiser's currency.<br/>For example, if the advertiser's currency is GBP (British pound sterling), all MICRO_DOLLARS fields will be in GBP microunits (1/1,000,000 British pound).<br/>If a column has no value, it may not be returned")
                .endParam()
                .param()
                    .name("granularity")
                    .type(RestParamType.query)
                    .required(true)
                    .description("TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly")
                .endParam()
                .param()
                    .name("clickWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for a pin click action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.")
                .endParam()
                .param()
                    .name("engagementWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for an engagement action. Engagements include saves, closeups, link clicks, and carousel card swipes. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `30` days.")
                .endParam()
                .param()
                    .name("viewWindowDays")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Number of days to use as the conversion attribution window for a view action. Applies to Pinterest Tag conversion metrics. Prior conversion tags use their defined attribution windows. If not specified, defaults to `1` day.")
                .endParam()
                .param()
                    .name("conversionReportTime")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.")
                .endParam()
                .param()
                    .name("attributionTypes")
                    .type(RestParamType.query)
                    .required(false)
                    .description("List of types of attribution for the conversion report")
                .endParam()
                .to("direct:adAccountTargetingAnalyticsGet");
        

        /**
        POST /ad_accounts : Create ad account
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:write","Create, update, or delete ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .post("/ad_accounts")
                .description("Create ad account")
                .id("adAccountsCreateApi")
                .produces("application/json")
                .outType(AdAccount.class)
                .consumes("application/json")
                .type(AdAccountCreateRequest.class)
                
                .param()
                    .name("adAccountCreateRequest")
                    .type(RestParamType.body)
                    .required(true)
                    .description("Ad account to create.")
                .endParam()
                .to("direct:adAccountsCreate");
        

        /**
        GET /ad_accounts/{ad_account_id} : Get ad account
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}")
                .description("Get ad account")
                .id("adAccountsGetApi")
                .produces("application/json")
                .outType(AdAccount.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .to("direct:adAccountsGet");
        

        /**
        GET /ad_accounts : List ad accounts
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts")
                .description("List ad accounts")
                .id("adAccountsListApi")
                .produces("application/json")
                .outType(AdAccountsList200Response.class)
                .param()
                    .name("bookmark")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Cursor used to fetch the next page of items")
                .endParam()
                .param()
                    .name("pageSize")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
                .endParam()
                .param()
                    .name("includeSharedAccounts")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Include shared ad accounts")
                .endParam()
                .to("direct:adAccountsList");
        

        /**
        POST /ad_accounts/{ad_account_id}/mmm_reports : Create a request for a Marketing Mix Modeling (MMM) report
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .post("/ad_accounts/{ad_account_id}/mmm_reports")
                .description("Create a request for a Marketing Mix Modeling (MMM) report")
                .id("analyticsCreateMmmReportApi")
                .produces("application/json")
                .outType(CreateMMMReportResponse.class)
                .consumes("application/json")
                .type(CreateMMMReportRequest.class)
                
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("createMMMReportRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:analyticsCreateMmmReport");
        

        /**
        POST /ad_accounts/{ad_account_id}/reports : Create async request for an account analytics report
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .post("/ad_accounts/{ad_account_id}/reports")
                .description("Create async request for an account analytics report")
                .id("analyticsCreateReportApi")
                .produces("application/json")
                .outType(AdsAnalyticsCreateAsyncResponse.class)
                .consumes("application/json")
                .type(AdsAnalyticsCreateAsyncRequest.class)
                
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("adsAnalyticsCreateAsyncRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:analyticsCreateReport");
        

        /**
        POST /ad_accounts/{ad_account_id}/templates/{template_id}/reports : Create async request for an analytics report using a template
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .post("/ad_accounts/{ad_account_id}/templates/{template_id}/reports")
                .description("Create async request for an analytics report using a template")
                .id("analyticsCreateTemplateReportApi")
                .produces("application/json")
                .outType(AdsAnalyticsCreateAsyncResponse.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("templateId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of a template.")
                .endParam()
                .param()
                    .name("startDate")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Metric report start date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years back from today.")
                .endParam()
                .param()
                    .name("endDate")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Metric report end date (UTC). Format: YYYY-MM-DD. Cannot be more than 2.5 years past start date.")
                .endParam()
                .param()
                    .name("granularity")
                    .type(RestParamType.query)
                    .required(false)
                    .description("TOTAL - metrics are aggregated over the specified date range.<br> DAY - metrics are broken down daily.<br> HOUR - metrics are broken down hourly.<br>WEEKLY - metrics are broken down weekly.<br>MONTHLY - metrics are broken down monthly")
                .endParam()
                .to("direct:analyticsCreateTemplateReport");
        

        /**
        GET /ad_accounts/{ad_account_id}/mmm_reports : Get advertiser Marketing Mix Modeling (MMM) report.
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/mmm_reports")
                .description("Get advertiser Marketing Mix Modeling (MMM) report.")
                .id("analyticsGetMmmReportApi")
                .produces("application/json")
                .outType(GetMMMReportResponse.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("token")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Token returned from the post request creation call")
                .endParam()
                .to("direct:analyticsGetMmmReport");
        

        /**
        GET /ad_accounts/{ad_account_id}/reports : Get the account analytics report created by the async call
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/reports")
                .description("Get the account analytics report created by the async call")
                .id("analyticsGetReportApi")
                .produces("application/json")
                .outType(AdsAnalyticsGetAsyncResponse.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("token")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Token returned from the post request creation call")
                .endParam()
                .to("direct:analyticsGetReport");
        

        /**
        DELETE /ad_accounts/{ad_account_id}/sandbox : Delete ads data for ad account in API Sandbox
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:write","Create, update, or delete ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .delete("/ad_accounts/{ad_account_id}/sandbox")
                .description("Delete ads data for ad account in API Sandbox")
                .id("sandboxDeleteApi")
                .produces("application/json")
                .outType(String.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .to("direct:sandboxDelete");
        

        /**
        GET /ad_accounts/{ad_account_id}/templates : List templates
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/templates")
                .description("List templates")
                .id("templatesListApi")
                .produces("application/json")
                .outType(TemplatesList200Response.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("pageSize")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
                .endParam()
                .param()
                    .name("order")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The order in which to sort the items returned: “ASCENDING” or “DESCENDING” by ID. Note that higher-value IDs are associated with more-recently added items.")
                .endParam()
                .param()
                    .name("bookmark")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Cursor used to fetch the next page of items")
                .endParam()
                .to("direct:templatesList");
        
    }
}
