/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.api;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import org.openapitools.model.*;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.LoggingLevel;

@Component
public class KeywordsApi extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        

        /**
        GET /ad_accounts/{ad_account_id}/keywords/metrics : Get country&#39;s keyword metrics
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/keywords/metrics")
                .description("Get country's keyword metrics")
                .id("countryKeywordsMetricsGetApi")
                .produces("application/json")
                .outType(KeywordsMetricsArrayResponse.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("countryCode")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Two letter country code (ISO 3166-1 alpha-2)")
                .endParam()
                .param()
                    .name("keywords")
                    .type(RestParamType.query)
                    .required(true)
                    .description("Comma-separated keywords")
                .endParam()
                .to("direct:countryKeywordsMetricsGet");
        

        /**
        POST /ad_accounts/{ad_account_id}/keywords : Create keywords
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:write","Create, update, or delete ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .post("/ad_accounts/{ad_account_id}/keywords")
                .description("Create keywords")
                .id("keywordsCreateApi")
                .produces("application/json")
                .outType(KeywordsResponse.class)
                .consumes("application/json")
                .type(KeywordsRequest.class)
                
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("keywordsRequest")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:keywordsCreate");
        

        /**
        GET /ad_accounts/{ad_account_id}/keywords : Get keywords
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:read","See all of your advertising data, including ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .get("/ad_accounts/{ad_account_id}/keywords")
                .description("Get keywords")
                .id("keywordsGetApi")
                .produces("application/json")
                .outType(KeywordsGet200Response.class)
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("campaignId")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Campaign Id to use to filter the results.")
                .endParam()
                .param()
                    .name("adGroupId")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Ad group Id.")
                .endParam()
                .param()
                    .name("matchTypes")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Keyword <a target=\"_blank\" href=\"/docs/api-features/targeting-overview/\">match type</a>")
                .endParam()
                .param()
                    .name("pageSize")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Maximum number of items to include in a single page of the response. See documentation on <a href='/docs/reference/pagination/'>Pagination</a> for more information.")
                .endParam()
                .param()
                    .name("bookmark")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Cursor used to fetch the next page of items")
                .endParam()
                .to("direct:keywordsGet");
        

        /**
        PATCH /ad_accounts/{ad_account_id}/keywords : Update keywords
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("ads:write","Create, update, or delete ads, ad groups, campaigns etc.")
                
            .endSecurityDefinition()
            .patch("/ad_accounts/{ad_account_id}/keywords")
                .description("Update keywords")
                .id("keywordsUpdateApi")
                .produces("application/json")
                .outType(KeywordsResponse.class)
                .consumes("application/json")
                .type(KeywordUpdateBody.class)
                
                .param()
                    .name("adAccountId")
                    .type(RestParamType.path)
                    .required(true)
                    .description("Unique identifier of an ad account.")
                .endParam()
                .param()
                    .name("keywordUpdateBody")
                    .type(RestParamType.body)
                    .required(true)
                .endParam()
                .to("direct:keywordsUpdate");
        

        /**
        GET /trends/keywords/{region}/top/{trend_type} : List trending keywords
        **/
        rest()
            .securityDefinitions()
                .oauth2("pinterest_oauth2")
                    .flow("accessCode")
                    .tokenUrl("https://api.pinterest.com/v5/oauth/token")
                    .authorizationUrl("https://www.pinterest.com/oauth/")
                        .withScope("user_accounts:read","See your user accounts and followers")
                
            .endSecurityDefinition()
            .get("/trends/keywords/{region}/top/{trend_type}")
                .description("List trending keywords")
                .id("trendingKeywordsListApi")
                .produces("application/json")
                .outType(TrendingKeywordsResponse.class)
                .param()
                    .name("region")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The geographic region of interest. Only top trends within the specified region will be returned.<br /> The `region` parameter is formatted as ISO 3166-2 country codes delimited by `+`, corresponding to the following geographic areas: - `US` - United States - `CA` - Canada - `DE` - Germany - `FR` - France - `ES` - Spain - `IT` - Italy - `DE+AT+CH` - Germanic countries - `GB+IE` - Great Britain & Ireland - `IT+ES+PT+GR+MT` - Southern Europe - `PL+RO+HU+SK+CZ` - Eastern Europe - `SE+DK+FI+NO` - Nordic countries - `NL+BE+LU` - Benelux - `AR` - Argentina - `BR` - Brazil - `CO` - Colombia - `MX` - Mexico - `MX+AR+CO+CL` - Hispanic LatAm - `AU+NZ` - Australasia")
                .endParam()
                .param()
                    .name("trendType")
                    .type(RestParamType.path)
                    .required(true)
                    .description("The methodology used to rank how trendy a keyword is. - `growing` trends have high upward growth in search volume over the last quarter - `monthly` trends have high search volume in the last month - `yearly` trends have high search volume in the last year - `seasonal` trends have high upward growth in search volume over the last month and exhibit a seasonal recurring pattern (typically annual)")
                .endParam()
                .param()
                    .name("interests")
                    .type(RestParamType.query)
                    .required(false)
                    .description("If set, filters the results to trends associated with the specified interests.<br /> If unset, trends for all interests will be returned.<br /> The list of supported interests is: - `animals` - Animals - `architecture` - Architecture - `art` - Art - `beauty` - Beauty - `childrens_fashion` - Children's Fashion - `design` - Design - `diy_and_crafts` - DIY & Crafts - `education` - Education - `electronics` - Electronics - `entertainment` - Entertainment - `event_planning` - Event Planning - `finance` - Finance - `food_and_drinks` - Food & Drink - `gardening` - Gardening - `health` - Health - `home_decor` - Home Decor - `mens_fashion` - Men's Fashion - `parenting` - Parenting - `quotes` - Quotes - `sport` - Sports - `travel` - Travel - `vehicles` - Vehicles - `wedding` - Wedding - `womens_fashion` - Women's Fashion")
                .endParam()
                .param()
                    .name("genders")
                    .type(RestParamType.query)
                    .required(false)
                    .description("If set, filters the results to trends among users who identify with the specified gender(s).<br /> If unset, trends among all genders will be returned.<br /> The `unknown` group includes users with unspecified or customized gender profile settings.")
                .endParam()
                .param()
                    .name("ages")
                    .type(RestParamType.query)
                    .required(false)
                    .description("If set, filters the results to trends among users in the specified age range(s).<br /> If unset, trends among all age groups will be returned.")
                .endParam()
                .param()
                    .name("includeKeywords")
                    .type(RestParamType.query)
                    .required(false)
                    .description("If set, filters the results to top trends which include at least one of the specified keywords.<br /> If unset, no keyword filtering logic is applied.")
                .endParam()
                .param()
                    .name("normalizeAgainstGroup")
                    .type(RestParamType.query)
                    .required(false)
                    .description("Governs how the resulting time series data will be normalized to a [0-100] scale.<br /> By default (`false`), the data will be normalized independently for each keyword.  The peak search volume observation in *each* keyword's time series will be represented by the value 100.  This is ideal for analyzing when an individual keyword is expected to peak in interest.<br /> If set to `true`, the data will be normalized as a group.  The peak search volume observation across *all* keywords in the response will be represented by the value 100, and all other values scaled accordingly.  Use this option when you wish to compare relative search volume between multiple keywords.")
                .endParam()
                .param()
                    .name("limit")
                    .type(RestParamType.query)
                    .required(false)
                    .description("The maximum number of trending keywords that will be returned. Keywords are returned in trend-ranked order, so a `limit` of 50 will return the top 50 trends.")
                .endParam()
                .to("direct:trendingKeywordsList");
        
    }
}
